<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\src\code_recommender\input_code_file\input_file.java"><package>package <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>solutions</name></name> ;</package> 

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name> ;</import> 
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name> ;</import> 

<class><specifier>public</specifier> class <name>_1</name>  <block>{ 

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution1</name>  <block>{ 
        <function><type><specifier>public</specifier> <name><name>int</name><index>[]</index></name></type> <name>twoSum</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>nums</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>target</name></decl></parameter>)</parameter_list>  <block>{<block_content> 
            <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>map</name> <init>= <expr><operator>new</operator> <call><name>HashMap</name><argument_list>()</argument_list></call></expr></init></decl> ;</decl_stmt> 
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init>  <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>nums</name><operator>.</operator><name>length</name></name></expr> ;</condition>  <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>  <block>{<block_content> 
                <if_stmt><if>if <condition>(<expr><call><name><name>map</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>target</name> <operator>-</operator> <name><name>nums</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>  <block>{<block_content> 
                    <return>return <expr><operator>new</operator> <name><name>int</name><index>[]</index></name> <block>{ <expr><call><name><name>map</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>target</name> <operator>-</operator> <name><name>nums</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>, <expr><name>i</name></expr> }</block></expr>  ;</return> 
                 </block_content>}</block></if>  <else>else  <block>{<block_content> 
                    <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>nums</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> 
                 </block_content>}</block></else></if_stmt> 
             </block_content>}</block></for> 
            <return>return <expr><operator>new</operator> <name><name>int</name><index>[]</index></name> <block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>  ;</return> 
         </block_content>}</block></function> 
     }</block></class> 

 }</block></class> 
</unit>
