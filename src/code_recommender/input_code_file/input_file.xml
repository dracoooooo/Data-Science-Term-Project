<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\src\code_recommender\input_code_file\input_file.java"><package>package <name><name>cpu</name><operator>.</operator><name>alu</name></name> ;</package> 

<comment type="block" format="javadoc">/**
 * Arithmetic Logic Unit
 * ALUå°è£ç±»
 * TODO: å åä¸é»è¾è¿ç®
 */</comment>
<class><specifier>public</specifier> class <name>ALU</name>  <block>{ 

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>int</name></type> <name>BIT_LEN</name> <init>= <expr><literal type="number">32</literal></expr></init></decl> ;</decl_stmt> 
     <comment type="line">//  æ¨¡æå¯å­å¨ä¸­çè¿ä½æ å¿ä½</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>CF</name> <init>= <expr><literal type="string">"0"</literal></expr></init></decl> ;</decl_stmt> 

     <comment type="line">//  æ¨¡æå¯å­å¨ä¸­çæº¢åºæ å¿ä½</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>OF</name> <init>= <expr><literal type="string">"0"</literal></expr></init></decl> ;</decl_stmt> 

     <comment type="line">// add two integer</comment>
    <function><type><name>String</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>dest</name></decl></parameter>)</parameter_list>  <block>{<block_content> 
         <comment type="line">//  TODO</comment>
         <comment type="line">//  src + dest ; </comment>
        <decl_stmt><decl><type><name><name>char</name><index>[]</index></name></type> <name>srcBits</name> <init>= <expr><call><name><name>src</name><operator>.</operator><name>toCharArray</name></name><argument_list>()</argument_list></call></expr></init></decl> ;</decl_stmt> 
        <decl_stmt><decl><type><name><name>char</name><index>[]</index></name></type> <name>destBits</name> <init>= <expr><call><name><name>dest</name><operator>.</operator><name>toCharArray</name></name><argument_list>()</argument_list></call></expr></init></decl> ;</decl_stmt> 
        <decl_stmt><decl><type><name><name>char</name><index>[]</index></name></type> <name>ansBits</name> <init>= <expr><operator>new</operator> <name><name>char</name><index>[<expr><name>BIT_LEN</name></expr>]</index></name></expr></init></decl> ;</decl_stmt> 
        <decl_stmt><decl><type><name>char</name></type> <name>Ci</name> <init>= <expr><literal type="char">'0'</literal></expr></init></decl> ;</decl_stmt> 
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><call><name><name>src</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></init></decl> ;</init>  <condition><expr><name>i</name> <operator>&gt;=</operator><literal type="number">0</literal></expr> ;</condition>  <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content> 
            <expr_stmt><expr><name><name>ansBits</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>xorBit</name><argument_list>(<argument><expr><name>Ci</name></expr></argument>, <argument><expr><call><name>xorBit</name><argument_list>(<argument><expr><name><name>srcBits</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>destBits</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt> 
            <expr_stmt><expr><name>Ci</name> <operator>=</operator> <call><name>orBit</name><argument_list>(<argument><expr><call><name>andBit</name><argument_list>(<argument><expr><name><name>srcBits</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>destBits</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>orBit</name><argument_list>(<argument><expr><call><name>andBit</name><argument_list>(<argument><expr><name><name>srcBits</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name>Ci</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>andBit</name><argument_list>(<argument><expr><name><name>destBits</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>Ci</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt> 
         </block_content>}</block></for> 
        <expr_stmt><expr><name>CF</name> <operator>=</operator> <call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>Ci</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> 
		<return>return <expr><operator>new</operator> <call><name>String</name><argument_list>(<argument><expr><name>ansBits</name></expr></argument>)</argument_list></call></expr> ;</return> 
     </block_content>}</block></function> 

     <comment type="line">// sub two integer</comment>
     <comment type="line">//  dest - src</comment>
    <function><type><name>String</name></type> <name>sub</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>dest</name></decl></parameter>)</parameter_list>  <block>{<block_content> 
         <comment type="line">//  TODO</comment>
         <comment type="line">//  dest - src ; </comment>
		<return>return <expr><call><name>add</name><argument_list>(<argument><expr><call><name>toComplement</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr> ;</return> 
	 </block_content>}</block></function> 

    <function><type><name>String</name></type> <name>and</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>dest</name></decl></parameter>)</parameter_list>  <block>{<block_content> 
         <comment type="line">//  TODO</comment>
        <decl_stmt><decl><type><name>StringBuilder</name></type> <name>ans</name><init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>(<argument><expr><name>BIT_LEN</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt> 
        <decl_stmt><decl><type><name><name>char</name><index>[]</index></name></type> <name>srcBits</name> <init>= <expr><call><name><name>src</name><operator>.</operator><name>toCharArray</name></name><argument_list>()</argument_list></call></expr></init></decl> ;</decl_stmt> 
        <decl_stmt><decl><type><name><name>char</name><index>[]</index></name></type> <name>destBits</name> <init>= <expr><call><name><name>dest</name><operator>.</operator><name>toCharArray</name></name><argument_list>()</argument_list></call></expr></init></decl> ;</decl_stmt> 
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init>  <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>srcBits</name><operator>.</operator><name>length</name></name></expr> ;</condition>  <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content> 
            <expr_stmt><expr><call><name><name>ans</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name>andBit</name><argument_list>(<argument><expr><name><name>srcBits</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>destBits</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt> 
         </block_content>}</block></for> 
		<return>return <expr><call><name><name>ans</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr> ;</return> 
     </block_content>}</block></function> 

    <function><type><name>String</name></type> <name>or</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>dest</name></decl></parameter>)</parameter_list>  <block>{<block_content> 
         <comment type="line">//  TODO</comment>
        <decl_stmt><decl><type><name>StringBuilder</name></type> <name>ans</name><init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>(<argument><expr><name>BIT_LEN</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt> 
        <decl_stmt><decl><type><name><name>char</name><index>[]</index></name></type> <name>srcBits</name> <init>= <expr><call><name><name>src</name><operator>.</operator><name>toCharArray</name></name><argument_list>()</argument_list></call></expr></init></decl> ;</decl_stmt> 
        <decl_stmt><decl><type><name><name>char</name><index>[]</index></name></type> <name>destBits</name> <init>= <expr><call><name><name>dest</name><operator>.</operator><name>toCharArray</name></name><argument_list>()</argument_list></call></expr></init></decl> ;</decl_stmt> 
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init>  <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>srcBits</name><operator>.</operator><name>length</name></name></expr> ;</condition>  <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content> 
            <expr_stmt><expr><call><name><name>ans</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name>orBit</name><argument_list>(<argument><expr><name><name>srcBits</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>destBits</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt> 
         </block_content>}</block></for> 
        <return>return <expr><call><name><name>ans</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr> ;</return> 
     </block_content>}</block></function> 

    <function><type><name>String</name></type> <name>xor</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>dest</name></decl></parameter>)</parameter_list>  <block>{<block_content> 
         <comment type="line">//  TODO</comment>
        <decl_stmt><decl><type><name>StringBuilder</name></type> <name>ans</name><init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>(<argument><expr><name>BIT_LEN</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt> 
        <decl_stmt><decl><type><name><name>char</name><index>[]</index></name></type> <name>srcBits</name> <init>= <expr><call><name><name>src</name><operator>.</operator><name>toCharArray</name></name><argument_list>()</argument_list></call></expr></init></decl> ;</decl_stmt> 
        <decl_stmt><decl><type><name><name>char</name><index>[]</index></name></type> <name>destBits</name> <init>= <expr><call><name><name>dest</name><operator>.</operator><name>toCharArray</name></name><argument_list>()</argument_list></call></expr></init></decl> ;</decl_stmt> 
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init>  <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>srcBits</name><operator>.</operator><name>length</name></name></expr> ;</condition>  <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content> 
            <expr_stmt><expr><call><name><name>ans</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name>xorBit</name><argument_list>(<argument><expr><name><name>srcBits</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>destBits</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt> 
         </block_content>}</block></for> 
        <return>return <expr><call><name><name>ans</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr> ;</return> 
     </block_content>}</block></function> 

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>char</name></type> <name>andBit</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>bit1</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>bit2</name></decl></parameter>)</parameter_list>
     <block>{<block_content> 
        <if_stmt><if>if<condition>(<expr><name>bit1</name> <operator>==</operator> <literal type="char">'1'</literal> <operator>&amp;&amp;</operator> <name>bit2</name> <operator>==</operator> <literal type="char">'1'</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="char">'1'</literal></expr> ;</return></block_content></block></if> 
        <else>else<block type="pseudo"><block_content> <return>return <expr><literal type="char">'0'</literal></expr> ;</return></block_content></block></else></if_stmt> 
     </block_content>}</block></function> 
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>char</name></type> <name>orBit</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>bit1</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>bit2</name></decl></parameter>)</parameter_list>
     <block>{<block_content> 
        <if_stmt><if>if<condition>(<expr><name>bit1</name> <operator>==</operator> <literal type="char">'1'</literal> <operator>||</operator> <name>bit2</name> <operator>==</operator> <literal type="char">'1'</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="char">'1'</literal></expr> ;</return></block_content></block></if> 
        <else>else<block type="pseudo"><block_content> <return>return <expr><literal type="char">'0'</literal></expr> ;</return></block_content></block></else></if_stmt> 
     </block_content>}</block></function> 
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>char</name></type> <name>xorBit</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>bit1</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>bit2</name></decl></parameter>)</parameter_list> <block>{<block_content> 
        <if_stmt><if>if<condition>(<expr><name>bit1</name> <operator>==</operator> <name>bit2</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="char">'0'</literal></expr> ;</return></block_content></block></if> 
        <else>else<block type="pseudo"><block_content> <return>return <expr><literal type="char">'1'</literal></expr> ;</return></block_content></block></else></if_stmt> 
     </block_content>}</block></function> 
    <function><type><specifier>private</specifier> <name>String</name></type> <name>toComplement</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>bits</name></decl></parameter>)</parameter_list> <block>{<block_content> 
        <decl_stmt><decl><type><name><name>char</name><index>[]</index></name></type> <name>ans</name> <init>= <expr><call><name><name>bits</name><operator>.</operator><name>toCharArray</name></name><argument_list>()</argument_list></call></expr></init></decl> ;</decl_stmt> 
        <decl_stmt><decl><type><name>boolean</name></type> <name>initOneFound</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl> ;</decl_stmt> 
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><call><name><name>bits</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></init></decl> ;</init>  <condition><expr><name>i</name> <operator>&gt;=</operator><literal type="number">0</literal></expr> ;</condition>  <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content> 
            <if_stmt><if>if<condition>(<expr><name>initOneFound</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'1'</literal></expr> ?</condition><then> <expr><literal type="char">'0'</literal></expr></then><else>: <expr><literal type="char">'1'</literal></expr></else></ternary></expr>  ;</expr_stmt></block_content></block></if></if_stmt> 
            <if_stmt><if>if<condition>(<expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'1'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>initOneFound</name> <operator>=</operator> <literal type="boolean">true</literal></expr> ;</expr_stmt></block_content></block></if></if_stmt> 
         </block_content>}</block></for> 
        <return>return <expr><operator>new</operator> <call><name>String</name><argument_list>(<argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr> ;</return> 
     </block_content>}</block></function> 
 }</block></class> 
</unit>
