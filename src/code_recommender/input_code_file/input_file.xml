<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\src\code_recommender\input_code_file\input_file.cpp"> <cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
 <cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>

<function><type><name>long</name></type> <name>sumOfDigits</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content> 
    <decl_stmt><decl><type><name>long</name></type> <name>output</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl> ;</decl_stmt> 
    <while>while<condition>(<expr><name>x</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>output</name> <operator>+=</operator> <name>x</name><operator>%</operator><literal type="number">10</literal></expr> ;</expr_stmt>  <expr_stmt><expr><name>x</name> <operator>/=</operator> <literal type="number">10</literal></expr> ;</expr_stmt>  </block_content>}</block></while> 
    <return>return <expr><name>output</name></expr> ;</return> 
 </block_content>}</block></function> 

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{<block_content> 

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>input</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></decl> ;</decl_stmt> <expr_stmt><expr><call><name>getline</name><argument_list>(<argument><expr><name><name>std</name><operator>::</operator><name>cin</name></name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> 
    <if_stmt><if>if<condition>(<expr><call><name><name>input</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>  </block_content>}</block></if> 
    <else>else <block>{<block_content> 
        <decl_stmt><decl><type><name>long</name></type> <name>current</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>, <decl><type ref="prev"/><name>times</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></decl> ;</decl_stmt> 
        <for>for<control>(<init><decl><type><name>long</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init>  <condition><expr><name>k</name> <operator>&lt;</operator> <call><name><name>input</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr> ;</condition>  <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content> <expr_stmt><expr><name>current</name> <operator>+=</operator> <name><name>input</name><index>[<expr><name>k</name></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal></expr> ;</expr_stmt>  </block_content>}</block></for> 
        <while>while<condition>(<expr><name>current</name> <operator>&gt;</operator> <literal type="number">9</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>current</name> <operator>=</operator> <call><name>sumOfDigits</name><argument_list>(<argument><expr><name>current</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>  <expr_stmt><expr><operator>++</operator><name>times</name></expr> ;</expr_stmt>  </block_content>}</block></while> 
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%ld\n"</literal></expr></argument>, <argument><expr><name>times</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> 
     </block_content>}</block></else></if_stmt> 
    <return>return <expr><literal type="number">0</literal></expr> ;</return> 
 </block_content>}</block></function> 
</unit>
