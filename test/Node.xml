<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="Node.java"><import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>Date</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>math</name><operator>.</operator><name>*</name></name>;</import>

<class><specifier>public</specifier> class <name>Node</name>
<block>{
  <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Packet</name></argument>&gt;</argument_list></name></type> <name>interests</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Packet</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>       <comment type="line">// interests to be sent along</comment>
  <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Packet</name></argument>&gt;</argument_list></name></type> <name>exploratoryData</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Packet</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line">// exploratory data to be sent along</comment>
  <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Packet</name></argument>&gt;</argument_list></name></type> <name>reinforcements</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Packet</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="line">// reinforcements to be sent along</comment>
  <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Packet</name></argument>&gt;</argument_list></name></type> <name>reinforcedData</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Packet</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="line">// reinforced data to be sent along</comment>

  <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Packet</name></argument>&gt;</argument_list></name></type> <name>interestsSentAsTheSink</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Packet</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="line">// interests which initiated with this node, which is a sink</comment>
  <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Packet</name></argument>&gt;</argument_list></name></type> <name>interestsToRespondToAsTheSource</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Packet</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="line">// reinforced data to be sent from this Node, which is the source.</comment>

  <decl_stmt><decl><type><name>boolean</name></type> <name>generating</name></decl>;</decl_stmt> <comment type="line">// whether this node is generating data. Set at the beginning of the simulation by NodeTest</comment>
  <decl_stmt><decl><type><name>DataType</name></type> <name>genType</name></decl>;</decl_stmt>   <comment type="line">// the type of data being generated by this node. Set at the beginning of the simulation by NodeTest</comment>
  <decl_stmt><decl><type><name>Data</name></type> <name>genData</name></decl>;</decl_stmt>       <comment type="line">// the data which was generated at the current point in time.</comment>

  <decl_stmt><decl><type><name>boolean</name></type> <name>doneSendingRequestedGeneratedData</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>genAmount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>  <comment type="line">// the number of requested pieces of data</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>genPeriod</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>  <comment type="line">// the period of requested pieces of data (1 means at every run(); 2 at every second; etc.).</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>genPeriodCounter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>long</name></type> <name>requestID</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Node</name></argument>&gt;</argument_list></name></type> <name>allNodes</name></decl>;</decl_stmt>                            <comment type="line">// every node in the entire network</comment>
  <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Node</name></argument>&gt;</argument_list></name></type> <name>myNeighbors</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Node</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line">// neighbouring nodes</comment>

  <decl_stmt><decl><type><specifier>public</specifier> <name>int</name></type> <name>nodeEnergyUsed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> <comment type="line">//the total energy used by the node.</comment>

  <decl_stmt><decl><type><specifier>public</specifier> <name>boolean</name></type> <name>suppressOutput</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>public</specifier> <name>int</name></type> <name>nodeID</name></decl>;</decl_stmt>     <comment type="line">// the ID of this node (starting at 0)</comment>
  <decl_stmt><decl><type><specifier>public</specifier> <name>int</name></type> <name>xCoord</name></decl>;</decl_stmt>     <comment type="line">// where this node is.</comment>
  <decl_stmt><decl><type><specifier>public</specifier> <name>int</name></type> <name>yCoord</name></decl>;</decl_stmt>     <comment type="line">// where this node is.</comment>
  <decl_stmt><decl><type><specifier>public</specifier> <name>int</name></type> <name>radioRange</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>public</specifier> <name>int</name></type> <name>numNodes</name></decl>;</decl_stmt>   <comment type="line">// the number of nodes in the entire network.</comment>

  <constructor><specifier>public</specifier> <name>Node</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nodeID</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>xCoord</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>yCoord</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>radioRange</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>numNodes</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>suppressOutput</name></decl></parameter>)</parameter_list>
  <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>nodeID</name></name> <operator>=</operator> <name>nodeID</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>xCoord</name></name> <operator>=</operator> <name>xCoord</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>yCoord</name></name> <operator>=</operator> <name>yCoord</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>radioRange</name></name> <operator>=</operator> <name>radioRange</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>numNodes</name></name> <operator>=</operator> <name>numNodes</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>suppressOutput</name></name> <operator>=</operator> <name>suppressOutput</name></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>currentTime</name></decl></parameter>)</parameter_list> <comment type="line">//This runs at each time-stamp</comment>
  <block>{<block_content>
    <comment type="line">//System.out.println("- - running Node: " + nodeID);</comment>
    <expr_stmt><expr><call><name>generateData</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">//send all interests in the queue.</comment>
    <expr_stmt><expr><call><name>sendInterests</name><argument_list>()</argument_list></call></expr>;</expr_stmt>                    <comment type="line">//broadcast</comment>

    <comment type="line">//send all expData</comment>
    <expr_stmt><expr><call><name>sendExploratoryDataPacketThrough</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <comment type="line">//broadcast</comment>

    <comment type="line">//send all reinforments</comment>
    <expr_stmt><expr><call><name>sendReinforcements</name><argument_list>()</argument_list></call></expr>;</expr_stmt>               <comment type="line">//monocast</comment>

    <comment type="line">//send all reinforcedData</comment>
    <expr_stmt><expr><call><name>sendReinforcedDataPacketThrough</name><argument_list>()</argument_list></call></expr>;</expr_stmt>  <comment type="line">//monocast</comment>

    <comment type="line">//send one generated data if enough time has passed as exploratory data.</comment>
    <expr_stmt><expr><call><name>sendExploratoryDataAsSource</name><argument_list>()</argument_list></call></expr>;</expr_stmt>      <comment type="line">//broadcast</comment>

    <comment type="line">//reinforce a path</comment>
    <expr_stmt><expr><call><name>sendReinforcedDataAsSource</name><argument_list>()</argument_list></call></expr>;</expr_stmt>       <comment type="line">//monocast</comment>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>startGeneration</name><parameter_list>(<parameter><decl><type><name>DataType</name></type> <name>dType</name></decl></parameter>)</parameter_list>
  <block>{<block_content>
    <expr_stmt><expr><name>genType</name> <operator>=</operator> <name>dType</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>generating</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>generateData</name><parameter_list>()</parameter_list>
  <block>{<block_content>
    <if_stmt><if>if<condition>(<expr><name>generating</name></expr>)</condition>
    <block>{<block_content>
      <comment type="line">//generate random data</comment>
      <expr_stmt><expr><name>genData</name> <operator>=</operator> <operator>new</operator> <call><name>Data</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><call><name><name>Math</name><operator>.</operator><name>random</name></name><argument_list>()</argument_list></call><operator>*</operator><literal type="number">256</literal><operator>)</operator></expr></argument>, <argument><expr><name>genType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>startInterest</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>period</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>amount</name></decl></parameter>, <parameter><decl><type><name>DataType</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>currentTime</name></decl></parameter>)</parameter_list>
  <block>{<block_content>
    <comment type="line">//Seed an interest in the network.</comment>
    <decl_stmt><decl><type><name>Packet</name></type> <name>pkt</name> <init>= <expr><operator>new</operator> <call><name>Packet</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>PacketType</name><operator>.</operator><name>INTEREST</name></name></expr></argument>, <argument><expr><name>currentTime</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>amount</name></expr></argument>, <argument><expr><name>period</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>interestsSentAsTheSink</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Make sure we don't re-send this packet when it comes back to us.</comment>
    <decl_stmt><decl><type><name>Packet</name></type> <name>tmp</name> <init>= <expr><call><name><name>pkt</name><operator>.</operator><name>clone</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>ifsent</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>interests</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>(<expr><operator>!</operator><name>suppressOutput</name></expr>)</condition> <block>{<block_content><expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"oE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>broadcast</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>receivePacket</name><parameter_list>(<parameter><decl><type><name>Packet</name></type> <name>pkt</name></decl></parameter>)</parameter_list>
  <block>{<block_content>
    <switch>switch<condition>(<expr><name><name>pkt</name><operator>.</operator><name>pType</name></name></expr>)</condition>
    <block>{<block_content>
      <case>case <expr><name>INTEREST</name></expr>:</case>
        <comment type="line">//see if we have one with this id already</comment>
        <decl_stmt><decl><type><name>boolean</name></type> <name>haveAlready</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>Packet</name></type> <name>p</name> <range>: <expr><name>interests</name></expr></range></decl></init>)</control>
        <block>{<block_content>
          <if_stmt><if>if<condition>(<expr><name><name>p</name><operator>.</operator><name>id</name></name> <operator>==</operator> <name><name>pkt</name><operator>.</operator><name>id</name></name></expr>)</condition>
          <block>{<block_content>
            <comment type="line">//We already have this ID. Ignore this packet.</comment>
            <expr_stmt><expr><name>haveAlready</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            <break>break;</break>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <if_stmt><if>if<condition>(<expr><name>haveAlready</name></expr>)</condition><block type="pseudo"><block_content>
          <break>break;</break></block_content></block></if></if_stmt>

        <comment type="line">//See if interest is for this node</comment>
        <if_stmt><if>if<condition>(<expr><name>generating</name> <operator>&amp;&amp;</operator> <name>genType</name> <operator>==</operator> <name><name>pkt</name><operator>.</operator><name>dType</name></name></expr>)</condition>
        <block>{<block_content>
          <comment type="line">//It's for me; I am the source for this packet.</comment>
          <expr_stmt><expr><call><name><name>interestsToRespondToAsTheSource</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>pkt</name><operator>.</operator><name>clone</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>interests</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">//send it along whether it's for me or not.</comment>
        <break>break;</break>

      <case>case <expr><name>EXPLORATORYDATA</name></expr>:</case>
        <comment type="line">//See if we already have exploratory data for this id.</comment>
        <decl_stmt><decl><type><name>boolean</name></type> <name>foundAlready</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>Packet</name></type> <name>parket</name> <range>: <expr><name>exploratoryData</name></expr></range></decl></init>)</control>
        <block>{<block_content>
          <if_stmt><if>if<condition>(<expr><name><name>parket</name><operator>.</operator><name>id</name></name> <operator>==</operator> <name><name>pkt</name><operator>.</operator><name>id</name></name></expr>)</condition>
          <block>{<block_content>
            <comment type="line">//We already have this ID. Ignore this packet.</comment>
            <expr_stmt><expr><name>foundAlready</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            <break>break;</break>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <if_stmt><if>if<condition>(<expr><name>foundAlready</name></expr>)</condition><block type="pseudo"><block_content>
          <break>break;</break></block_content></block></if></if_stmt>

        <comment type="line">//only ever send the first time we see this ID</comment>
        <comment type="line">//see if this node originated the interest</comment>
        <for>for<control>(<init><decl><type><name>Packet</name></type> <name>p</name> <range>: <expr><name>interestsSentAsTheSink</name></expr></range></decl></init>)</control>
        <block>{<block_content>
          <comment type="line">//see if this node started this id</comment>
          <if_stmt><if>if<condition>(<expr><name><name>p</name><operator>.</operator><name>id</name></name> <operator>==</operator> <name><name>pkt</name><operator>.</operator><name>id</name></name></expr>)</condition>
          <block>{<block_content>
            <comment type="line">//This node started this id. Send reinforcement.</comment>
            <expr_stmt><expr><call><name><name>reinforcements</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Packet</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>PacketType</name><operator>.</operator><name>REINFORCEMENT</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name><name>pkt</name><operator>.</operator><name>dType</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name><name>pkt</name><operator>.</operator><name>requestedAmount</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>.</operator><name>requestedPeriod</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>pkt</name><operator>.</operator><name>ifsent</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt> <comment type="line">// so that we don't resend a packet which is for us.</comment>
            <break>break;</break>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name><name>exploratoryData</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">//if it's for us or not, but only send the first one we see.</comment>

        <break>break;</break>

      <case>case <expr><name>REINFORCEMENT</name></expr>:</case>
        <comment type="line">//See if we already have exploratory data for this id.</comment>
        <decl_stmt><decl><type><name>boolean</name></type> <name>alreadyHave</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>Packet</name></type> <name>parket</name> <range>: <expr><name>reinforcements</name></expr></range></decl></init>)</control>
        <block>{<block_content>
          <if_stmt><if>if<condition>(<expr><name><name>parket</name><operator>.</operator><name>id</name></name> <operator>==</operator> <name><name>pkt</name><operator>.</operator><name>id</name></name></expr>)</condition>
          <block>{<block_content>
            <comment type="line">//We already have this ID. Ignore this packet.</comment>
            <expr_stmt><expr><name>alreadyHave</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            <break>break;</break>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <if_stmt><if>if<condition>(<expr><name>alreadyHave</name></expr>)</condition><block type="pseudo"><block_content>
          <break>break;</break></block_content></block></if></if_stmt>

        <if_stmt><if>if<condition>(<expr><name>generating</name> <operator>&amp;&amp;</operator> <name>genType</name> <operator>==</operator> <name><name>pkt</name><operator>.</operator><name>dType</name></name></expr>)</condition>
        <block>{<block_content>
          <comment type="line">//It's for me; I am the source for this packet.</comment>
          <comment type="line">//enable the sending of generated data as reinforced data, and sets its parameters.</comment>
          <expr_stmt><expr><name>doneSendingRequestedGeneratedData</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name>genAmount</name> <operator>=</operator> <name><name>pkt</name><operator>.</operator><name>requestedAmount</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><name>genPeriod</name> <operator>=</operator> <name><name>pkt</name><operator>.</operator><name>requestedPeriod</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><name>requestID</name> <operator>=</operator> <name><name>pkt</name><operator>.</operator><name>id</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><name>genPeriodCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>pkt</name><operator>.</operator><name>ifsent</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt> <comment type="line">//don't send along a packet which was for us. ONLY ONE SOURCE PER DATA TYPE.</comment>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>reinforcements</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">//add it to the list (to be sent if not for us)</comment>
        <break>break;</break>

      <case>case <expr><name>REINFORCEDDATA</name></expr>:</case>
        <decl_stmt><decl><type><name>boolean</name></type> <name>foundIt</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
        <comment type="line">// See if the packet is for me</comment>
        <for>for<control>(<init><decl><type><name>Packet</name></type> <name>p</name> <range>: <expr><name>interestsSentAsTheSink</name></expr></range></decl></init>)</control>
        <block>{<block_content>
          <if_stmt><if>if<condition>(<expr><name><name>p</name><operator>.</operator><name>id</name></name> <operator>==</operator> <name><name>pkt</name><operator>.</operator><name>id</name></name></expr>)</condition>
          <block>{<block_content>
            <comment type="line">// It is for us! We are the sink for this packet.</comment>
            <if_stmt><if>if<condition>(<expr><operator>!</operator><name>suppressOutput</name></expr>)</condition> <block>{<block_content><expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"  - - -o  Sink Node: "</literal> <operator>+</operator> <name>nodeID</name> <operator>+</operator> <literal type="string">" received data: \t"</literal> <operator>+</operator> <name><name>pkt</name><operator>.</operator><name>datum</name><operator>.</operator><name>datum</name></name> <operator>+</operator> <literal type="string">"\t id: "</literal> <operator>+</operator> <name><name>pkt</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>foundIt</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            <break>break;</break>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <if_stmt><if>if<condition>(<expr><operator>!</operator><name>foundIt</name></expr>)</condition>
        <block>{<block_content>
          <expr_stmt><expr><call><name><name>reinforcedData</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">//if it wasn't for us, send it along.</comment>
        </block_content>}</block></if></if_stmt>
        <break>break;</break>

      <default>default:</default>
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"===ERROR===     No Packet Type."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>

    </block_content>}</block></switch>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>sendInterests</name><parameter_list>()</parameter_list>
  <block>{<block_content>
    <comment type="line">// send all of the unsent interests.</comment>
    <for>for<control>(<init><decl><type><name>Packet</name></type> <name>pkt</name> <range>: <expr><name>interests</name></expr></range></decl></init>)</control>
    <block>{<block_content>
      <if_stmt><if>if<condition>(<expr><name><name>pkt</name><operator>.</operator><name>ifsent</name></name> <operator>==</operator> <literal type="boolean">false</literal></expr>)</condition>
      <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><operator>!</operator><name>suppressOutput</name></expr>)</condition> <block>{<block_content><expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"-E"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>broadcast</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pkt</name><operator>.</operator><name>ifsent</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>sendExploratoryDataPacketThrough</name><parameter_list>()</parameter_list>
  <block>{<block_content>
    <comment type="line">// send all of the unsent expData packets.</comment>
    <for>for<control>(<init><decl><type><name>Packet</name></type> <name>pkt</name> <range>: <expr><name>exploratoryData</name></expr></range></decl></init>)</control>
    <block>{<block_content>
      <if_stmt><if>if<condition>(<expr><name><name>pkt</name><operator>.</operator><name>ifsent</name></name> <operator>==</operator> <literal type="boolean">false</literal></expr>)</condition>
      <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><operator>!</operator><name>suppressOutput</name></expr>)</condition> <block>{<block_content><expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"- -E"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>broadcast</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pkt</name><operator>.</operator><name>ifsent</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>sendReinforcements</name><parameter_list>()</parameter_list>
  <block>{<block_content>
    <decl_stmt><decl><type><name>Node</name></type> <name>sendTo</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <comment type="line">// send all of the unsent reinforcements packets.</comment>
    <comment type="line">//System.out.println("SIZE: "+ reinforcements.size());</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>siz</name> <init>= <expr><call><name><name>reinforcements</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>siz</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
      <comment type="line">//System.out.println(i + " " + reinforcements.get(i).ifsent + " " + reinforcements.get(i).id);</comment>
      <if_stmt><if>if<condition>(<expr><call><name><name>reinforcements</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><name>ifsent</name> <operator>==</operator> <literal type="boolean">false</literal></expr>)</condition>
      <block>{<block_content>
        <comment type="line">//send to the node from the packet with this id from the exploratoryData list.</comment>
        <comment type="line">//there will only be one, and it will have been the fastest.</comment>
        <for>for<control>(<init><decl><type><name>Packet</name></type> <name>expkt</name> <range>: <expr><name>exploratoryData</name></expr></range></decl></init>)</control>
        <block>{<block_content>
          <if_stmt><if>if<condition>(<expr><name><name>expkt</name><operator>.</operator><name>id</name></name> <operator>==</operator> <call><name><name>reinforcements</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><name>id</name></expr>)</condition>
          <block>{<block_content>
            <expr_stmt><expr><name>sendTo</name> <operator>=</operator> <name><name>expkt</name><operator>.</operator><name>sender</name></name></expr>;</expr_stmt>
            <comment type="line">//System.out.println("We found which to send reinf to: " + i);</comment>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>

        <if_stmt><if>if<condition>(<expr><name>sendTo</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
          <if_stmt><if>if<condition>(<expr><operator>!</operator><name>suppressOutput</name></expr>)</condition> <block>{<block_content><expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"could not find who to send reinf to."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content>}</block></if></if_stmt>
          <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if<condition>(<expr><call><name><name>reinforcements</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><name>sender</name> <operator>==</operator> <name>this</name></expr>)</condition>
        <block>{<block_content>
          <if_stmt><if>if<condition>(<expr><operator>!</operator><name>suppressOutput</name></expr>)</condition> <block>{<block_content><expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"o - -+"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content>}</block></if></if_stmt>
        </block_content>}</block></if><else>else<block>{<block_content>
          <if_stmt><if>if<condition>(<expr><operator>!</operator><name>suppressOutput</name></expr>)</condition> <block>{<block_content><expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"- - -+"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
        <if_stmt><if>if<condition>(<expr><operator>!</operator><call><name><name>myNeighbors</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>sendTo</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
          <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"ERROR 404: Sending to non-neighbours"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>monocast</name><argument_list>(<argument><expr><call><name><name>reinforcements</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>sendTo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>reinforcements</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><name>ifsent</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>sendReinforcedDataPacketThrough</name><parameter_list>()</parameter_list>
  <block>{<block_content>
    <decl_stmt><decl><type><name>Node</name></type> <name>sendTo</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <comment type="line">// send all of the unsent reinforcedData packets.</comment>
    <for>for<control>(<init><decl><type><name>Packet</name></type> <name>pkt</name> <range>: <expr><name>reinforcedData</name></expr></range></decl></init>)</control>
    <block>{<block_content>
      <if_stmt><if>if<condition>(<expr><name><name>pkt</name><operator>.</operator><name>ifsent</name></name> <operator>==</operator> <literal type="boolean">false</literal></expr>)</condition>
      <block>{<block_content>
        <comment type="line">//send to the node from the packet with this id from the reinforcements list.</comment>
        <comment type="line">//there will only be one.</comment>
        <for>for<control>(<init><decl><type><name>Packet</name></type> <name>reinfpkt</name> <range>: <expr><name>reinforcements</name></expr></range></decl></init>)</control>
        <block>{<block_content>
          <if_stmt><if>if<condition>(<expr><name><name>reinfpkt</name><operator>.</operator><name>id</name></name> <operator>==</operator> <name><name>pkt</name><operator>.</operator><name>id</name></name></expr>)</condition>
          <block>{<block_content>
            <expr_stmt><expr><name>sendTo</name> <operator>=</operator> <name><name>reinfpkt</name><operator>.</operator><name>sender</name></name></expr>;</expr_stmt>
            <comment type="line">//System.out.println("We found which to send reinfdata to.");</comment>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>

        <if_stmt><if>if<condition>(<expr><name>sendTo</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition>
        <block>{<block_content>
          <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"===ERROR=== could not find who to send reinfdata to."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if<condition>(<expr><operator>!</operator><name>suppressOutput</name></expr>)</condition> <block>{<block_content><expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"- - - -+"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content>}</block></if></if_stmt>
        <if_stmt><if>if<condition>(<expr><operator>!</operator><call><name><name>myNeighbors</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>sendTo</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
          <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"ERROR 403: Sending to non-neighbours"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>monocast</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>sendTo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pkt</name><operator>.</operator><name>ifsent</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>sendExploratoryDataAsSource</name><parameter_list>()</parameter_list>
  <block>{<block_content>
    <for>for<control>(<init><decl><type><name>Packet</name></type> <name>pkt</name> <range>: <expr><name>interestsToRespondToAsTheSource</name></expr></range></decl></init>)</control>
    <block>{<block_content>
      <if_stmt><if>if<condition>(<expr><name><name>pkt</name><operator>.</operator><name>ifsent</name></name> <operator>==</operator> <literal type="boolean">false</literal></expr>)</condition>
      <block>{<block_content>
        <comment type="line">//genPeriodCounter = 0;</comment>
        <if_stmt><if>if<condition>(<expr><operator>!</operator><name>suppressOutput</name></expr>)</condition> <block>{<block_content><expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"o -E"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>broadcast</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Packet</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>PacketType</name><operator>.</operator><name>EXPLORATORYDATA</name></name></expr></argument>, <argument><expr><name>requestID</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name>genType</name></expr></argument>, <argument><expr><name>genData</name></expr></argument>, <argument><expr><name><name>pkt</name><operator>.</operator><name>requestedAmount</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>.</operator><name>requestedPeriod</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pkt</name><operator>.</operator><name>ifsent</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>sendReinforcedDataAsSource</name><parameter_list>()</parameter_list>
  <block>{<block_content>
    <decl_stmt><decl><type><name>Packet</name></type> <name>pkt</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <comment type="line">//This function will send data of type genType every genPeriod runs for a total of genAmount times.</comment>

    <comment type="line">//check to see that we have received a request</comment>
    <if_stmt><if>if<condition>(<expr><name>doneSendingRequestedGeneratedData</name></expr>)</condition><block type="pseudo"><block_content>
      <return>return;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>(<expr><name>genAmount</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>doneSendingRequestedGeneratedData</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>genPeriodCounter</name><operator>++</operator></expr>;</expr_stmt>

    <if_stmt><if>if<condition>(<expr><name>genPeriodCounter</name> <operator>%</operator> <name>genPeriod</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <comment type="line">// send a reinforced data packet every genPeriod time-stamps.</comment>
      <return>return;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>genAmount</name><operator>--</operator></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>Node</name></type> <name>sendTo</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <comment type="line">//send to the node from the packet with this id from the reinforcements list.</comment>
    <comment type="line">//there will only be one.</comment>
    <for>for<control>(<init><decl><type><name>Packet</name></type> <name>reinfpkt</name> <range>: <expr><name>reinforcements</name></expr></range></decl></init>)</control>
    <block>{<block_content>
      <if_stmt><if>if<condition>(<expr><name><name>reinfpkt</name><operator>.</operator><name>id</name></name> <operator>==</operator> <name>requestID</name></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><name>sendTo</name> <operator>=</operator> <name><name>reinfpkt</name><operator>.</operator><name>sender</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>pkt</name> <operator>=</operator> <name>reinfpkt</name></expr>;</expr_stmt>
        <break>break;</break>
        <comment type="line">//System.out.println("We found which to send reinfdata to [from source].");</comment>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if<condition>(<expr><name>sendTo</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"===ERROR===    could not find who to send reinfdata to [from source]."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>(<expr><operator>!</operator><name>suppressOutput</name></expr>)</condition> <block>{<block_content><expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"o - - -+"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>(<expr><operator>!</operator><call><name><name>myNeighbors</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>sendTo</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"ERROR 402: Sending to non-neighbours"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>monocast</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Packet</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>PacketType</name><operator>.</operator><name>REINFORCEDDATA</name></name></expr></argument>, <argument><expr><name>requestID</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name>genType</name></expr></argument>, <argument><expr><name>genData</name></expr></argument>, <argument><expr><name><name>pkt</name><operator>.</operator><name>requestedAmount</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>.</operator><name>requestedPeriod</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>sendTo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>broadcast</name><parameter_list>(<parameter><decl><type><name>Packet</name></type> <name>pkt</name></decl></parameter>)</parameter_list>
  <block>{<block_content>
    <comment type="line">//    if(nodeID == 0) //Single out a specific node for testing</comment>
    <comment type="line">//      System.out.println("==== Node " + nodeID + " sent Packet. id: " + pkt.id + ", sender: " + pkt.sender.nodeID + ", pType: " + pkt.pType);</comment>
    <decl_stmt><decl><type><name>Packet</name></type> <name>tmp</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>nodeEnergyUsed</name><operator>++</operator></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>Node</name></type> <name>nod</name> <range>: <expr><name>myNeighbors</name></expr></range></decl></init>)</control>
    <block>{<block_content>
      <expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name><name>pkt</name><operator>.</operator><name>clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>sender</name></name> <operator>=</operator> <name>this</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>nod</name><operator>.</operator><name>receivePacket</name></name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>monocast</name><parameter_list>(<parameter><decl><type><name>Packet</name></type> <name>pkt</name></decl></parameter>, <parameter><decl><type><name>Node</name></type> <name>nod</name></decl></parameter>)</parameter_list>
  <block>{<block_content>
    <comment type="line">//    if(nodeID == 0) //Single out a specific node for testing</comment>
    <comment type="line">//      System.out.println("==== Node " + nodeID + " sent Packet. id: " + pkt.id + ", sender: " + pkt.sender.nodeID + ", pType: " + pkt.pType);</comment>
    <decl_stmt><decl><type><name>Packet</name></type> <name>tmp</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>nodeEnergyUsed</name><operator>++</operator></expr>;</expr_stmt>
    <if_stmt><if>if<condition>(<expr><operator>!</operator><call><name><name>myNeighbors</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>nod</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"===ERROR===               monocast sent to node: "</literal> <operator>+</operator> <name><name>nod</name><operator>.</operator><name>nodeID</name></name> <operator>+</operator> <literal type="string">", which is NOT A NEIGHBOUR"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name><name>pkt</name><operator>.</operator><name>clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>sender</name></name> <operator>=</operator> <name>this</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>nod</name><operator>.</operator><name>receivePacket</name></name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isThereStillWorkToBeDone</name><parameter_list>()</parameter_list>
  <block>{<block_content>
    <if_stmt><if>if<condition>(<expr><operator>!</operator><name>doneSendingRequestedGeneratedData</name></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>
    <for>for<control>(<init><decl><type><name>Packet</name></type> <name>pkt</name> <range>: <expr><name>interests</name></expr></range></decl></init>)</control>
    <block>{<block_content>
      <if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>pkt</name><operator>.</operator><name>ifsent</name></name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <for>for<control>(<init><decl><type><name>Packet</name></type> <name>pkt</name> <range>: <expr><name>exploratoryData</name></expr></range></decl></init>)</control>
    <block>{<block_content>
      <if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>pkt</name><operator>.</operator><name>ifsent</name></name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <for>for<control>(<init><decl><type><name>Packet</name></type> <name>pkt</name> <range>: <expr><name>reinforcements</name></expr></range></decl></init>)</control>
    <block>{<block_content>
      <if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>pkt</name><operator>.</operator><name>ifsent</name></name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <for>for<control>(<init><decl><type><name>Packet</name></type> <name>pkt</name> <range>: <expr><name>reinforcedData</name></expr></range></decl></init>)</control>
    <block>{<block_content>
      <if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>pkt</name><operator>.</operator><name>ifsent</name></name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>setAllNodes</name><parameter_list>(<parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Node</name></argument>&gt;</argument_list></name></type> <name>allNodes</name></decl></parameter>)</parameter_list>
  <block>{<block_content>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>allNodes</name></name> <operator>=</operator> <name>allNodes</name></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>findNeighbors</name><parameter_list>()</parameter_list>
  <block>{<block_content>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>numNodes</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
      <comment type="line">// If we are not the node which is currently being considered.</comment>
      <if_stmt><if>if<condition>(<expr><name><name>this</name><operator>.</operator><name>xCoord</name></name> <operator>!=</operator> <call><name><name>allNodes</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><name>xCoord</name> <operator>||</operator> <name><name>this</name><operator>.</operator><name>yCoord</name></name> <operator>!=</operator> <call><name><name>allNodes</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><name>yCoord</name></expr>)</condition>
      <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>xDiff</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>abs</name></name><argument_list>(<argument><expr><call><name><name>allNodes</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><name>xCoord</name> <operator>-</operator> <name><name>this</name><operator>.</operator><name>xCoord</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>yDiff</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>abs</name></name><argument_list>(<argument><expr><call><name><name>allNodes</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><name>yCoord</name> <operator>-</operator> <name><name>this</name><operator>.</operator><name>yCoord</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if<condition>(<expr><name>xDiff</name> <operator>&lt;=</operator> <name>radioRange</name> <operator>&amp;&amp;</operator> <name>yDiff</name> <operator>&lt;=</operator> <name>radioRange</name></expr>)</condition>
        <block>{<block_content>
          <comment type="line">//          System.out.println("Node " + nodeID + " is adding node " + allNodes.get(i).nodeID + " to its neighbours. It is as far away as x = " + xDiff + " and y = " + yDiff);</comment>
          <expr_stmt><expr><call><name><name>myNeighbors</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>allNodes</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></function>
}</block></class>
</unit>
