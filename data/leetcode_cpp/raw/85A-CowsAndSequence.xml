<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode_cpp\raw\85A-CowsAndSequence.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{<block_content>

    <decl_stmt><decl><type><name>int</name></type> <name>n</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name>first</name> <init>= <expr><literal type="char">'x'</literal></expr></init></decl>, <decl><type ref="prev"/><name>last</name> <init>= <expr><literal type="char">'y'</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>count</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

    <if_stmt><if>if<condition>(<expr><name>n</name><operator>%</operator><literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>

        <for>for<control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>n</name><operator>/</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block>{<block_content><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%c%c"</literal></expr></argument>, <argument><expr><operator>(</operator><name>count</name><operator>)</operator><operator>%</operator><literal type="number">2</literal> <operator>+</operator> <literal type="char">'a'</literal></expr></argument>, <argument><expr><operator>(</operator><name>count</name><operator>)</operator><operator>%</operator><literal type="number">2</literal> <operator>+</operator> <literal type="char">'a'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><operator>++</operator><name>count</name></expr>;</expr_stmt></block_content>}</block></for><empty_stmt>;</empty_stmt> <expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>n</name><operator>/</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block>{<block_content><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%c%c"</literal></expr></argument>, <argument><expr><operator>(</operator><name>count</name><operator>)</operator><operator>%</operator><literal type="number">2</literal> <operator>+</operator> <literal type="char">'c'</literal></expr></argument>, <argument><expr><operator>(</operator><name>count</name><operator>)</operator><operator>%</operator><literal type="number">2</literal> <operator>+</operator> <literal type="char">'c'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><operator>++</operator><name>count</name></expr>;</expr_stmt></block_content>}</block></for><empty_stmt>;</empty_stmt> <expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <for>for<control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>n</name><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block>{<block_content><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%c%c"</literal></expr></argument>, <argument><expr><operator>(</operator><name>count</name><operator>)</operator><operator>%</operator><literal type="number">2</literal> <operator>+</operator> <literal type="char">'f'</literal></expr></argument>, <argument><expr><operator>(</operator><name>count</name><operator>)</operator><operator>%</operator><literal type="number">2</literal> <operator>+</operator> <literal type="char">'f'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><operator>++</operator><name>count</name></expr>;</expr_stmt></block_content>}</block></for><empty_stmt>;</empty_stmt> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%c\n"</literal></expr></argument>, <argument><expr><name>last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <for>for<control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>n</name><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block>{<block_content><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%c%c"</literal></expr></argument>, <argument><expr><operator>(</operator><name>count</name><operator>)</operator><operator>%</operator><literal type="number">2</literal> <operator>+</operator> <literal type="char">'m'</literal></expr></argument>, <argument><expr><operator>(</operator><name>count</name><operator>)</operator><operator>%</operator><literal type="number">2</literal> <operator>+</operator> <literal type="char">'m'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><operator>++</operator><name>count</name></expr>;</expr_stmt></block_content>}</block></for><empty_stmt>;</empty_stmt> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%c\n"</literal></expr></argument>, <argument><expr><name>last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if>

    <if type="elseif">else if<condition>(<expr><name>n</name><operator>%</operator><literal type="number">2</literal> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block>{<block_content>

        <decl_stmt><decl><type><name>char</name></type> <name>count</name> <init>= <expr><literal type="char">'b'</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <for>for<control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>n</name><operator>/</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block>{<block_content><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%c%c"</literal></expr></argument>, <argument><expr><operator>(</operator><name>count</name><operator>)</operator><operator>%</operator><literal type="number">2</literal> <operator>+</operator> <literal type="char">'a'</literal></expr></argument>, <argument><expr><operator>(</operator><name>count</name><operator>)</operator><operator>%</operator><literal type="number">2</literal> <operator>+</operator> <literal type="char">'a'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><operator>++</operator><name>count</name></expr>;</expr_stmt></block_content>}</block></for><empty_stmt>;</empty_stmt> <expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <for>for<control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>n</name><operator>/</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block>{<block_content><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%c%c"</literal></expr></argument>, <argument><expr><operator>(</operator><name>count</name><operator>)</operator><operator>%</operator><literal type="number">2</literal> <operator>+</operator> <literal type="char">'c'</literal></expr></argument>, <argument><expr><operator>(</operator><name>count</name><operator>)</operator><operator>%</operator><literal type="number">2</literal> <operator>+</operator> <literal type="char">'c'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><operator>++</operator><name>count</name></expr>;</expr_stmt></block_content>}</block></for><empty_stmt>;</empty_stmt> <expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for>for<control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>n</name><operator>/</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block>{<block_content><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%c%c"</literal></expr></argument>, <argument><expr><operator>(</operator><name>count</name><operator>)</operator><operator>%</operator><literal type="number">2</literal> <operator>+</operator> <literal type="char">'f'</literal></expr></argument>, <argument><expr><operator>(</operator><name>count</name><operator>)</operator><operator>%</operator><literal type="number">2</literal> <operator>+</operator> <literal type="char">'f'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><operator>++</operator><name>count</name></expr>;</expr_stmt></block_content>}</block></for><empty_stmt>;</empty_stmt> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%c\n"</literal></expr></argument>, <argument><expr><name>last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>n</name><operator>/</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block>{<block_content><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%c%c"</literal></expr></argument>, <argument><expr><operator>(</operator><name>count</name><operator>)</operator><operator>%</operator><literal type="number">2</literal> <operator>+</operator> <literal type="char">'m'</literal></expr></argument>, <argument><expr><operator>(</operator><name>count</name><operator>)</operator><operator>%</operator><literal type="number">2</literal> <operator>+</operator> <literal type="char">'m'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><operator>++</operator><name>count</name></expr>;</expr_stmt></block_content>}</block></for><empty_stmt>;</empty_stmt> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%c\n"</literal></expr></argument>, <argument><expr><name>last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
