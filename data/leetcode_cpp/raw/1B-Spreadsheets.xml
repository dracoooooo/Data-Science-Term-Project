<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="C:\Users\DRACO\PycharmProjects\Data-Science-Term-Project-1\data\leetcode_cpp\raw\1B-Spreadsheets.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdlib&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cctype&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>


<function><type><name>long</name></type> <name>convertToNumeric</name><parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>input</name></decl></parameter>)</parameter_list><block>{<block_content>

    <decl_stmt><decl><type><name>long</name></type> <name>output</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>alphaSize</name><argument_list>(<argument><expr><literal type="number">26</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <call><name><name>input</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block>{<block_content><expr_stmt><expr><name>output</name> <operator>=</operator> <name>alphaSize</name> <operator>*</operator> <name>output</name> <operator>+</operator> <operator>(</operator><name><name>input</name><index>[<expr><name>k</name></expr>]</index></name> <operator>-</operator> <literal type="char">'A'</literal> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content>}</block></for>
    <return>return <expr><name>output</name></expr>;</return>
</block_content>}</block></function>


<function><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>convertToAlpha</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>input</name></decl></parameter>)</parameter_list><block>{<block_content>

    <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>alphaSize</name><argument_list>(<argument><expr><literal type="number">26</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>output</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

    <while>while<condition>(<expr><name>input</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
        <decl_stmt><decl><type><name>char</name></type> <name>letter</name> <init>= <expr><literal type="char">'Z'</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>inputMod</name> <init>= <expr><name>input</name> <operator>%</operator> <name>alphaSize</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if<condition>(<expr><name>inputMod</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content><expr_stmt><expr><name>letter</name> <operator>=</operator> <literal type="char">'A'</literal> <operator>+</operator> <name>inputMod</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content>}</block></if>
        <else>else<block>{<block_content><expr_stmt><expr><name>input</name> <operator>-=</operator> <name>alphaSize</name></expr>;</expr_stmt></block_content>}</block></else></if_stmt>
        <expr_stmt><expr><name>input</name> <operator>=</operator> <name>input</name> <operator>/</operator> <name>alphaSize</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>output</name> <operator>=</operator> <name>letter</name> <operator>+</operator> <name>output</name></expr>;</expr_stmt>
    </block_content>}</block></while>

    <return>return <expr><name>output</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt> <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>n</name><operator>--</operator></expr>)</condition><block>{<block_content>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>line</name></decl>;</decl_stmt> <expr_stmt><expr><call><name>getline</name><argument_list>(<argument><expr><name><name>std</name><operator>::</operator><name>cin</name></name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>bool</name></type> <name>coordinates</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
        <if_stmt><if>if<condition>(<expr><name><name>line</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'R'</literal> <operator>&amp;&amp;</operator> <operator>(</operator><literal type="char">'0'</literal> <operator>&lt;=</operator> <name><name>line</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>line</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;=</operator> <literal type="char">'9'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <literal type="number">1</literal> <operator>&lt;</operator> <call><name><name>line</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><literal type="char">'C'</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>line</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><literal type="char">'C'</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <call><name><name>line</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block>{<block_content><expr_stmt><expr><name>coordinates</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content>}</block></if></if_stmt>

        <if_stmt><if>if<condition>(<expr><name>coordinates</name></expr>)</condition><block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>cPos</name> <init>= <expr><call><name><name>line</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><literal type="char">'C'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>rowString</name> <init>= <expr><call><name><name>line</name><operator>.</operator><name>substr</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>cPos</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  
            <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>colString</name> <init>= <expr><call><name><name>line</name><operator>.</operator><name>substr</name></name><argument_list>(<argument><expr><name>cPos</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  
            <decl_stmt><decl><type><name>long</name></type> <name>col</name> <init>= <expr><call><name>atol</name><argument_list>(<argument><expr><call><name><name>colString</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator>  <call><name>convertToAlpha</name><argument_list>(<argument><expr><name>col</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>rowString</name> <operator>&lt;&lt;</operator> <name><name>std</name><operator>::</operator><name>endl</name></name></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else<block>{<block_content>
            
            <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>rowString</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>colString</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

            <for>for<control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <call><name><name>line</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
                <if_stmt><if>if<condition>(<expr><literal type="char">'0'</literal> <operator>&lt;=</operator> <name><name>line</name><index>[<expr><name>k</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>line</name><index>[<expr><name>k</name></expr>]</index></name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition><block>{<block_content><expr_stmt><expr><name>colString</name> <operator>=</operator> <call><name><name>line</name><operator>.</operator><name>substr</name></name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><break>break;</break></block_content>}</block></if>
                <else>else<block>{<block_content><expr_stmt><expr><name>rowString</name> <operator>+=</operator> <name><name>line</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt></block_content>}</block></else></if_stmt>
            </block_content>}</block></for>
            <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <literal type="string">"R"</literal> <operator>&lt;&lt;</operator> <name>colString</name> <operator>&lt;&lt;</operator> <literal type="string">"C"</literal> <operator>&lt;&lt;</operator>  <call><name>convertToNumeric</name><argument_list>(<argument><expr><name>rowString</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name><name>std</name><operator>::</operator><name>endl</name></name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></while>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
