<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode_cpp\raw\144B-Meeting.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<function><type><name>bool</name></type> <name>isClose</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>x1</name></decl></parameter>,<parameter><decl><type><name>long</name></type> <name>y1</name></decl></parameter>,<parameter><decl><type><name>long</name></type> <name>x2</name></decl></parameter>,<parameter><decl><type><name>long</name></type> <name>y2</name></decl></parameter>,<parameter><decl><type><name>long</name></type> <name>r</name></decl></parameter>)</parameter_list><block>{<block_content>
    <if_stmt><if>if<condition>(<expr><operator>(</operator><name>x2</name> <operator>-</operator> <name>x1</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>x2</name> <operator>-</operator> <name>x1</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>y2</name> <operator>-</operator> <name>y1</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>y2</name> <operator>-</operator> <name>y1</name><operator>)</operator> <operator>&lt;=</operator> <name>r</name> <operator>*</operator> <name>r</name></expr>)</condition><block>{<block_content><return>return <expr><literal type="number">1</literal></expr>;</return></block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{<block_content>

    <decl_stmt><decl><type><name>long</name></type> <name>xa</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>, <decl><type ref="prev"/><name>ya</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>, <decl><type ref="prev"/><name>xb</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>, <decl><type ref="prev"/><name>yb</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%ld %ld %ld %ld"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>xa</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ya</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>yb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>long</name></type> <name>xmin</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>, <decl><type ref="prev"/><name>xmax</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>, <decl><type ref="prev"/><name>ymin</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>, <decl><type ref="prev"/><name>ymax</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <if_stmt><if>if<condition>(<expr><name>xa</name> <operator>&lt;</operator> <name>xb</name></expr>)</condition><block>{<block_content><expr_stmt><expr><name>xmin</name> <operator>=</operator> <name>xa</name></expr>;</expr_stmt> <expr_stmt><expr><name>xmax</name> <operator>=</operator> <name>xb</name></expr>;</expr_stmt></block_content>}</block></if> <else>else<block>{<block_content><expr_stmt><expr><name>xmin</name> <operator>=</operator> <name>xb</name></expr>;</expr_stmt> <expr_stmt><expr><name>xmax</name> <operator>=</operator> <name>xa</name></expr>;</expr_stmt></block_content>}</block></else></if_stmt>
    <if_stmt><if>if<condition>(<expr><name>ya</name> <operator>&lt;</operator> <name>yb</name></expr>)</condition><block>{<block_content><expr_stmt><expr><name>ymin</name> <operator>=</operator> <name>ya</name></expr>;</expr_stmt> <expr_stmt><expr><name>ymax</name> <operator>=</operator> <name>yb</name></expr>;</expr_stmt></block_content>}</block></if> <else>else<block>{<block_content><expr_stmt><expr><name>ymin</name> <operator>=</operator> <name>yb</name></expr>;</expr_stmt> <expr_stmt><expr><name>ymax</name> <operator>=</operator> <name>ya</name></expr>;</expr_stmt></block_content>}</block></else></if_stmt>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>set</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>long</name></expr></argument>,<argument><expr><name>long</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>coldGenerals</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>set</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>long</name></expr></argument>,<argument><expr><name>long</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list><operator>::</operator><name>iterator</name></name></type> <name>myIter</name></decl>;</decl_stmt>

    <for>for<control>(<init><decl><type><name>long</name></type> <name>k</name> <init>= <expr><name>ymin</name></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <name>ymax</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block>{<block_content><expr_stmt><expr><call><name><name>coldGenerals</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>long</name></expr></argument>,<argument><expr><name>long</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>xmin</name></expr></argument>,<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content>}</block></for>
    <for>for<control>(<init><decl><type><name>long</name></type> <name>k</name> <init>= <expr><name>ymin</name></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <name>ymax</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block>{<block_content><expr_stmt><expr><call><name><name>coldGenerals</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>long</name></expr></argument>,<argument><expr><name>long</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>xmax</name></expr></argument>,<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content>}</block></for>
    <for>for<control>(<init><decl><type><name>long</name></type> <name>k</name> <init>= <expr><name>xmin</name></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <name>xmax</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block>{<block_content><expr_stmt><expr><call><name><name>coldGenerals</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>long</name></expr></argument>,<argument><expr><name>long</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>k</name></expr></argument>,<argument><expr><name>ymin</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content>}</block></for>
    <for>for<control>(<init><decl><type><name>long</name></type> <name>k</name> <init>= <expr><name>xmin</name></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <name>xmax</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block>{<block_content><expr_stmt><expr><call><name><name>coldGenerals</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>long</name></expr></argument>,<argument><expr><name>long</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>k</name></expr></argument>,<argument><expr><name>ymax</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content>}</block></for>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>long</name></expr></argument>,<argument><expr><name>long</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>radiators</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>long</name></expr></argument>&gt;</argument_list></name></type> <name>radii</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>long</name></type> <name>numRadiators</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%ld"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>numRadiators</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for<control>(<init><decl><type><name>long</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>numRadiators</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <decl_stmt><decl><type><name>long</name></type> <name>xtemp</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>, <decl><type ref="prev"/><name>ytemp</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>, <decl><type ref="prev"/><name>tempRadius</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%ld %ld %ld"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>xtemp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ytemp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tempRadius</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
        <expr_stmt><expr><call><name><name>radiators</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>long</name></expr></argument>,<argument><expr><name>long</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>xtemp</name></expr></argument>,<argument><expr><name>ytemp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>radii</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>tempRadius</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <for>for<control>(<init><decl><type><name>long</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>numRadiators</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <expr_stmt><expr><name>myIter</name> <operator>=</operator> <call><name><name>coldGenerals</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
        <while>while<condition>(<expr><name>myIter</name> <operator>!=</operator> <call><name><name>coldGenerals</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><block>{<block_content>
            <if_stmt><if>if<condition>(<expr><call><name>isClose</name><argument_list>(<argument><expr><name><name>myIter</name><operator>-&gt;</operator><name>first</name></name></expr></argument>, <argument><expr><name><name>myIter</name><operator>-&gt;</operator><name>second</name></name></expr></argument>,<argument><expr><name><name>radiators</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>first</name></expr></argument>,<argument><expr><name><name>radiators</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>second</name></expr></argument>,<argument><expr><name><name>radii</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content><expr_stmt><expr><call><name><name>coldGenerals</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>myIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>myIter</name> <operator>=</operator> <call><name><name>coldGenerals</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content>}</block></if>
            <else>else<block>{<block_content><expr_stmt><expr><name>myIter</name><operator>++</operator></expr>;</expr_stmt></block_content>}</block></else></if_stmt>
        </block_content>}</block></while>
    </block_content>}</block></for>


    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%ld\n"</literal></expr></argument>, <argument><expr><call><name><name>coldGenerals</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
