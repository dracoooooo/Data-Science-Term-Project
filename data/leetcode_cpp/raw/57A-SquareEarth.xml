<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode_cpp\raw\57A-SquareEarth.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{<block_content>

    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>x1</name></decl>, <decl><type ref="prev"/><name>y1</name></decl>, <decl><type ref="prev"/><name>x2</name></decl>, <decl><type ref="prev"/><name>y2</name></decl>;</decl_stmt> <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d %d %d %d %d\n"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>d1</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <if_stmt><if>if<condition>(<expr><literal type="number">0</literal> <operator>&lt;=</operator> <name>x1</name> <operator>&amp;&amp;</operator> <name>x1</name> <operator>&lt;=</operator> <name>n</name> <operator>&amp;&amp;</operator> <name>y1</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content><expr_stmt><expr><name>d1</name> <operator>=</operator> <name>x1</name></expr>;</expr_stmt></block_content>}</block></if>
    <if type="elseif">else if<condition>(<expr><name>x1</name> <operator>==</operator> <name>n</name> <operator>&amp;&amp;</operator> <literal type="number">0</literal> <operator>&lt;=</operator> <name>y1</name> <operator>&amp;&amp;</operator> <name>y1</name> <operator>&lt;=</operator> <name>n</name></expr>)</condition><block>{<block_content><expr_stmt><expr><name>d1</name> <operator>=</operator> <name>n</name> <operator>+</operator> <name>y1</name></expr>;</expr_stmt></block_content>}</block></if>
    <if type="elseif">else if<condition>(<expr><literal type="number">0</literal> <operator>&lt;=</operator> <name>x1</name> <operator>&amp;&amp;</operator> <name>x1</name> <operator>&lt;=</operator> <name>n</name> <operator>&amp;&amp;</operator> <name>y1</name> <operator>==</operator> <name>n</name></expr>)</condition><block>{<block_content><expr_stmt><expr><name>d1</name> <operator>=</operator> <literal type="number">3</literal> <operator>*</operator> <name>n</name> <operator>-</operator> <name>x1</name></expr>;</expr_stmt></block_content>}</block></if>
    <if type="elseif">else if<condition>(<expr><name>x1</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <literal type="number">0</literal> <operator>&lt;=</operator> <name>y1</name> <operator>&amp;&amp;</operator> <name>y1</name> <operator>&lt;=</operator> <name>n</name></expr>)</condition><block>{<block_content><expr_stmt><expr><name>d1</name> <operator>=</operator> <literal type="number">4</literal> <operator>*</operator> <name>n</name> <operator>-</operator> <name>y1</name></expr>;</expr_stmt></block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>d2</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <if_stmt><if>if<condition>(<expr><literal type="number">0</literal> <operator>&lt;=</operator> <name>x2</name> <operator>&amp;&amp;</operator> <name>x2</name> <operator>&lt;=</operator> <name>n</name> <operator>&amp;&amp;</operator> <name>y2</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content><expr_stmt><expr><name>d2</name> <operator>=</operator> <name>x2</name></expr>;</expr_stmt></block_content>}</block></if>
    <if type="elseif">else if<condition>(<expr><name>x2</name> <operator>==</operator> <name>n</name> <operator>&amp;&amp;</operator> <literal type="number">0</literal> <operator>&lt;=</operator> <name>y2</name> <operator>&amp;&amp;</operator> <name>y2</name> <operator>&lt;=</operator> <name>n</name></expr>)</condition><block>{<block_content><expr_stmt><expr><name>d2</name> <operator>=</operator> <name>n</name> <operator>+</operator> <name>y2</name></expr>;</expr_stmt></block_content>}</block></if>
    <if type="elseif">else if<condition>(<expr><literal type="number">0</literal> <operator>&lt;=</operator> <name>x2</name> <operator>&amp;&amp;</operator> <name>x2</name> <operator>&lt;=</operator> <name>n</name> <operator>&amp;&amp;</operator> <name>y2</name> <operator>==</operator> <name>n</name></expr>)</condition><block>{<block_content><expr_stmt><expr><name>d2</name> <operator>=</operator> <literal type="number">3</literal> <operator>*</operator> <name>n</name> <operator>-</operator> <name>x2</name></expr>;</expr_stmt></block_content>}</block></if>
    <if type="elseif">else if<condition>(<expr><name>x2</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <literal type="number">0</literal> <operator>&lt;=</operator> <name>y2</name> <operator>&amp;&amp;</operator> <name>y2</name> <operator>&lt;=</operator> <name>n</name></expr>)</condition><block>{<block_content><expr_stmt><expr><name>d2</name> <operator>=</operator> <literal type="number">4</literal> <operator>*</operator> <name>n</name> <operator>-</operator> <name>y2</name></expr>;</expr_stmt></block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>result1</name> <init>= <expr><operator>(</operator><literal type="number">8</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <name>d1</name> <operator>-</operator> <name>d2</name><operator>)</operator> <operator>%</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>n</name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>result2</name> <init>= <expr><operator>(</operator><literal type="number">8</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <name>d2</name> <operator>-</operator> <name>d1</name><operator>)</operator> <operator>%</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>n</name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>result1</name> <operator>&lt;</operator> <name>result2</name><operator>)</operator></expr> ?</condition><then> <expr><name>result1</name></expr> </then><else>: <expr><name>result2</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
