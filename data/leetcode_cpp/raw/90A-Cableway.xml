<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="C:\Users\DRACO\PycharmProjects\Data-Science-Term-Project-1\data\leetcode_cpp\raw\90A-Cableway.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{<block_content>

    <decl_stmt><decl><type><name>int</name></type> <name>r</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>, <decl><type ref="prev"/><name>g</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>, <decl><type ref="prev"/><name>b</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d %d %d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>g</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><name>r</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt> <expr_stmt><expr><name>g</name> <operator>=</operator> <operator>(</operator><name>g</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt> <expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><name>b</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>output</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <if_stmt><if>if<condition>(<expr><name>b</name> <operator>&gt;=</operator> <name>g</name> <operator>&amp;&amp;</operator> <name>b</name> <operator>&gt;=</operator> <name>r</name></expr>)</condition><block>{<block_content><expr_stmt><expr><name>output</name> <operator>=</operator> <literal type="number">30</literal> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <name>b</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content>}</block></if>
    <if type="elseif">else if<condition>(<expr><name>g</name> <operator>&gt;=</operator> <name>r</name></expr>)</condition><block>{<block_content><expr_stmt><expr><name>output</name> <operator>=</operator> <literal type="number">30</literal> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <name>g</name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content>}</block></if>
    <else>else<block>{<block_content><expr_stmt><expr><name>output</name> <operator>=</operator> <literal type="number">30</literal> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <name>r</name> <operator>-</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content>}</block></else></if_stmt>


    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
