<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode_cpp\raw\116B-LittlePigsAndWolves.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{<block_content>

    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt> <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d %d\n"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name></type> <name>array</name></decl>;</decl_stmt> <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>line</name></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block>{<block_content><expr_stmt><expr><call><name>getline</name><argument_list>(<argument><expr><name><name>std</name><operator>::</operator><name>cin</name></name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>array</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content>}</block></for>

    <decl_stmt><decl><type><name>int</name></type> <name>eligiblePigs</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>, <decl><type ref="prev"/><name>eligibleWolves</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name>currentCell</name></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>row</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>row</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>row</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>col</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>col</name> <operator>&lt;</operator> <name>m</name></expr>;</condition> <incr><expr><name>col</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
            <expr_stmt><expr><name>currentCell</name> <operator>=</operator> <name><name>array</name><index>[<expr><name>row</name></expr>]</index><index>[<expr><name>col</name></expr>]</index></name></expr>;</expr_stmt>
            <if_stmt><if>if<condition>(<expr><name>currentCell</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition><block>{<block_content><continue>continue;</continue></block_content>}</block></if></if_stmt>
            <if_stmt><if>if<condition>(<expr><name>currentCell</name> <operator>==</operator> <literal type="char">'P'</literal></expr>)</condition><block>{<block_content><if_stmt><if>if<condition>(<expr><operator>(</operator><name>row</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>  <name><name>array</name><index>[<expr><name>row</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>col</name></expr>]</index></name> <operator>==</operator> <literal type="char">'W'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>row</name> <operator>&lt;</operator> <name>n</name><operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator>  <name><name>array</name><index>[<expr><name>row</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>col</name></expr>]</index></name> <operator>==</operator> <literal type="char">'W'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>col</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>  <name><name>array</name><index>[<expr><name>row</name></expr>]</index><index>[<expr><name>col</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'W'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>col</name> <operator>&lt;</operator> <name>m</name> <operator>-</operator> <literal type="number">1</literal>  <operator>&amp;&amp;</operator>  <name><name>array</name><index>[<expr><name>row</name></expr>]</index><index>[<expr><name>col</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'W'</literal><operator>)</operator></expr>)</condition><block>{<block_content><expr_stmt><expr><operator>++</operator><name>eligiblePigs</name></expr>;</expr_stmt></block_content>}</block></if></if_stmt></block_content>}</block></if></if_stmt>
            <if_stmt><if>if<condition>(<expr><name>currentCell</name> <operator>==</operator> <literal type="char">'W'</literal></expr>)</condition><block>{<block_content><if_stmt><if>if<condition>(<expr><operator>(</operator><name>row</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>  <name><name>array</name><index>[<expr><name>row</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>col</name></expr>]</index></name> <operator>==</operator> <literal type="char">'P'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>row</name> <operator>&lt;</operator> <name>n</name><operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator>  <name><name>array</name><index>[<expr><name>row</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>col</name></expr>]</index></name> <operator>==</operator> <literal type="char">'P'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>col</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>  <name><name>array</name><index>[<expr><name>row</name></expr>]</index><index>[<expr><name>col</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'P'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>col</name> <operator>&lt;</operator> <name>m</name> <operator>-</operator> <literal type="number">1</literal>  <operator>&amp;&amp;</operator>  <name><name>array</name><index>[<expr><name>row</name></expr>]</index><index>[<expr><name>col</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'P'</literal><operator>)</operator></expr>)</condition><block>{<block_content><expr_stmt><expr><operator>++</operator><name>eligibleWolves</name></expr>;</expr_stmt></block_content>}</block></if></if_stmt></block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></for>
    <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <call><name><name>std</name><operator>::</operator><name>min</name></name><argument_list>(<argument><expr><name>eligiblePigs</name></expr></argument>, <argument><expr><name>eligibleWolves</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name><name>std</name><operator>::</operator><name>endl</name></name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
