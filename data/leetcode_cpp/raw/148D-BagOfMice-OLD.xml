<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="C:\Users\DRACO\PycharmProjects\Data-Science-Term-Project-1\data\leetcode_cpp\raw\148D-BagOfMice-OLD.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>map</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name>double</name></expr></argument>&gt;</argument_list></name></type> <name>computed</name></decl>;</decl_stmt>


<function><type><name>double</name></type> <name>getProb</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>princess</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>white</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>black</name></decl></parameter>)</parameter_list><block>{<block_content>

    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"*** %s %d %d\n"</literal></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>princess</name></expr> ?</condition><then> <expr><literal type="string">"PRINCESS"</literal></expr> </then><else>: <expr><literal type="string">"DRAGON"</literal></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><name>white</name></expr></argument>, <argument><expr><name>black</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>(<expr><name>black</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content><expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"=== No blacks"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><literal type="number">1.0</literal></expr>;</return></block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>(<expr><name>white</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content><expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"=== No whites"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><literal type="number">0.0</literal></expr>;</return></block_content>}</block></if></if_stmt>
    
    <decl_stmt><decl><type><name>double</name></type> <name>winProb</name> <init>= <expr><literal type="number">1.0</literal> <operator>*</operator> <name>white</name> <operator>/</operator> <operator>(</operator><name>white</name> <operator>+</operator> <name>black</name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>contProb</name> <init>= <expr><literal type="number">1.0</literal> <operator>-</operator> <name>winProb</name></expr></init></decl>;</decl_stmt>
    
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Win Prob: %d/%d   Cont prob: %d/%d \n"</literal></expr></argument>, <argument><expr><name>white</name></expr></argument>, <argument><expr><operator>(</operator><name>white</name> <operator>+</operator> <name>black</name><operator>)</operator></expr></argument>, <argument><expr><name>black</name></expr></argument>, <argument><expr><operator>(</operator><name>white</name> <operator>+</operator> <name>black</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>(<expr><name>princess</name></expr>)</condition><block>{<block_content>
        <decl_stmt><decl><type><name>double</name></type> <name>ans</name> <init>= <expr><name>winProb</name> <operator>+</operator> <name>contProb</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>-</operator> <call><name>getProb</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name>white</name></expr></argument>, <argument><expr><name>black</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"=== %s %d %d Output: %lf\n"</literal></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>princess</name></expr> ?</condition><then> <expr><literal type="string">"PRINCESS"</literal></expr> </then><else>: <expr><literal type="string">"DRAGON"</literal></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><name>white</name></expr></argument>, <argument><expr><name>black</name></expr></argument>, <argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>ans</name></expr>;</return>
    </block_content>}</block></if>
    <else>else<block>{<block_content>
        <decl_stmt><decl><type><name>double</name></type> <name>escapeWhite</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>black</name> <operator>&gt;=</operator> <literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1.0</literal> <operator>*</operator> <name>white</name> <operator>/</operator> <operator>(</operator><name>white</name> <operator>+</operator> <name>black</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr> </then><else>: <expr><literal type="number">1.0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>escapeBlack</name> <init>= <expr><literal type="number">1.0</literal> <operator>-</operator> <name>escapeWhite</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>ans</name> <init>= <expr><name>winProb</name> <operator>+</operator> <name>contProb</name> <operator>*</operator> <operator>(</operator><name>escapeWhite</name> <operator>*</operator> <operator>(</operator><literal type="number">1.0</literal> <operator>-</operator> <call><name>getProb</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>white</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>black</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>+</operator> <name>escapeBlack</name> <operator>*</operator> <operator>(</operator><literal type="number">1.0</literal> <operator>-</operator> <call><name>getProb</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>white</name></expr></argument>, <argument><expr><name>black</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"=== %s w:%d b: %d escW: %lf escB: %lf Output: %lf\n"</literal></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>princess</name></expr> ?</condition><then> <expr><literal type="string">"PRINCESS"</literal></expr> </then><else>: <expr><literal type="string">"DRAGON"</literal></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><name>white</name></expr></argument>, <argument><expr><name>black</name></expr></argument>, <argument><expr><name>escapeWhite</name></expr></argument>, <argument><expr><name>escapeBlack</name></expr></argument>, <argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>ans</name></expr>;</return>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{<block_content>

    <decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt> <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d %d\n"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>w</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%.12lf\n"</literal></expr></argument>, <argument><expr><call><name>getProb</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
