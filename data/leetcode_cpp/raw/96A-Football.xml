<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode_cpp\raw\96A-Football.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dangerous</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>string</name></type> <name>line</name></decl>;</decl_stmt> <expr_stmt><expr><call><name>getline</name><argument_list>(<argument><expr><name>cin</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>state</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>runningSum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> <decl_stmt><decl><type><name>string</name></type> <name>output</name> <init>= <expr><literal type="string">"NO"</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <call><name><name>line</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <if_stmt><if>if<condition>(<expr><name><name>line</name><index>[<expr><name>k</name></expr>]</index></name> <operator>!=</operator> <name>state</name></expr>)</condition><block>{<block_content><expr_stmt><expr><name>state</name> <operator>=</operator> <name><name>line</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>runningSum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content>}</block></if></if_stmt>
        <expr_stmt><expr><operator>++</operator><name>runningSum</name></expr>;</expr_stmt> 
        <if_stmt><if>if<condition>(<expr><name>runningSum</name> <operator>&gt;=</operator> <name>dangerous</name></expr>)</condition><block>{<block_content><expr_stmt><expr><name>output</name> <operator>=</operator> <literal type="string">"YES"</literal></expr>;</expr_stmt> <break>break;</break></block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>output</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
