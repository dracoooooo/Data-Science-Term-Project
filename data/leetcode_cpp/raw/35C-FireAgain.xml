<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode_cpp\raw\35C-FireAgain.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>mabs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{<block_content><return>return <expr><ternary><condition><expr><operator>(</operator><name>x</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>x</name></expr> </then><else>: <expr><operator>(</operator><operator>-</operator><name>x</name><operator>)</operator></expr></else></ternary></expr>;</return></block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{<block_content>

    <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"input.txt"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
    <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"output.txt"</literal></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt> <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d %d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt> <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>vsr</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></decl>, <decl><type ref="prev"/><name>vsc</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>p</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>k</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block>{<block_content><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d %d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vsr</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>vsc</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content>}</block></for>

    <decl_stmt><decl><type><name>int</name></type> <name>rr</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></decl>, <decl><type ref="prev"/><name>cc</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></decl>, <decl><type ref="prev"/><name>maxMin</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>row</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>row</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>row</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>col</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>col</name> <operator>&lt;=</operator> <name>m</name></expr>;</condition> <incr><expr><name>col</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>minDist</name> <init>= <expr><literal type="number">2e9</literal></expr></init></decl>;</decl_stmt>
            <for>for<control>(<init><decl><type><name>int</name></type> <name>p</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>k</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>dist</name> <init>= <expr><call><name>mabs</name><argument_list>(<argument><expr><name>row</name> <operator>-</operator> <name><name>vsr</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>mabs</name><argument_list>(<argument><expr><name>col</name> <operator>-</operator> <name><name>vsc</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>minDist</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>dist</name> <operator>&lt;</operator> <name>minDist</name><operator>)</operator></expr> ?</condition><then> <expr><name>dist</name></expr> </then><else>: <expr><name>minDist</name></expr></else></ternary></expr>;</expr_stmt>
            </block_content>}</block></for>

            <if_stmt><if>if<condition>(<expr><name>minDist</name> <operator>&gt;</operator> <name>maxMin</name></expr>)</condition><block>{<block_content><expr_stmt><expr><name>maxMin</name> <operator>=</operator> <name>minDist</name></expr>;</expr_stmt> <expr_stmt><expr><name>rr</name> <operator>=</operator> <name>row</name></expr>;</expr_stmt> <expr_stmt><expr><name>cc</name> <operator>=</operator> <name>col</name></expr>;</expr_stmt></block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d\n"</literal></expr></argument>, <argument><expr><name>rr</name></expr></argument>, <argument><expr><name>cc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
