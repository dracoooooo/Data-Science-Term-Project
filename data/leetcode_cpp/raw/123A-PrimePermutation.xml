<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode_cpp\raw\123A-PrimePermutation.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>

<function><type><name>bool</name></type> <name>isPrime</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter>)</parameter_list><block>{<block_content><return>return <expr><operator>(</operator><name>a</name> <operator>&lt;=</operator> <name>p</name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name>a</name> <operator>%</operator> <name>p</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>isPrime</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>;</return></block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{<block_content>

    <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">256</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name><name>freq</name><index>[<expr><name>N</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>s</name></decl>;</decl_stmt> <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cin</name></name><operator>&gt;&gt;</operator><name>s</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>len</name><init>=<expr><call><name><name>s</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>p</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block>{<block_content><expr_stmt><expr><operator>++</operator><name><name>freq</name><index>[<expr><name><name>s</name><index>[<expr><name>p</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block_content>}</block></for>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>t</name><argument_list>(<argument><expr><name>len</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>m</name><init>=<expr><call><name><name>std</name><operator>::</operator><name>max_element</name></name><argument_list>(<argument><expr><name>freq</name></expr></argument>, <argument><expr><name>freq</name><operator>+</operator><name>N</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <for>for<control>(<init><decl><type><name>int</name></type> <name>p</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block>{<block_content><if_stmt><if>if<condition>(<expr><operator>(</operator><name>p</name> <operator>&lt;</operator> <name>len</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>!</operator><call><name>isPrime</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block>{<block_content><expr_stmt><expr><name><name>t</name><index>[<expr><name>p</name></expr>]</index></name><operator>=</operator><name>m</name><operator>-</operator><name>freq</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>m</name><operator>)</operator><operator>--</operator></expr>;</expr_stmt></block_content>}</block></if></if_stmt></block_content>}</block></for>

    <if_stmt><if>if<condition>(<expr><operator>*</operator><name>m</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><block>{<block_content><expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name><operator>&lt;&lt;</operator> <literal type="string">"NO"</literal> <operator>&lt;&lt;</operator> <name><name>std</name><operator>::</operator><name>endl</name></name></expr>;</expr_stmt></block_content>}</block></if>
    <else>else<block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>q</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>p</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block>{<block_content><if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>t</name><index>[<expr><name>p</name></expr>]</index></name></expr>)</condition> <block>{<block_content><while>while<condition>(<expr><operator>!</operator><name><name>freq</name><index>[<expr><name>q</name></expr>]</index></name></expr>)</condition><block>{<block_content><expr_stmt><expr><name>q</name><operator>++</operator></expr>;</expr_stmt></block_content>}</block></while><empty_stmt>;</empty_stmt> <expr_stmt><expr><name><name>freq</name><index>[<expr><name><name>t</name><index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <name>q</name></expr>]</index></name><operator>--</operator></expr>;</expr_stmt></block_content>}</block></if></if_stmt></block_content>}</block></for>
        <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name><operator>&lt;&lt;</operator><literal type="string">"YES"</literal> <operator>&lt;&lt;</operator> <name><name>std</name><operator>::</operator><name>endl</name></name> <operator>&lt;&lt;</operator> <name>t</name> <operator>&lt;&lt;</operator> <name><name>std</name><operator>::</operator><name>endl</name></name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
