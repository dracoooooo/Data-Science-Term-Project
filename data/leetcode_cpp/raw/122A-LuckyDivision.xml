<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="C:\Users\DRACO\PycharmProjects\Data-Science-Term-Project-1\data\leetcode_cpp\raw\122A-LuckyDivision.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>number</name></decl>;</decl_stmt> <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>(<expr><name>number</name> <operator>%</operator> <literal type="number">4</literal> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>number</name> <operator>%</operator> <literal type="number">7</literal> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>number</name> <operator>%</operator> <literal type="number">44</literal> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator><name>number</name> <operator>%</operator> <literal type="number">47</literal> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>number</name> <operator>%</operator> <literal type="number">74</literal> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>number</name> <operator>%</operator> <literal type="number">77</literal> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>number</name> <operator>%</operator> <literal type="number">444</literal> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>number</name> <operator>%</operator> <literal type="number">447</literal> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>number</name> <operator>%</operator> <literal type="number">474</literal> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>number</name> <operator>%</operator> <literal type="number">477</literal> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>number</name> <operator>%</operator> <literal type="number">744</literal> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>number</name> <operator>%</operator> <literal type="number">747</literal> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator><name>number</name> <operator>%</operator> <literal type="number">774</literal> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>number</name> <operator>%</operator> <literal type="number">777</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"YES\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content>}</block></if>
    <else>else<block>{<block_content><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"NO\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content>}</block></else></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
