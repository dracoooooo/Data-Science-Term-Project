<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="C:\Users\DRACO\PycharmProjects\Data-Science-Term-Project-1\data\leetcode_cpp\raw\99B-HelpChefGerasim.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{<block_content>

    <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>long</name></type> <name>n</name></decl>;</decl_stmt> <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cin</name></name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>long</name></expr></argument>&gt;</argument_list></name></type> <name>a</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt> 
    <decl_stmt><decl><type><name>long</name></type> <name>total</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>long</name></type> <name>p</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cin</name></name> <operator>&gt;&gt;</operator> <name><name>a</name><index>[<expr><name>p</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>total</name> <operator>+=</operator> <name><name>a</name><index>[<expr><name>p</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <decl_stmt><decl><type><name>int</name></type> <name>res</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>, <decl><type ref="prev"/><name>diff</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>, <decl><type ref="prev"/><name>from</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>, <decl><type ref="prev"/><name>to</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <if_stmt><if>if<condition>(<expr><name>total</name> <operator>%</operator> <name>n</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content><expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content>}</block></if>
    <else>else<block>{<block_content>
        <decl_stmt><decl><type><name>long</name></type> <name>vol</name> <init>= <expr><name>total</name> <operator>/</operator> <name>n</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>good</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>long</name></type> <name>p</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
            <if_stmt><if>if<condition>(<expr><name><name>a</name><index>[<expr><name>p</name></expr>]</index></name> <operator>&gt;</operator> <name>vol</name></expr>)</condition><block>{<block_content><expr_stmt><expr><name>to</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt></block_content>}</block></if>
            <if type="elseif">else if<condition>(<expr><name><name>a</name><index>[<expr><name>p</name></expr>]</index></name> <operator>&lt;</operator> <name>vol</name></expr>)</condition><block>{<block_content><expr_stmt><expr><name>from</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt></block_content>}</block></if>
            <else>else<block>{<block_content><expr_stmt><expr><operator>++</operator><name>good</name></expr>;</expr_stmt></block_content>}</block></else></if_stmt>
        </block_content>}</block></for>

        <if_stmt><if>if<condition>(<expr><name>good</name> <operator>==</operator> <name>n</name></expr>)</condition><block>{<block_content><expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content>}</block></if>
        <if type="elseif">else if<condition>(<expr><name>good</name> <operator>!=</operator> <name>n</name> <operator>-</operator> <literal type="number">2</literal></expr>)</condition><block>{<block_content><expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content>}</block></if>
        <else>else<block>{<block_content><expr_stmt><expr><name>diff</name> <operator>=</operator> <name><name>a</name><index>[<expr><name>to</name></expr>]</index></name> <operator>-</operator> <name>vol</name></expr>;</expr_stmt> <expr_stmt><expr><operator>++</operator><name>from</name></expr>;</expr_stmt> <expr_stmt><expr><operator>++</operator><name>to</name></expr>;</expr_stmt> <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if<condition>(<expr><name>res</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content><expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <literal type="string">"Unrecoverable configuration."</literal> <operator>&lt;&lt;</operator> <name><name>std</name><operator>::</operator><name>endl</name></name></expr>;</expr_stmt></block_content>}</block></if>
    <if type="elseif">else if<condition>(<expr><name>res</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block>{<block_content><expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <literal type="string">"Exemplary pages."</literal> <operator>&lt;&lt;</operator> <name><name>std</name><operator>::</operator><name>endl</name></name></expr>;</expr_stmt></block_content>}</block></if>
    <if type="elseif">else if<condition>(<expr><name>res</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block>{<block_content><expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <name>diff</name> <operator>&lt;&lt;</operator> <literal type="string">" ml. from cup #"</literal> <operator>&lt;&lt;</operator> <name>from</name> <operator>&lt;&lt;</operator> <literal type="string">" to cup #"</literal> <operator>&lt;&lt;</operator> <name>to</name> <operator>&lt;&lt;</operator> <literal type="string">"."</literal> <operator>&lt;&lt;</operator> <name><name>std</name><operator>::</operator><name>endl</name></name></expr>;</expr_stmt></block_content>}</block></if></if_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
