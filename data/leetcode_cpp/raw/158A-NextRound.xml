<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode_cpp\raw\158A-NextRound.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>scores</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[<expr><name>n</name></expr>]</index></name></expr></init></decl>;</decl_stmt> 
    <for>for<control>(<init><decl><type><name>int</name></type> <name>u</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>u</name></expr></incr>)</control><block>{<block_content><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>scores</name><index>[<expr><name>u</name></expr>]</index></name></expr>;</expr_stmt></block_content>}</block></for>
    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>scores</name></expr></argument>, <argument><expr><name>scores</name> <operator>+</operator> <name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>min</name> <init>= <expr><name><name>scores</name><index>[<expr><name>n</name> <operator>-</operator> <name>k</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>promoted</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name><name>promoted</name> <argument_list type="generic">&lt; <argument><expr><name>n</name> <operator>&amp;&amp;</operator> <name><name>scores</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal> <operator>-</operator> <name>promoted</name></expr>]</index></name></expr></argument> &gt;</argument_list></name> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>scores</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal> <operator>-</operator> <name>promoted</name></expr>]</index></name> <operator>&gt;=</operator> <name>min</name></expr>)</condition><block>{<block_content><expr_stmt><expr><operator>++</operator><name>promoted</name></expr>;</expr_stmt></block_content>}</block></while>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>promoted</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
