<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode_cpp\raw\144C-AnagramSearch.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{<block_content>

    <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">26</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>source</name></decl>;</decl_stmt> <expr_stmt><expr><call><name>getline</name><argument_list>(<argument><expr><name><name>std</name><operator>::</operator><name>cin</name></name></expr></argument>, <argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>target</name></decl>;</decl_stmt> <expr_stmt><expr><call><name>getline</name><argument_list>(<argument><expr><name><name>std</name><operator>::</operator><name>cin</name></name></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>long</name></type> <name><name>targetCount</name><index>[<expr><name>N</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>p</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <call><name><name>target</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block>{<block_content><expr_stmt><expr><operator>++</operator><name><name>targetCount</name><index>[<expr><name><name>target</name><index>[<expr><name>p</name></expr>]</index></name> <operator>-</operator> <literal type="char">'a'</literal></expr>]</index></name></expr>;</expr_stmt></block_content>}</block></for>

    <decl_stmt><decl><type><name>long</name></type> <name><name>runningCount</name><index>[<expr><name>N</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>p</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <call><name><name>target</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <if_stmt><if>if<condition>(<expr><name><name>source</name><index>[<expr><name>p</name></expr>]</index></name> <operator>==</operator> <literal type="char">'?'</literal></expr>)</condition><block>{<block_content><continue>continue;</continue></block_content>}</block></if></if_stmt>
        <expr_stmt><expr><operator>++</operator><name><name>runningCount</name><index>[<expr><name><name>source</name><index>[<expr><name>p</name></expr>]</index></name> <operator>-</operator> <literal type="char">'a'</literal></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></for>
        
    <decl_stmt><decl><type><name>long</name></type> <name>total</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>possible</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

    <for>for<control>(<init><decl><type><name>int</name></type> <name>q</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>q</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>q</name><operator>++</operator></expr></incr>)</control><block>{<block_content><if_stmt><if>if<condition>(<expr><name><name>runningCount</name><index>[<expr><name>q</name></expr>]</index></name> <operator>&gt;</operator> <name><name>targetCount</name><index>[<expr><name>q</name></expr>]</index></name></expr>)</condition><block>{<block_content><expr_stmt><expr><name>possible</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <break>break;</break></block_content>}</block></if></if_stmt></block_content>}</block></for>
    <if_stmt><if>if<condition>(<expr><name>possible</name></expr>)</condition><block>{<block_content><expr_stmt><expr><operator>++</operator><name>total</name></expr>;</expr_stmt></block_content>}</block></if></if_stmt>
    <comment type="line">//for(int q = 0; q &lt; 3; q++){std::cout &lt;&lt; runningCount[q] &lt;&lt; "\t";}; std::cout &lt;&lt; std::endl;</comment>

    <for>for<control>(<init><decl><type><name>long</name></type> <name>p</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <call><name><name>source</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <call><name><name>target</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <if_stmt><if>if<condition>(<expr><name><name>source</name><index>[<expr><name>p</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'?'</literal></expr>)</condition><block>{<block_content><expr_stmt><expr><operator>--</operator><name><name>runningCount</name><index>[<expr><name><name>source</name><index>[<expr><name>p</name></expr>]</index></name> <operator>-</operator> <literal type="char">'a'</literal></expr>]</index></name></expr>;</expr_stmt></block_content>}</block></if></if_stmt>
        <if_stmt><if>if<condition>(<expr><name><name>source</name><index>[<expr><name>p</name> <operator>+</operator> <call><name><name>target</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name> <operator>!=</operator> <literal type="char">'?'</literal></expr>)</condition><block>{<block_content><expr_stmt><expr><operator>++</operator><name><name>runningCount</name><index>[<expr><name><name>source</name><index>[<expr><name>p</name> <operator>+</operator> <call><name><name>target</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name> <operator>-</operator> <literal type="char">'a'</literal></expr>]</index></name></expr>;</expr_stmt></block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>possible</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <comment type="line">//for(int q = 0; q &lt; 3; q++){std::cout &lt;&lt; runningCount[q] &lt;&lt; "\t";}; std::cout &lt;&lt; std::endl;</comment>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>q</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>q</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>q</name><operator>++</operator></expr></incr>)</control><block>{<block_content><if_stmt><if>if<condition>(<expr><name><name>runningCount</name><index>[<expr><name>q</name></expr>]</index></name> <operator>&gt;</operator> <name><name>targetCount</name><index>[<expr><name>q</name></expr>]</index></name></expr>)</condition><block>{<block_content><expr_stmt><expr><name>possible</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <break>break;</break></block_content>}</block></if></if_stmt></block_content>}</block></for>
        <if_stmt><if>if<condition>(<expr><name>possible</name></expr>)</condition><block>{<block_content><expr_stmt><expr><operator>++</operator><name>total</name></expr>;</expr_stmt></block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%ld\n"</literal></expr></argument>, <argument><expr><name>total</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
