<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="C:\Users\DRACO\PycharmProjects\Data-Science-Term-Project-1\data\leetcode_cpp\raw\158C-CdAndPwdCommands.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<class>class <name>directory</name><block>{<private type="default">
</private><private>private:
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>string</name></expr></argument>&gt;</argument_list></name></type> <name>path</name></decl>;</decl_stmt>
</private><public>public:
    <function><type><name>void</name></type> <name>pwd</name><parameter_list>()</parameter_list><block>{<block_content>
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"/"</literal></expr>;</expr_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <call><name><name>path</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block>{<block_content><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>path</name><index>[<expr><name>k</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="string">"/"</literal></expr>;</expr_stmt></block_content>}</block></for>
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><name>void</name></type> <name>pop</name><parameter_list>()</parameter_list><block>{<block_content><expr_stmt><expr><call><name><name>path</name><operator>.</operator><name>pop_back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content>}</block></function>
    <function><type><name>void</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name>string</name></type> <name>newDir</name></decl></parameter>)</parameter_list><block>{<block_content>
        <if_stmt><if>if<condition>(<expr><name>newDir</name> <operator>==</operator> <literal type="string">".."</literal></expr>)</condition><block>{<block_content><expr_stmt><expr><call><name><name>path</name><operator>.</operator><name>pop_back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content>}</block></if>
        <else>else<block>{<block_content><expr_stmt><expr><call><name><name>path</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>newDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content>}</block></else></if_stmt>
    </block_content>}</block></function>
    <function><type><name>void</name></type> <name>root</name><parameter_list>()</parameter_list><block>{<block_content><expr_stmt><expr><call><name><name>path</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content>}</block></function>
</public>}</block>;</class>


<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>numCommands</name></decl>;</decl_stmt> <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>numCommands</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>directory</name></type> <name>dir</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>string</name></type> <name>command</name></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>numCommands</name><operator>--</operator></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><call><name>getline</name><argument_list>(<argument><expr><name>cin</name></expr></argument>, <argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>(<expr><name>command</name> <operator>==</operator> <literal type="string">"pwd"</literal></expr>)</condition><block>{<block_content><expr_stmt><expr><call><name><name>dir</name><operator>.</operator><name>pwd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name><name>command</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'c'</literal> <operator>&amp;&amp;</operator> <name><name>command</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'d'</literal></expr>)</condition><block>{<block_content>
            <decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt> <decl_stmt><decl><type><name>string</name></type> <name>newFolder</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if<condition>(<expr><name><name>command</name><index>[<expr><name>index</name></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block>{<block_content><expr_stmt><expr><name>index</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>dir</name><operator>.</operator><name>root</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content>}</block></if></if_stmt>
            <while>while<condition>(<expr><name>index</name> <operator>&lt;</operator> <call><name><name>command</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><block>{<block_content>
                <expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>command</name><index>[<expr><name>index</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
                <if_stmt><if>if<condition>(<expr><name>c</name> <operator>!=</operator> <literal type="char">'/'</literal></expr>)</condition><block>{<block_content><expr_stmt><expr><name>newFolder</name> <operator>+=</operator> <name>c</name></expr>;</expr_stmt></block_content>}</block></if>
                <else>else<block>{<block_content><expr_stmt><expr><call><name><name>dir</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>newFolder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><name>newFolder</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt></block_content>}</block></else></if_stmt>
            </block_content>}</block></while>
            <if_stmt><if>if<condition>(<expr><name>newFolder</name> <operator>!=</operator> <literal type="string">""</literal></expr>)</condition><block>{<block_content><expr_stmt><expr><call><name><name>dir</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>newFolder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
    
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
