<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode_cpp\raw\135B-RectangleAndSquare.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{<block_content>

    <decl_stmt><decl><type><specifier>const</specifier> <name>long</name></type> <name>N</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name></type> <name><name>x</name><index>[<expr><name>N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>y</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>long</name></type> <name>p</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block>{<block_content><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%ld %ld"</literal></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <name>p</name></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content>}</block></for>

    <decl_stmt><decl><type><name>long</name></type> <name><name>rv</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt> <for>for<control>(<init><decl><type><name>long</name></type> <name>p</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block>{<block_content><expr_stmt><expr><name><name>rv</name><index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt></block_content>}</block></for>
    <decl_stmt><decl><type><name>bool</name></type> <name>possible</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <do>do<block>{<block_content>
        <decl_stmt><decl><type><name>long</name></type> <name>M</name> <init>= <expr><name>N</name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt> <decl_stmt><decl><type><name>long</name></type> <name><name>dx</name><index>[<expr><name>M</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>dy</name><index>[<expr><name>M</name></expr>]</index></name></decl>;</decl_stmt>

        <for>for<control>(<init><decl><type><name>long</name></type> <name>p</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>M</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block>{<block_content><expr_stmt><expr><name><name>dx</name><index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <name><name>x</name><index>[<expr><name><name>rv</name><index>[<expr><operator>(</operator><name>p</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name>M</name></expr>]</index></name></expr>]</index></name> <operator>-</operator> <name><name>x</name><index>[<expr><name><name>rv</name><index>[<expr><name>p</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>dy</name><index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <name><name>y</name><index>[<expr><name><name>rv</name><index>[<expr><operator>(</operator><name>p</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name>M</name></expr>]</index></name></expr>]</index></name> <operator>-</operator> <name><name>y</name><index>[<expr><name><name>rv</name><index>[<expr><name>p</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block_content>}</block></for>
        <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>dx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>*</operator> <name><name>dy</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <name><name>dy</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>dx</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>dx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>dy</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>!=</operator> <name><name>dy</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>dx</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>dx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>dx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>dy</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>dy</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>dx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>dx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>dy</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>dy</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name><name>dx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>dx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>dy</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>dy</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>)</condition><block>{<block_content><continue>continue;</continue></block_content>}</block></if></if_stmt>

        <for>for<control>(<init><decl><type><name>long</name></type> <name>p</name> <init>= <expr><name>M</name></expr></init></decl>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block>{<block_content><expr_stmt><expr><name><name>dx</name><index>[<expr><name>p</name> <operator>-</operator> <name>M</name></expr>]</index></name> <operator>=</operator> <name><name>x</name><index>[<expr><name><name>rv</name><index>[<expr><name>M</name> <operator>+</operator> <operator>(</operator><name>p</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name>M</name></expr>]</index></name></expr>]</index></name> <operator>-</operator> <name><name>x</name><index>[<expr><name><name>rv</name><index>[<expr><name>p</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>dy</name><index>[<expr><name>p</name> <operator>-</operator> <name>M</name></expr>]</index></name> <operator>=</operator> <name><name>y</name><index>[<expr><name><name>rv</name><index>[<expr><name>M</name> <operator>+</operator> <operator>(</operator><name>p</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name>M</name></expr>]</index></name></expr>]</index></name> <operator>-</operator> <name><name>y</name><index>[<expr><name><name>rv</name><index>[<expr><name>p</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block_content>}</block></for>
        <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>dx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>dy</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <name><name>dy</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>dx</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>dx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>dy</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>!=</operator> <name><name>dy</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>dx</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>dx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>dx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>dy</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>dy</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block>{<block_content><continue>continue;</continue></block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>possible</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt> <break>break;</break>
    </block_content>}</block>while<condition>(<expr><call><name><name>std</name><operator>::</operator><name>next_permutation</name></name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>rv</name> <operator>+</operator> <name>N</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>

    <if_stmt><if>if<condition>(<expr><name>possible</name></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"YES"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for<control>(<init><decl><type><name>long</name></type> <name>p</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>N</name> <operator>/</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block>{<block_content><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%ld "</literal></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>+</operator> <name><name>rv</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content>}</block></for><empty_stmt>;</empty_stmt> <expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for<control>(<init><decl><type><name>long</name></type> <name>p</name> <init>= <expr><name>N</name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block>{<block_content><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%ld "</literal></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>+</operator> <name><name>rv</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content>}</block></for><empty_stmt>;</empty_stmt> <expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else<block>{<block_content><expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"NO"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content>}</block></else></if_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
