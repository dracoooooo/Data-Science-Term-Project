<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode_cpp\raw\75B-FacetookPriorityWall.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>

<struct>struct <name>str</name><block>{<public type="default"><decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>name</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>long</name></type> <name>pr</name></decl>;</decl_stmt></public>}</block>;</struct>
<function><type><name>bool</name></type> <name>comp</name><parameter_list>(<parameter><decl><type><name>str</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>str</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<block_content>
    <if_stmt><if>if<condition>(<expr><name><name>a</name><operator>.</operator><name>pr</name></name> <operator>&gt;</operator> <name><name>b</name><operator>.</operator><name>pr</name></name></expr>)</condition><block>{<block_content><return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content>}</block></if>
    <if type="elseif">else if<condition>(<expr><name><name>a</name><operator>.</operator><name>pr</name></name> <operator>==</operator> <name><name>b</name><operator>.</operator><name>pr</name></name> <operator>&amp;&amp;</operator> <name><name>a</name><operator>.</operator><name>name</name></name> <operator>&lt;</operator> <name><name>b</name><operator>.</operator><name>name</name></name></expr>)</condition><block>{<block_content><return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{<block_content>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>myname</name></decl>;</decl_stmt> <expr_stmt><expr><call><name>getline</name><argument_list>(<argument><expr><name><name>std</name><operator>::</operator><name>cin</name></name></expr></argument>, <argument><expr><name>myname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>sn</name></decl>;</decl_stmt> <expr_stmt><expr><call><name>getline</name><argument_list>(<argument><expr><name><name>std</name><operator>::</operator><name>cin</name></name></expr></argument>, <argument><expr><name>sn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>long</name></type> <name>n</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> <for>for<control>(<init><decl><type><name>long</name></type> <name>p</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <call><name><name>sn</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block>{<block_content><expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">10</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <operator>(</operator><name><name>sn</name><index>[<expr><name>p</name></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt></block_content>}</block></for>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>map</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>, <argument><expr><name>long</name></expr></argument>&gt;</argument_list></name></type> <name>pm</name></decl>;</decl_stmt>

    <while>while<condition>(<expr><name>n</name><operator>--</operator></expr>)</condition><block>{<block_content>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>s</name></decl>;</decl_stmt> <expr_stmt><expr><call><name>getline</name><argument_list>(<argument><expr><name><name>std</name><operator>::</operator><name>cin</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>from</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></decl>, <decl><type ref="prev"/><name>to</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>score</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>ind</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> <while>while<condition>(<expr><name><name>s</name><index>[<expr><name>ind</name></expr>]</index></name> <operator>!=</operator> <literal type="char">' '</literal></expr>)</condition><block>{<block_content><expr_stmt><expr><name>from</name> <operator>+=</operator> <name><name>s</name><index>[<expr><name>ind</name></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><operator>++</operator><name>ind</name></expr>;</expr_stmt></block_content>}</block></while>
        <expr_stmt><expr><operator>++</operator><name>ind</name></expr>;</expr_stmt>
        <if_stmt><if>if<condition>(<expr><name><name>s</name><index>[<expr><name>ind</name></expr>]</index></name> <operator>==</operator> <literal type="char">'p'</literal></expr>)</condition><block>{<block_content><expr_stmt><expr><name>ind</name> <operator>+=</operator> <literal type="number">10</literal></expr>;</expr_stmt> <expr_stmt><expr><name>score</name> <operator>=</operator> <literal type="number">15</literal></expr>;</expr_stmt></block_content>}</block></if>
        <if type="elseif">else if<condition>(<expr><name><name>s</name><index>[<expr><name>ind</name></expr>]</index></name> <operator>==</operator> <literal type="char">'c'</literal></expr>)</condition><block>{<block_content><expr_stmt><expr><name>ind</name> <operator>+=</operator> <literal type="number">13</literal></expr>;</expr_stmt> <expr_stmt><expr><name>score</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt></block_content>}</block></if>
        <if type="elseif">else if<condition>(<expr><name><name>s</name><index>[<expr><name>ind</name></expr>]</index></name> <operator>==</operator> <literal type="char">'l'</literal></expr>)</condition><block>{<block_content><expr_stmt><expr><name>ind</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt> <expr_stmt><expr><name>score</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt></block_content>}</block></if></if_stmt>
        <while>while<condition>(<expr><name><name>s</name><index>[<expr><name>ind</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\''</literal></expr>)</condition><block>{<block_content><expr_stmt><expr><name>to</name> <operator>+=</operator> <name><name>s</name><index>[<expr><name>ind</name></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><operator>++</operator><name>ind</name></expr>;</expr_stmt></block_content>}</block></while>
        <if_stmt><if>if<condition>(<expr><name>from</name> <operator>==</operator> <name>myname</name></expr>)</condition><block>{<block_content><expr_stmt><expr><name><name>pm</name><index>[<expr><name>to</name></expr>]</index></name> <operator>+=</operator> <name>score</name></expr>;</expr_stmt></block_content>}</block></if>
        <if type="elseif">else if<condition>(<expr><name>to</name> <operator>==</operator> <name>myname</name></expr>)</condition><block>{<block_content><expr_stmt><expr><name><name>pm</name><index>[<expr><name>from</name></expr>]</index></name> <operator>+=</operator> <name>score</name></expr>;</expr_stmt></block_content>}</block></if>
        <else>else<block>{<block_content><expr_stmt><expr><name><name>pm</name><index>[<expr><name>to</name></expr>]</index></name> <operator>+=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>pm</name><index>[<expr><name>from</name></expr>]</index></name> <operator>+=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content>}</block></else></if_stmt> <comment type="line">//ensure that they are in the map</comment>
    </block_content>}</block></while>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>str</name></expr></argument>&gt;</argument_list></name></type> <name>v</name></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name><name>std</name><operator>::</operator><name>map</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>, <argument><expr><name>long</name></expr></argument>&gt;</argument_list><operator>::</operator><name>iterator</name></name></type> <name>it</name> <init>= <expr><call><name><name>pm</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>it</name> <operator>!=</operator> <call><name><name>pm</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>it</name><operator>++</operator></expr></incr>)</control><block>{<block_content><decl_stmt><decl><type><name>str</name></type> <name>x</name></decl>;</decl_stmt> <expr_stmt><expr><name><name>x</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name><name>it</name><operator>-&gt;</operator><name>first</name></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>x</name><operator>.</operator><name>pr</name></name> <operator>=</operator> <name><name>it</name><operator>-&gt;</operator><name>second</name></name></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content>}</block></for>
    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name><name>v</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>v</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>comp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>long</name></type> <name>p</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <call><name><name>v</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block>{<block_content><expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <name><name>v</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>&lt;&lt;</operator> <name><name>std</name><operator>::</operator><name>endl</name></name></expr>;</expr_stmt></block_content>}</block></for>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
