<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="C:\Users\DRACO\PycharmProjects\Data-Science-Term-Project-1\data\leetcode_cpp\raw\18A-Triangle.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>

<function><type><name>bool</name></type> <name>isRight</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list><block>{<block_content>

    <decl_stmt><decl><type><name>int</name></type> <name><name>sides</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>sides</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>c</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>-</operator> <name><name>c</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <operator>(</operator><name><name>c</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>-</operator> <name><name>c</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>c</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>-</operator> <name><name>c</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator><operator>*</operator> <operator>(</operator><name><name>c</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>-</operator> <name><name>c</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt> 
    <expr_stmt><expr><name><name>sides</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>c</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>-</operator> <name><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <operator>(</operator><name><name>c</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>-</operator> <name><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>c</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>-</operator> <name><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>*</operator> <operator>(</operator><name><name>c</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>-</operator> <name><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt> 
    <expr_stmt><expr><name><name>sides</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>c</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <operator>(</operator><name><name>c</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>c</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <name><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>*</operator> <operator>(</operator><name><name>c</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <name><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt> 

    <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>sort</name></name><argument_list>(<argument><expr><name>sides</name></expr></argument>, <argument><expr><name>sides</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>(<expr><name><name>sides</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>sides</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <name><name>sides</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>sides</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block>{<block_content><return>return <expr><literal type="number">1</literal></expr>;</return></block_content>}</block></if>
    <else>else<block>{<block_content><return>return <expr><literal type="number">0</literal></expr>;</return></block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{<block_content>

    <decl_stmt><decl><type><name>int</name></type> <name><name>points</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block>{<block_content><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>points</name> <operator>+</operator> <name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content>}</block></for>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>output</name> <init>= <expr><literal type="string">"NEITHER"</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>(<expr><call><name>isRight</name><argument_list>(<argument><expr><name>points</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content><expr_stmt><expr><name>output</name> <operator>=</operator> <literal type="string">"RIGHT"</literal></expr>;</expr_stmt></block_content>}</block></if>
    <else>else<block>{<block_content>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
            <expr_stmt><expr><operator>++</operator><name><name>points</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>    <if_stmt><if>if<condition>(<expr><call><name>isRight</name><argument_list>(<argument><expr><name>points</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content><expr_stmt><expr><name>output</name> <operator>=</operator> <literal type="string">"ALMOST"</literal></expr>;</expr_stmt> <break>break;</break></block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name><name>points</name><index>[<expr><name>k</name></expr>]</index></name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt> <if_stmt><if>if<condition>(<expr><call><name>isRight</name><argument_list>(<argument><expr><name>points</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content><expr_stmt><expr><name>output</name> <operator>=</operator> <literal type="string">"ALMOST"</literal></expr>;</expr_stmt> <break>break;</break></block_content>}</block></if></if_stmt>
            <expr_stmt><expr><operator>++</operator><name><name>points</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <name>output</name> <operator>&lt;&lt;</operator> <name><name>std</name><operator>::</operator><name>endl</name></name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
