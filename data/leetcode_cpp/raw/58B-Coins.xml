<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode_cpp\raw\58B-Coins.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{<block_content>

    <decl_stmt><decl><type><name>long</name></type> <name>n</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%ld"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>bool</name> <modifier>*</modifier></type><name>primes</name> <init>= <expr><operator>new</operator> <name><name>bool</name><index>[<expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>primes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>primes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <for>for<control>(<init><decl><type><name>long</name></type> <name>k</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block>{<block_content><expr_stmt><expr><name><name>primes</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content>}</block></for>
    <for>for<control>(<init><decl><type><name>long</name></type> <name>k</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <call><name>sqrt</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>primes</name><index>[<expr><name>k</name></expr>]</index></name></expr>)</condition><block>{<block_content><continue>continue;</continue></block_content>}</block></if></if_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>m</name> <init>= <expr><literal type="number">2</literal> <operator>*</operator> <name>k</name></expr></init></decl>;</init> <condition><expr><name>m</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>m</name> <operator>+=</operator> <name>k</name></expr></incr>)</control><block>{<block_content><expr_stmt><expr><name><name>primes</name><index>[<expr><name>m</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content>}</block></for>
    </block_content>}</block></for>

    <decl_stmt><decl><type><name>long</name></type> <name>k</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></decl>, <decl><type ref="prev"/><name>current</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%ld "</literal></expr></argument>, <argument><expr><name>current</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>current</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>k</name> <operator>&lt;=</operator> <name>n</name></expr>)</condition><block>{<block_content>
        <if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>primes</name><index>[<expr><name>k</name></expr>]</index></name></expr>)</condition><block>{<block_content><expr_stmt><expr><operator>++</operator><name>k</name></expr>;</expr_stmt> <continue>continue;</continue></block_content>}</block></if></if_stmt>
        <if_stmt><if>if<condition>(<expr><name>current</name> <operator>%</operator> <name>k</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content><expr_stmt><expr><name>current</name> <operator>/=</operator> <name>k</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%ld "</literal></expr></argument>, <argument><expr><name>current</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content>}</block></if>
        <else>else<block>{<block_content><expr_stmt><expr><operator>++</operator><name>k</name></expr>;</expr_stmt></block_content>}</block></else></if_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
