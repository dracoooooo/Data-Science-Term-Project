<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="C:\Users\DRACO\PycharmProjects\Data-Science-Term-Project-1\data\leetcode_cpp\raw\9B-RunningStudent.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{<block_content>

    <decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>vb</name></decl>, <decl><type ref="prev"/><name>vs</name></decl>;</decl_stmt> <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld %lld %lld"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>x</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>ll</name></type> <name>p</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block>{<block_content><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>x</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content>}</block></for>
    <decl_stmt><decl><type><name>ll</name></type> <name>xu</name></decl>, <decl><type ref="prev"/><name>yu</name></decl>;</decl_stmt> <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld %lld"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>xu</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>yu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>double</name></type> <name>mt</name><argument_list>(<argument><expr><literal type="number">2e18</literal></expr></argument>)</argument_list></decl>;</decl_stmt> <decl_stmt><decl><type><name>ll</name></type> <name>index</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>ll</name></type> <name>p</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <decl_stmt><decl><type><name>double</name></type> <name>time</name> <init>= <expr><call><name>sqrt</name><argument_list>(<argument><expr><operator>(</operator><name><name>x</name><index>[<expr><name>p</name></expr>]</index></name> <operator>-</operator> <name>xu</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name><name>x</name><index>[<expr><name>p</name></expr>]</index></name> <operator>-</operator> <name>xu</name><operator>)</operator> <operator>+</operator> <name>yu</name> <operator>*</operator> <name>yu</name></expr></argument>)</argument_list></call> <operator>/</operator> <name>vs</name> <operator>+</operator> <literal type="number">1.0</literal> <operator>*</operator> <name><name>x</name><index>[<expr><name>p</name></expr>]</index></name> <operator>/</operator> <name>vb</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if<condition>(<expr><name>time</name> <operator>&lt;=</operator> <name>mt</name></expr>)</condition><block>{<block_content><expr_stmt><expr><name>mt</name> <operator>=</operator> <name>time</name></expr>;</expr_stmt> <expr_stmt><expr><name>index</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt></block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld\n"</literal></expr></argument>, <argument><expr><name>index</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
