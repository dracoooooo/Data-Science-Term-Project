<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="C:\Users\DRACO\PycharmProjects\Data-Science-Term-Project-1\data\leetcode_cpp\raw\149B-MartianClock.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{<block_content>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>time</name></decl>;</decl_stmt> <expr_stmt><expr><call><name>getline</name><argument_list>(<argument><expr><name><name>std</name><operator>::</operator><name>cin</name></name></expr></argument>, <argument><expr><name>time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>hour</name></decl>, <decl><type ref="prev"/><name>minute</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>flag</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>minBase</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>p</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <call><name><name>time</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
        <if_stmt><if>if<condition>(<expr><name><name>time</name><index>[<expr><name>p</name></expr>]</index></name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition><block>{<block_content><expr_stmt><expr><name>flag</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <continue>continue;</continue></block_content>}</block></if>
        <if type="elseif">else if<condition>(<expr><literal type="char">'0'</literal> <operator>&lt;=</operator> <name><name>time</name><index>[<expr><name>p</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>time</name><index>[<expr><name>p</name></expr>]</index></name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition><block>{<block_content><expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>time</name><index>[<expr><name>p</name></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block_content>}</block></if>
        <if type="elseif">else if<condition>(<expr><literal type="char">'A'</literal> <operator>&lt;=</operator> <name><name>time</name><index>[<expr><name>p</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>time</name><index>[<expr><name>p</name></expr>]</index></name> <operator>&lt;=</operator> <literal type="char">'Z'</literal></expr>)</condition><block>{<block_content><expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">10</literal> <operator>+</operator> <name><name>time</name><index>[<expr><name>p</name></expr>]</index></name> <operator>-</operator> <literal type="char">'A'</literal></expr>;</expr_stmt></block_content>}</block></if></if_stmt>

        <if_stmt><if>if<condition>(<expr><operator>!</operator><name>flag</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>c</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <call><name><name>hour</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block>{<block_content><expr_stmt><expr><call><name><name>hour</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content>}</block></if>
        <if type="elseif">else if<condition>(<expr><name>flag</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>c</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <call><name><name>minute</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block>{<block_content><expr_stmt><expr><call><name><name>minute</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content>}</block></if></if_stmt>
        <if_stmt><if>if<condition>(<expr><name>c</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;</operator> <name>minBase</name></expr>)</condition><block>{<block_content><expr_stmt><expr><name>minBase</name> <operator>=</operator> <name>c</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>ans</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>(<expr><operator>(</operator><call><name><name>hour</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><call><name><name>hour</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>hour</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">24</literal><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name><name>minute</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><call><name><name>minute</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>minute</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">60</literal><operator>)</operator><operator>)</operator></expr>)</condition><block>{<block_content><expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"-1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content>}</block></if>
    <else>else<block>{<block_content>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>b</name> <init>= <expr><name>minBase</name></expr></init></decl>;</init> <condition><expr><name>b</name> <operator>&lt;=</operator> <literal type="number">60</literal></expr>;</condition> <incr><expr><name>b</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
            <decl_stmt><decl><type><name>bool</name></type> <name>possible</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>m</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> <for>for<control>(<init><decl><type><name>int</name></type> <name>q</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>q</name> <operator>&lt;</operator> <call><name><name>minute</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>q</name><operator>++</operator></expr></incr>)</control><block>{<block_content><expr_stmt><expr><name>m</name> <operator>=</operator> <name>b</name> <operator>*</operator> <name>m</name> <operator>+</operator> <name><name>minute</name><index>[<expr><name>q</name></expr>]</index></name></expr>;</expr_stmt> <if_stmt><if>if<condition>(<expr><name>m</name> <operator>&gt;=</operator> <literal type="number">60</literal></expr>)</condition><block>{<block_content><expr_stmt><expr><name>possible</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <break>break;</break></block_content>}</block></if></if_stmt></block_content>}</block></for>
            <decl_stmt><decl><type><name>int</name></type> <name>h</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> <for>for<control>(<init><decl><type><name>int</name></type> <name>q</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>q</name> <operator>&lt;</operator> <call><name><name>hour</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>  ;</condition> <incr><expr><name>q</name><operator>++</operator></expr></incr>)</control><block>{<block_content><expr_stmt><expr><name>h</name> <operator>=</operator> <name>b</name> <operator>*</operator> <name>h</name> <operator>+</operator> <name><name>hour</name><index>[<expr><name>q</name></expr>]</index></name></expr>;</expr_stmt> <if_stmt><if>if<condition>(<expr><name>h</name> <operator>&gt;=</operator> <literal type="number">24</literal></expr>)</condition><block>{<block_content><expr_stmt><expr><name>possible</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <break>break;</break></block_content>}</block></if></if_stmt></block_content>}</block></for>
            <if_stmt><if>if<condition>(<expr><name>possible</name></expr>)</condition><block>{<block_content><expr_stmt><expr><call><name><name>ans</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content>}</block></if></if_stmt>
        </block_content>}</block></for>

        <if_stmt><if>if<condition>(<expr><call><name><name>ans</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content><expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content>}</block></if>
        <else>else<block>{<block_content><for>for<control>(<init><decl><type><name>int</name></type> <name>p</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <call><name><name>ans</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block>{<block_content><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d "</literal></expr></argument>, <argument><expr><name><name>ans</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content>}</block></for><empty_stmt>;</empty_stmt> <expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
