<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="C:\Users\DRACO\PycharmProjects\Data-Science-Term-Project-1\data\leetcode_cpp\raw\118D-CaesarsLegions.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{<block_content>

    <decl_stmt><decl><type><specifier>const</specifier> <name>long</name> <name>long</name></type> <name>M</name> <init>= <expr><literal type="number">100000000</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>long</name></type> <name>n1</name></decl>, <decl><type ref="prev"/><name>n2</name></decl>, <decl><type ref="prev"/><name>k1</name></decl>, <decl><type ref="prev"/><name>k2</name></decl>;</decl_stmt> <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%ld %ld %ld %ld\n"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>k1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>k2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>f</name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>+</operator> <name>n1</name></expr></argument>, <argument><expr><call><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>+</operator> <name>n2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>g</name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>+</operator> <name>n1</name></expr></argument>, <argument><expr><call><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>+</operator> <name>n2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>f</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>g</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <for>for<control>(<init><decl><type><name>long</name></type> <name>row</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>row</name> <operator>&lt;=</operator> <name>n1</name></expr>;</condition> <incr><expr><name>row</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <for>for<control>(<init><decl><type><name>long</name></type> <name>col</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>col</name> <operator>&lt;=</operator> <name>n2</name></expr>;</condition> <incr><expr><name>col</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
            <for>for<control>(<init><decl><type><name>long</name></type> <name>u</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>u</name> <operator>&lt;=</operator> <name>k1</name> <operator>&amp;&amp;</operator> <name>u</name> <operator>&lt;=</operator> <name>row</name></expr>;</condition> <incr><expr><name>u</name><operator>++</operator></expr></incr>)</control><block>{<block_content><expr_stmt><expr><name><name>f</name><index>[<expr><name>row</name></expr>]</index><index>[<expr><name>col</name></expr>]</index></name> <operator>+=</operator> <name><name>g</name><index>[<expr><name>row</name> <operator>-</operator> <name>u</name></expr>]</index><index>[<expr><name>col</name></expr>]</index></name></expr>;</expr_stmt></block_content>}</block></for>
            <for>for<control>(<init><decl><type><name>long</name></type> <name>u</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>u</name> <operator>&lt;=</operator> <name>k2</name> <operator>&amp;&amp;</operator> <name>u</name> <operator>&lt;=</operator> <name>col</name></expr>;</condition> <incr><expr><name>u</name><operator>++</operator></expr></incr>)</control><block>{<block_content><expr_stmt><expr><name><name>g</name><index>[<expr><name>row</name></expr>]</index><index>[<expr><name>col</name></expr>]</index></name> <operator>+=</operator> <name><name>f</name><index>[<expr><name>row</name></expr>]</index><index>[<expr><name>col</name> <operator>-</operator> <name>u</name></expr>]</index></name></expr>;</expr_stmt></block_content>}</block></for>
            <expr_stmt><expr><name><name>f</name><index>[<expr><name>row</name></expr>]</index><index>[<expr><name>col</name></expr>]</index></name> <operator>%=</operator> <name>M</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>g</name><index>[<expr><name>row</name></expr>]</index><index>[<expr><name>col</name></expr>]</index></name> <operator>%=</operator> <name>M</name></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>f</name><index>[<expr><name>n1</name></expr>]</index><index>[<expr><name>n2</name></expr>]</index></name> <operator>+</operator> <name><name>g</name><index>[<expr><name>n1</name></expr>]</index><index>[<expr><name>n2</name></expr>]</index></name><operator>)</operator> <operator>%</operator> <name>M</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
