<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="C:\Users\DRACO\PycharmProjects\Data-Science-Term-Project-1\data\leetcode_cpp\raw\137A-PostcardsAndPhotos.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>line</name></decl>;</decl_stmt> <expr_stmt><expr><call><name>getline</name><argument_list>(<argument><expr><name><name>std</name><operator>::</operator><name>cin</name></name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>numTrips</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>additional</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name>target</name></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>index</name> <operator>&lt;</operator> <call><name><name>line</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><name>target</name> <operator>=</operator> <name><name>line</name><index>[<expr><name>index</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>additional</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <while>while<condition>(<expr><name>index</name> <operator>+</operator> <name>additional</name> <operator>&lt;</operator> <call><name><name>line</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>additional</name> <operator>&lt;</operator><literal type="number">5</literal> <operator>&amp;&amp;</operator> <name><name>line</name><index>[<expr><name>index</name> <operator>+</operator> <name>additional</name></expr>]</index></name> <operator>==</operator> <name>target</name></expr>)</condition><block>{<block_content><expr_stmt><expr><operator>++</operator><name>additional</name></expr>;</expr_stmt></block_content>}</block></while>
        <expr_stmt><expr><name>index</name> <operator>+=</operator> <name>additional</name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>++</operator><name>numTrips</name></expr>;</expr_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <name>numTrips</name> <operator>&lt;&lt;</operator> <name><name>std</name><operator>::</operator><name>endl</name></name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
