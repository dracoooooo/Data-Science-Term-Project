<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode_cpp\raw\152B-Steps.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{<block_content>

    <decl_stmt><decl><type><specifier>const</specifier> <name>long</name></type> <name>maxSteps</name> <init>= <expr><literal type="number">1000000000</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>yardX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>, <decl><type ref="prev"/><name>yardY</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld %lld"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>yardX</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>yardY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>currentX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>, <decl><type ref="prev"/><name>currentY</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld %lld"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>currentX</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>currentY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>total</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name></type> <name>numVectors</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%ld"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>numVectors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <while>while<condition>(<expr><name>numVectors</name><operator>--</operator></expr>)</condition><block>{<block_content>

        <decl_stmt><decl><type><name>long</name></type> <name>vectorX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>, <decl><type ref="prev"/><name>vectorY</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%ld %ld"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>vectorX</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vectorY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>long</name></type> <name>numStepsX</name><argument_list>(<argument><expr><name>maxSteps</name></expr></argument>)</argument_list></decl>;</decl_stmt> 
        <if_stmt><if>if<condition>(<expr><name>vectorX</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content><expr_stmt><expr><name>numStepsX</name> <operator>=</operator> <operator>(</operator><name>yardX</name> <operator>-</operator> <name>currentX</name><operator>)</operator> <operator>/</operator> <name>vectorX</name></expr>;</expr_stmt></block_content>}</block></if> 
        <if type="elseif">else if<condition>(<expr><name>vectorX</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content><expr_stmt><expr><name>numStepsX</name> <operator>=</operator> <operator>(</operator><name>currentX</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <operator>(</operator><operator>-</operator><name>vectorX</name><operator>)</operator></expr>;</expr_stmt></block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>long</name></type> <name>numStepsY</name><argument_list>(<argument><expr><name>maxSteps</name></expr></argument>)</argument_list></decl>;</decl_stmt> 
        <if_stmt><if>if<condition>(<expr><name>vectorY</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content><expr_stmt><expr><name>numStepsY</name> <operator>=</operator> <operator>(</operator><name>yardY</name> <operator>-</operator> <name>currentY</name><operator>)</operator> <operator>/</operator> <name>vectorY</name></expr>;</expr_stmt></block_content>}</block></if> 
        <if type="elseif">else if<condition>(<expr><name>vectorY</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content><expr_stmt><expr><name>numStepsY</name> <operator>=</operator> <operator>(</operator><name>currentY</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <operator>(</operator><operator>-</operator><name>vectorY</name><operator>)</operator></expr>;</expr_stmt></block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>long</name></type> <name>numSteps</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
        <if_stmt><if>if<condition>(<expr><name>numStepsX</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>numStepsY</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content><expr_stmt><expr><name>numSteps</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>numStepsX</name> <operator>&lt;</operator> <name>numStepsY</name><operator>)</operator></expr> ?</condition><then> <expr><name>numStepsX</name></expr> </then><else>: <expr><name>numStepsY</name></expr></else></ternary></expr>;</expr_stmt></block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>currentX</name> <operator>+=</operator> <name>numSteps</name> <operator>*</operator> <name>vectorX</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>currentY</name> <operator>+=</operator> <name>numSteps</name> <operator>*</operator> <name>vectorY</name></expr>;</expr_stmt> 
        <expr_stmt><expr><name>total</name> <operator>+=</operator> <name>numSteps</name></expr>;</expr_stmt>
        
    </block_content>}</block></while>

    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld\n"</literal></expr></argument>, <argument><expr><name>total</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
