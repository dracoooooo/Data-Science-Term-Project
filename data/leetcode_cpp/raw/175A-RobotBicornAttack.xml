<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="C:\Users\DRACO\PycharmProjects\Data-Science-Term-Project-1\data\leetcode_cpp\raw\175A-RobotBicornAttack.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>


<function><type><name>long</name></type> <name>convertToLong</name><parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>x</name></decl></parameter>)</parameter_list><block>{<block_content>

    <if_stmt><if>if<condition>(<expr><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <call><name><name>x</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block>{<block_content><return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>(<expr><call><name><name>x</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">7</literal></expr>)</condition><block>{<block_content><return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>long</name></type> <name>output</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>size_t</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <call><name><name>x</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block>{<block_content><expr_stmt><expr><name>output</name> <operator>=</operator> <literal type="number">10</literal> <operator>*</operator> <name>output</name> <operator>+</operator> <operator>(</operator><name><name>x</name><index>[<expr><name>k</name></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt></block_content>}</block></for>

    <if_stmt><if>if<condition>(<expr><name>output</name> <operator>&gt;</operator> <literal type="number">1000000</literal></expr>)</condition><block>{<block_content><return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content>}</block></if></if_stmt>
    <return>return <expr><name>output</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{<block_content>

    <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>input</name></decl>;</decl_stmt> <expr_stmt><expr><call><name>getline</name><argument_list>(<argument><expr><name><name>std</name><operator>::</operator><name>cin</name></name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>L</name> <init>= <expr><call><name><name>input</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name></type> <name>maxTotal</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

    <for>for<control>(<init><decl><type><name>int</name></type> <name>first</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>first</name> <operator>&lt;=</operator> <name>N</name> <operator>&amp;&amp;</operator> <name>first</name> <operator>&lt;=</operator> <name>L</name> <operator>-</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>first</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>second</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>second</name> <operator>&lt;=</operator> <name>N</name> <operator>&amp;&amp;</operator> <name>second</name> <operator>&lt;=</operator> <name>L</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>first</name></expr>;</condition> <incr><expr><name>second</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
            <decl_stmt><decl><type><name>long</name></type> <name>a</name> <init>= <expr><call><name>convertToLong</name><argument_list>(<argument><expr><call><name><name>input</name><operator>.</operator><name>substr</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>first</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>long</name></type> <name>b</name> <init>= <expr><call><name>convertToLong</name><argument_list>(<argument><expr><call><name><name>input</name><operator>.</operator><name>substr</name></name><argument_list>(<argument><expr><name>first</name></expr></argument>, <argument><expr><name>second</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>long</name></type> <name>c</name> <init>= <expr><call><name>convertToLong</name><argument_list>(<argument><expr><call><name><name>input</name><operator>.</operator><name>substr</name></name><argument_list>(<argument><expr><name>first</name> <operator>+</operator> <name>second</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">//std::cout &lt;&lt; input.substr(0, first) &lt;&lt; "\t" &lt;&lt; input.substr(first, second) &lt;&lt; "\t" &lt;&lt; input.substr(first + second) &lt;&lt; std::endl;</comment>

            <decl_stmt><decl><type><name>long</name></type> <name>total</name><argument_list>(<argument><expr><name>a</name> <operator>+</operator> <name>b</name> <operator>+</operator> <name>c</name></expr></argument>)</argument_list></decl>;</decl_stmt>
            <if_stmt><if>if<condition>(<expr><name>a</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>b</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>total</name> <operator>&gt;</operator> <name>maxTotal</name></expr>)</condition><block>{<block_content>
                <expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"---"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>maxTotal</name> <operator>=</operator> <name>total</name></expr>;</expr_stmt></block_content>}</block></if></if_stmt>

        </block_content>}</block></for>
    </block_content>}</block></for>

    <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <name>maxTotal</name> <operator>&lt;&lt;</operator> <name><name>std</name><operator>::</operator><name>endl</name></name></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
