<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode_cpp\raw\66A-PetyaAndJava.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>


<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{<block_content>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>input</name></decl>;</decl_stmt> <expr_stmt><expr><call><name>getline</name><argument_list>(<argument><expr><name><name>std</name><operator>::</operator><name>cin</name></name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>(<expr><name><name>input</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'-'</literal> <operator>&amp;&amp;</operator> <operator>(</operator><call><name><name>input</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">3</literal> <operator>||</operator> <operator>(</operator><call><name><name>input</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <call><name><name>input</name><operator>.</operator><name>compare</name></name><argument_list>(<argument><expr><literal type="string">"127"</literal></expr></argument>)</argument_list></call>  <operator>&lt;=</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator></expr> )</condition><block>{<block_content><expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"byte"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content>}</block></if>
    <if type="elseif">else if<condition>(<expr><name><name>input</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal> <operator>&amp;&amp;</operator> <operator>(</operator><call><name><name>input</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">4</literal> <operator>||</operator> <operator>(</operator><call><name><name>input</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <call><name><name>input</name><operator>.</operator><name>compare</name></name><argument_list>(<argument><expr><literal type="string">"-128"</literal></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator></expr> )</condition><block>{<block_content><expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"byte"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content>}</block></if>

    <if type="elseif">else if<condition>(<expr><name><name>input</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'-'</literal> <operator>&amp;&amp;</operator> <operator>(</operator><call><name><name>input</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">5</literal> <operator>||</operator> <operator>(</operator><call><name><name>input</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">5</literal> <operator>&amp;&amp;</operator> <call><name><name>input</name><operator>.</operator><name>compare</name></name><argument_list>(<argument><expr><literal type="string">"32767"</literal></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator></expr> )</condition><block>{<block_content><expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"short"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content>}</block></if>
    <if type="elseif">else if<condition>(<expr><name><name>input</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal> <operator>&amp;&amp;</operator> <operator>(</operator><call><name><name>input</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">6</literal> <operator>||</operator> <operator>(</operator><call><name><name>input</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">6</literal> <operator>&amp;&amp;</operator> <call><name><name>input</name><operator>.</operator><name>compare</name></name><argument_list>(<argument><expr><literal type="string">"-32768"</literal></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator></expr> )</condition><block>{<block_content><expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"short"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content>}</block></if>

    <if type="elseif">else if<condition>(<expr><name><name>input</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'-'</literal> <operator>&amp;&amp;</operator> <operator>(</operator><call><name><name>input</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">10</literal> <operator>||</operator> <operator>(</operator><call><name><name>input</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">10</literal> <operator>&amp;&amp;</operator> <call><name><name>input</name><operator>.</operator><name>compare</name></name><argument_list>(<argument><expr><literal type="string">"2147483647"</literal></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator></expr> )</condition><block>{<block_content><expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"int"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content>}</block></if>
    <if type="elseif">else if<condition>(<expr><name><name>input</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal> <operator>&amp;&amp;</operator> <operator>(</operator><call><name><name>input</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">11</literal> <operator>||</operator> <operator>(</operator><call><name><name>input</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">11</literal> <operator>&amp;&amp;</operator> <call><name><name>input</name><operator>.</operator><name>compare</name></name><argument_list>(<argument><expr><literal type="string">"-2147483648"</literal></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator></expr> )</condition><block>{<block_content><expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"int"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content>}</block></if>

    <if type="elseif">else if<condition>(<expr><name><name>input</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'-'</literal> <operator>&amp;&amp;</operator> <operator>(</operator><call><name><name>input</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">19</literal> <operator>||</operator> <operator>(</operator><call><name><name>input</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">19</literal> <operator>&amp;&amp;</operator> <call><name><name>input</name><operator>.</operator><name>compare</name></name><argument_list>(<argument><expr><literal type="string">"9223372036854775807"</literal></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator></expr> )</condition><block>{<block_content><expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"long"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content>}</block></if>
    <if type="elseif">else if<condition>(<expr><name><name>input</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal> <operator>&amp;&amp;</operator> <operator>(</operator><call><name><name>input</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">20</literal> <operator>||</operator> <operator>(</operator><call><name><name>input</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">20</literal> <operator>&amp;&amp;</operator> <call><name><name>input</name><operator>.</operator><name>compare</name></name><argument_list>(<argument><expr><literal type="string">"-9223372036854775808"</literal></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator></expr> )</condition><block>{<block_content><expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"long"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content>}</block></if>

    <else>else<block>{<block_content><expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"BigInteger"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content>}</block></else></if_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
