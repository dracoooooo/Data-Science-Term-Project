<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode_cpp\raw\75A-LifeWithoutZeros.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>

<function><type><name>long</name> <name>long</name></type> <name>convert</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{<block_content>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>temp</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>, <decl><type ref="prev"/><name>output</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>x</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content><if_stmt><if>if<condition>(<expr><name>x</name> <operator>%</operator> <literal type="number">10</literal></expr>)</condition><block>{<block_content><expr_stmt><expr><name>temp</name> <operator>=</operator> <literal type="number">10</literal> <operator>*</operator> <name>temp</name> <operator>+</operator> <operator>(</operator><name>x</name><operator>%</operator><literal type="number">10</literal><operator>)</operator></expr>;</expr_stmt></block_content>}</block></if></if_stmt><empty_stmt>;</empty_stmt> <expr_stmt><expr><name>x</name> <operator>/=</operator> <literal type="number">10</literal></expr>;</expr_stmt></block_content>}</block></while>
    <while>while<condition>(<expr><name>temp</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content><expr_stmt><expr><name>output</name> <operator>=</operator> <literal type="number">10</literal> <operator>*</operator> <name>output</name> <operator>+</operator> <operator>(</operator><name>temp</name> <operator>%</operator> <literal type="number">10</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>temp</name> <operator>/=</operator> <literal type="number">10</literal></expr>;</expr_stmt></block_content>}</block></while>
    <return>return <expr><name>output</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{<block_content>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt> <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld %lld"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><ternary><condition><expr><operator>(</operator><call><name>convert</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>convert</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>convert</name><argument_list>(<argument><expr><name>a</name> <operator>+</operator> <name>b</name></expr></argument>)</argument_list></call> <operator>)</operator></expr> ?</condition><then> <expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"YES"</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"NO"</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
