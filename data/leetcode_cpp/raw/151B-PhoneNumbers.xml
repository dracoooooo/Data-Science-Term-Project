<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode_cpp\raw\151B-PhoneNumbers.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{<block_content>

    <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
    <comment type="line">//0 for taxi, 1 for pizza 2 for girls; Should have made this an enum;</comment>

    <decl_stmt><decl><type><name>int</name></type> <name>n</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">//std::cout &lt;&lt; n &lt;&lt; std::endl;</comment>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name></type> <name>nameVec</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>numbers</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><call><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>N</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name><name>maxNumbers</name><index>[<expr><name>N</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

    <for>for<control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>num</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>currentName</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></decl>;</decl_stmt> <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cin</name></name> <operator>&gt;&gt;</operator> <name>num</name> <operator>&gt;&gt;</operator> <name>currentName</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>nameVec</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name>currentName</name></expr>;</expr_stmt>
        <comment type="line">//std::cout &lt;&lt; currentName &lt;&lt; "\t***" &lt;&lt; std::endl;</comment>

        <while>while<condition>(<expr><name>num</name><operator>--</operator></expr>)</condition><block>{<block_content>
            <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>temp</name></decl>;</decl_stmt> <expr_stmt><expr><call><name>getline</name><argument_list>(<argument><expr><name><name>std</name><operator>::</operator><name>cin</name></name></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">//std::cout &lt;&lt; temp &lt;&lt; std::endl;</comment>
            <if_stmt><if>if<condition>(<expr><name><name>temp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>temp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>temp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name><name>temp</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>temp</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <name><name>temp</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>temp</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>==</operator> <name><name>temp</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>temp</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>==</operator> <name><name>temp</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>)</condition><block>{<block_content><expr_stmt><expr><operator>++</operator><name><name>numbers</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content>}</block></if>
            <if type="elseif">else if<condition>(<expr><name><name>temp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <name><name>temp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>temp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;</operator> <name><name>temp</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>temp</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&gt;</operator> <name><name>temp</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>temp</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&gt;</operator> <name><name>temp</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>temp</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>&gt;</operator> <name><name>temp</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>)</condition><block>{<block_content><expr_stmt><expr><operator>++</operator><name><name>numbers</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content>}</block></if>
            <else>else<block>{<block_content><expr_stmt><expr><operator>++</operator><name><name>numbers</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt></block_content>}</block></else></if_stmt>
        </block_content>}</block></while>

        <for>for<control>(<init><decl><type><name>int</name></type> <name>p</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
            <comment type="line">//std::cout &lt;&lt; "P: " &lt;&lt; p &lt;&lt; ": " &lt;&lt; numbers[k][p] &lt;&lt; "\t\t";</comment>
            <if_stmt><if>if<condition>(<expr><name><name>numbers</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>p</name></expr>]</index></name> <operator>&gt;</operator> <name><name>maxNumbers</name><index>[<expr><name>p</name></expr>]</index></name></expr>)</condition><block>{<block_content><expr_stmt><expr><name><name>maxNumbers</name><index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <name><name>numbers</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>p</name></expr>]</index></name></expr>;</expr_stmt></block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <comment type="line">//std::cout &lt;&lt; std::endl &lt;&lt; std::endl;</comment>
    </block_content>}</block></for>

    <decl_stmt><decl><type><name>bool</name></type> <name>moreThanOne</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>moreThanOne</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <literal type="string">"If you want to call a taxi, you should call: "</literal></expr>;</expr_stmt> 
    <for>for<control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <if_stmt><if>if<condition>(<expr><name><name>numbers</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>maxNumbers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block>{<block_content>
            <if_stmt><if>if<condition>(<expr><name>moreThanOne</name></expr>)</condition><block>{<block_content><expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <literal type="string">", "</literal></expr>;</expr_stmt></block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <name><name>nameVec</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>moreThanOne</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <literal type="string">".\n"</literal></expr>;</expr_stmt> 

    <expr_stmt><expr><name>moreThanOne</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <literal type="string">"If you want to order a pizza, you should call: "</literal></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <if_stmt><if>if<condition>(<expr><name><name>numbers</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name><name>maxNumbers</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block>{<block_content>
            <if_stmt><if>if<condition>(<expr><name>moreThanOne</name></expr>)</condition><block>{<block_content><expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <literal type="string">", "</literal></expr>;</expr_stmt></block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <name><name>nameVec</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>moreThanOne</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <literal type="string">".\n"</literal></expr>;</expr_stmt> 

    <expr_stmt><expr><name>moreThanOne</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <literal type="string">"If you want to go to a cafe with a wonderful girl, you should call: "</literal></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <if_stmt><if>if<condition>(<expr><name><name>numbers</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <name><name>maxNumbers</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition><block>{<block_content>
            <if_stmt><if>if<condition>(<expr><name>moreThanOne</name></expr>)</condition><block>{<block_content><expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <literal type="string">", "</literal></expr>;</expr_stmt></block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <name><name>nameVec</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>moreThanOne</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <literal type="string">".\n"</literal></expr>;</expr_stmt> 

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
