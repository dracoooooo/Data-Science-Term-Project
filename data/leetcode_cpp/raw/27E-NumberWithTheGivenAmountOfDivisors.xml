<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode_cpp\raw\27E-NumberWithTheGivenAmountOfDivisors.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{<block_content>

    <decl_stmt><decl><type><name>long</name></type> <name><name>rv</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">37</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">47</literal></expr>, <expr><literal type="number">53</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name></type> <name>n</name></decl>;</decl_stmt> <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%ld"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition><block>{<block_content><expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"24"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content>}</block></if></if_stmt> <comment type="line">// Special case;</comment>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>long</name></expr></argument>&gt;</argument_list></name></type> <name>pdiv</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name></type> <name>cur</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>cur</name> <operator>&lt;=</operator> <name>n</name></expr>)</condition><block>{<block_content>
        <while>while<condition>(<expr><name>n</name> <operator>%</operator> <name>cur</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content><expr_stmt><expr><call><name><name>pdiv</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>n</name> <operator>/=</operator> <name>cur</name></expr>;</expr_stmt></block_content>}</block></while>
        <expr_stmt><expr><operator>++</operator><name>cur</name></expr>;</expr_stmt>
    </block_content>}</block></while>
    <if_stmt><if>if<condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block>{<block_content><expr_stmt><expr><call><name><name>pdiv</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>ll</name></type> <name>res</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></decl>, <decl><type ref="prev"/><name>ind</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>long</name></type> <name>p</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <call><name><name>pdiv</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <decl_stmt><decl><type><name>long</name></type> <name>ind</name> <init>= <expr><call><name><name>pdiv</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>p</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>u</name> <init>= <expr><name><name>pdiv</name><index>[<expr><name>ind</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt> <while>while<condition>(<expr><name>u</name><operator>--</operator></expr>)</condition><block>{<block_content><expr_stmt><expr><name>res</name> <operator>*=</operator> <name><name>rv</name><index>[<expr><name>p</name></expr>]</index></name></expr>;</expr_stmt></block_content>}</block></while>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld\n"</literal></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
