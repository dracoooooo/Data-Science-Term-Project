<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode_cpp\raw\154A-Hometask.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>


<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{<block_content>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>input</name></decl>;</decl_stmt> <expr_stmt><expr><call><name>getline</name><argument_list>(<argument><expr><name><name>std</name><operator>::</operator><name>cin</name></name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt> <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>long</name></type> <name>total</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

    <for>for<control>(<init><decl><type><name>int</name></type> <name>p</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>k</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>forbidden</name></decl>;</decl_stmt> <expr_stmt><expr><call><name>getline</name><argument_list>(<argument><expr><name><name>std</name><operator>::</operator><name>cin</name></name></expr></argument>, <argument><expr><name>forbidden</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">//std::cout &lt;&lt; "Pair: " &lt;&lt; forbidden &lt;&lt; std::endl;</comment>
        <decl_stmt><decl><type><name>bool</name></type> <name>inside</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>first</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>, <decl><type ref="prev"/><name>second</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

        <for>for<control>(<init><decl><type><name>long</name></type> <name>s</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>s</name> <operator>&lt;</operator> <call><name><name>input</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>s</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
            <comment type="line">//std::cout &lt;&lt; "\nLetter: " &lt;&lt; input[s] &lt;&lt; "\t";</comment>
            <if_stmt><if>if<condition>(<expr><operator>!</operator><name>inside</name> <operator>&amp;&amp;</operator> <name><name>input</name><index>[<expr><name>s</name></expr>]</index></name> <operator>!=</operator> <name><name>forbidden</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>input</name><index>[<expr><name>s</name></expr>]</index></name> <operator>!=</operator> <name><name>forbidden</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block>{<block_content><continue>continue;</continue></block_content>}</block></if></if_stmt>
            <if_stmt><if>if<condition>(<expr><name>inside</name> <operator>&amp;&amp;</operator> <name><name>input</name><index>[<expr><name>s</name></expr>]</index></name> <operator>!=</operator> <name><name>forbidden</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>input</name><index>[<expr><name>s</name></expr>]</index></name> <operator>!=</operator> <name><name>forbidden</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block>{<block_content>
                <comment type="line">//puts("Got out");</comment>
                <expr_stmt><expr><name>inside</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
                <decl_stmt><decl><type><name>long</name></type> <name>minimum</name> <init>= <expr><name>first</name></expr></init></decl>;</decl_stmt> <if_stmt><if>if<condition>(<expr><name>first</name> <operator>&gt;</operator> <name>second</name></expr>)</condition><block>{<block_content><expr_stmt><expr><name>minimum</name> <operator>=</operator> <name>second</name></expr>;</expr_stmt></block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name>total</name> <operator>+=</operator> <name>minimum</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>first</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <expr_stmt><expr><name>second</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if<condition>(<expr><name><name>input</name><index>[<expr><name>s</name></expr>]</index></name> <operator>==</operator> <name><name>forbidden</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>||</operator> <name><name>input</name><index>[<expr><name>s</name></expr>]</index></name> <operator>==</operator> <name><name>forbidden</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block>{<block_content>
                <expr_stmt><expr><name>inside</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <if_stmt><if>if<condition>(<expr><name><name>input</name><index>[<expr><name>s</name></expr>]</index></name> <operator>==</operator> <name><name>forbidden</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block>{<block_content><expr_stmt><expr><operator>++</operator><name>first</name></expr>;</expr_stmt></block_content>}</block></if>
                <if type="elseif">else if<condition>(<expr><name><name>input</name><index>[<expr><name>s</name></expr>]</index></name> <operator>==</operator> <name><name>forbidden</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block>{<block_content><expr_stmt><expr><operator>++</operator><name>second</name></expr>;</expr_stmt></block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>

        <if_stmt><if>if<condition>(<expr><name>inside</name></expr>)</condition><block>{<block_content><decl_stmt><decl><type><name>long</name></type> <name>minimum</name> <init>= <expr><name>first</name></expr></init></decl>;</decl_stmt> <if_stmt><if>if<condition>(<expr><name>first</name> <operator>&gt;</operator> <name>second</name></expr>)</condition><block>{<block_content><expr_stmt><expr><name>minimum</name> <operator>=</operator> <name>second</name></expr>;</expr_stmt></block_content>}</block></if></if_stmt><empty_stmt>;</empty_stmt> <expr_stmt><expr><name>total</name> <operator>+=</operator> <name>minimum</name></expr>;</expr_stmt></block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%ld\n"</literal></expr></argument>, <argument><expr><name>total</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
