<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="C:\Users\DRACO\PycharmProjects\Data-Science-Term-Project-1\data\leetcode_cpp\raw\193A-CuttingFigure.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>, <parameter><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>&amp;</modifier></type><name>count</name></decl></parameter>)</parameter_list><block>{<block_content>

    <if_stmt><if>if<condition>(<expr><name>row</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>row</name> <operator>&gt;=</operator> <call><name><name>g</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>||</operator> <name>col</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>col</name> <operator>&gt;=</operator> <name><name>g</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>)</condition><block>{<block_content><return>return;</return></block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>(<expr><name><name>g</name><index>[<expr><name>row</name></expr>]</index><index>[<expr><name>col</name></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition><block>{<block_content><return>return;</return></block_content>}</block></if></if_stmt>
    <expr_stmt><expr><operator>++</operator><name>count</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>g</name><index>[<expr><name>row</name></expr>]</index><index>[<expr><name>col</name></expr>]</index></name> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>row</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>row</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{<block_content>

    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt> <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cin</name></name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>m</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name></type> <name>paper</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>p</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block>{<block_content><expr_stmt><expr><name><name>std</name><operator>::</operator><name>cin</name></name> <operator>&gt;&gt;</operator> <name><name>paper</name><index>[<expr><name>p</name></expr>]</index></name></expr>;</expr_stmt></block_content>}</block></for>

    <decl_stmt><decl><type><name>int</name></type> <name>numPainted</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>row</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>row</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>row</name><operator>++</operator></expr></incr>)</control><block>{<block_content><for>for<control>(<init><decl><type><name>int</name></type> <name>col</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>col</name> <operator>&lt;</operator> <name>m</name></expr>;</condition> <incr><expr><name>col</name><operator>++</operator></expr></incr>)</control><block>{<block_content><expr_stmt><expr><name>numPainted</name> <operator>+=</operator> <operator>(</operator><name><name>paper</name><index>[<expr><name>row</name></expr>]</index><index>[<expr><name>col</name></expr>]</index></name> <operator>==</operator> <literal type="char">'#'</literal><operator>)</operator></expr>;</expr_stmt></block_content>}</block></for></block_content>}</block></for>
    <if_stmt><if>if<condition>(<expr><name>numPainted</name> <operator>&lt;=</operator> <literal type="number">2</literal></expr>)</condition><block>{<block_content><expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <literal type="string">"-1"</literal> <operator>&lt;&lt;</operator> <name><name>std</name><operator>::</operator><name>endl</name></name></expr>;</expr_stmt> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>ans</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>row</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>row</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>row</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <if_stmt><if>if<condition>(<expr><name>ans</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block>{<block_content><break>break;</break></block_content>}</block></if></if_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>col</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>col</name> <operator>&lt;</operator> <name>m</name></expr>;</condition> <incr><expr><name>col</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
            <if_stmt><if>if<condition>(<expr><name><name>paper</name><index>[<expr><name>row</name></expr>]</index><index>[<expr><name>col</name></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition><block>{<block_content><continue>continue;</continue></block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name></type> <name>mock</name> <init>= <expr><name>paper</name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>int</name></type> <name>sr</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></decl>, <decl><type ref="prev"/><name>sc</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
            <if_stmt><if>if<condition>(<expr><name>row</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>mock</name><index>[<expr><name>row</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>col</name></expr>]</index></name> <operator>==</operator> <literal type="char">'#'</literal></expr>)</condition><block>{<block_content><expr_stmt><expr><name>sr</name> <operator>=</operator> <name>row</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><name>sc</name> <operator>=</operator> <name>col</name></expr>;</expr_stmt></block_content>}</block></if>
            <if type="elseif">else if<condition>(<expr><name>row</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>n</name> <operator>&amp;&amp;</operator> <name><name>mock</name><index>[<expr><name>row</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>col</name></expr>]</index></name> <operator>==</operator> <literal type="char">'#'</literal></expr>)</condition><block>{<block_content><expr_stmt><expr><name>sr</name> <operator>=</operator> <name>row</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><name>sc</name> <operator>=</operator> <name>col</name></expr>;</expr_stmt></block_content>}</block></if>
            <if type="elseif">else if<condition>(<expr><name>col</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>mock</name><index>[<expr><name>row</name></expr>]</index><index>[<expr><name>col</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'#'</literal></expr>)</condition><block>{<block_content><expr_stmt><expr><name>sr</name> <operator>=</operator> <name>row</name></expr>;</expr_stmt> <expr_stmt><expr><name>sc</name> <operator>=</operator> <name>col</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content>}</block></if>
            <if type="elseif">else if<condition>(<expr><name>col</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>m</name> <operator>&amp;&amp;</operator> <name><name>mock</name><index>[<expr><name>row</name></expr>]</index><index>[<expr><name>col</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'#'</literal></expr>)</condition><block>{<block_content><expr_stmt><expr><name>sr</name> <operator>=</operator> <name>row</name></expr>;</expr_stmt> <expr_stmt><expr><name>sc</name> <operator>=</operator> <name>col</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content>}</block></if></if_stmt>

            <expr_stmt><expr><name><name>mock</name><index>[<expr><name>row</name></expr>]</index><index>[<expr><name>col</name></expr>]</index></name> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>cnt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>sr</name></expr></argument>, <argument><expr><name>sc</name></expr></argument>, <argument><expr><name>mock</name></expr></argument>, <argument><expr><name>cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if<condition>(<expr><name>cnt</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>numPainted</name></expr>)</condition><block>{<block_content><expr_stmt><expr><name>ans</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <break>break;</break></block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></for>

    <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <name>ans</name> <operator>&lt;&lt;</operator> <name><name>std</name><operator>::</operator><name>endl</name></name></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
