<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="C:\Users\DRACO\PycharmProjects\Data-Science-Term-Project-1\data\leetcode_cpp\raw\158B-Taxi.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<comment type="line">//Generalization should be interesting</comment>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{<block_content>
    <decl_stmt><decl><type><name>long</name></type> <name>numGroups</name></decl>;</decl_stmt><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lu\n"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>numGroups</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>long</name></type> <name><name>groups</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name></type> <name>temp</name></decl>;</decl_stmt> <do>do<block>{<block_content><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lu"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><operator>++</operator><name><name>groups</name><index>[<expr><name>temp</name></expr>]</index></name></expr>;</expr_stmt></block_content>}</block>while<condition>(<expr><operator>--</operator><name>numGroups</name></expr>)</condition>;</do>

    <decl_stmt><decl><type><name>long</name></type> <name>total</name> <init>= <expr><name><name>groups</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>total</name> <operator>+=</operator> <name><name>groups</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>groups</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-=</operator> <name><name>groups</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>total</name> <operator>+=</operator> <name><name>groups</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>/</operator><literal type="number">2</literal> <operator>+</operator> <name><name>groups</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>%</operator><literal type="number">2</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>groups</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-=</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name><name>groups</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>%</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
    <if_stmt><if>if<condition>(<expr><name><name>groups</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content><expr_stmt><expr><name>total</name> <operator>+=</operator> <name><name>groups</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>/</operator><literal type="number">4</literal> <operator>+</operator> <operator>(</operator><name><name>groups</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>%</operator><literal type="number">4</literal> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt></block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lu\n"</literal></expr></argument>,<argument><expr><name>total</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
