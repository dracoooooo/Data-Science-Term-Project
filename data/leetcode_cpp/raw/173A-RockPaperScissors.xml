<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode_cpp\raw\173A-RockPaperScissors.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>

<function><type><name>long</name></type> <name>gcd</name> <parameter_list>(<parameter><decl><type><name>long</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<block_content><return>return <expr><ternary><condition><expr><operator>(</operator><name>b</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>a</name></expr> </then><else>: <expr><call><name>gcd</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>a</name><operator>%</operator><name>b</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return></block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{<block_content>

    <decl_stmt><decl><type><name>long</name></type> <name>n</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%ld\n"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>first</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></decl>;</decl_stmt> <expr_stmt><expr><call><name>getline</name><argument_list>(<argument><expr><name><name>std</name><operator>::</operator><name>cin</name></name></expr></argument>, <argument><expr><name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>second</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></decl>;</decl_stmt> <expr_stmt><expr><call><name>getline</name><argument_list>(<argument><expr><name><name>std</name><operator>::</operator><name>cin</name></name></expr></argument>, <argument><expr><name>second</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>long</name></type> <name>firstLength</name><argument_list>(<argument><expr><call><name><name>first</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>, <decl><type ref="prev"/><name>secondLength</name><argument_list>(<argument><expr><call><name><name>second</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name></type> <name>firstScore</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>, <decl><type ref="prev"/><name>secondScore</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>long</name></type> <name>lcm</name> <init>= <expr><name>firstLength</name> <operator>*</operator> <name>secondLength</name> <operator>/</operator> <call><name>gcd</name><argument_list>(<argument><expr><name>firstLength</name></expr></argument> , <argument><expr><name>secondLength</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>(<expr><name>n</name> <operator>&gt;=</operator> <name>lcm</name></expr>)</condition><block>{<block_content>
        <for>for<control>(<init><decl><type><name>long</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>lcm</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
            <decl_stmt><decl><type><name>char</name></type> <name>firstMove</name><argument_list>(<argument><expr><name><name>first</name><index>[<expr><name>k</name> <operator>%</operator> <name>firstLength</name></expr>]</index></name></expr></argument>)</argument_list></decl>, <decl><type ref="prev"/><name>secondMove</name><argument_list>(<argument><expr><name><name>second</name><index>[<expr><name>k</name> <operator>%</operator> <name>secondLength</name></expr>]</index></name></expr></argument>)</argument_list></decl>;</decl_stmt>
            <if_stmt><if>if<condition>(<expr><name>firstMove</name> <operator>==</operator> <literal type="char">'R'</literal> <operator>&amp;&amp;</operator> <name>secondMove</name> <operator>==</operator> <literal type="char">'P'</literal></expr>)</condition><block>{<block_content><expr_stmt><expr><operator>++</operator><name>secondScore</name></expr>;</expr_stmt></block_content>}</block></if>
            <if type="elseif">else if<condition>(<expr><name>firstMove</name> <operator>==</operator> <literal type="char">'R'</literal> <operator>&amp;&amp;</operator> <name>secondMove</name> <operator>==</operator> <literal type="char">'S'</literal></expr>)</condition><block>{<block_content><expr_stmt><expr><operator>++</operator><name>firstScore</name></expr>;</expr_stmt></block_content>}</block></if>
            <if type="elseif">else if<condition>(<expr><name>firstMove</name> <operator>==</operator> <literal type="char">'P'</literal> <operator>&amp;&amp;</operator> <name>secondMove</name> <operator>==</operator> <literal type="char">'R'</literal></expr>)</condition><block>{<block_content><expr_stmt><expr><operator>++</operator><name>firstScore</name></expr>;</expr_stmt></block_content>}</block></if>
            <if type="elseif">else if<condition>(<expr><name>firstMove</name> <operator>==</operator> <literal type="char">'P'</literal> <operator>&amp;&amp;</operator> <name>secondMove</name> <operator>==</operator> <literal type="char">'S'</literal></expr>)</condition><block>{<block_content><expr_stmt><expr><operator>++</operator><name>secondScore</name></expr>;</expr_stmt></block_content>}</block></if>
            <if type="elseif">else if<condition>(<expr><name>firstMove</name> <operator>==</operator> <literal type="char">'S'</literal> <operator>&amp;&amp;</operator> <name>secondMove</name> <operator>==</operator> <literal type="char">'R'</literal></expr>)</condition><block>{<block_content><expr_stmt><expr><operator>++</operator><name>secondScore</name></expr>;</expr_stmt></block_content>}</block></if>
            <if type="elseif">else if<condition>(<expr><name>firstMove</name> <operator>==</operator> <literal type="char">'S'</literal> <operator>&amp;&amp;</operator> <name>secondMove</name> <operator>==</operator> <literal type="char">'P'</literal></expr>)</condition><block>{<block_content><expr_stmt><expr><operator>++</operator><name>firstScore</name></expr>;</expr_stmt></block_content>}</block></if></if_stmt>
        </block_content>}</block></for>

        <expr_stmt><expr><name>firstScore</name> <operator>*=</operator> <operator>(</operator><name>n</name><operator>/</operator><name>lcm</name><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>secondScore</name> <operator>*=</operator> <operator>(</operator><name>n</name><operator>/</operator><name>lcm</name><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <for>for<control>(<init><decl><type><name>long</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <operator>(</operator><name>n</name> <operator>%</operator> <name>lcm</name><operator>)</operator></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <decl_stmt><decl><type><name>char</name></type> <name>firstMove</name><argument_list>(<argument><expr><name><name>first</name><index>[<expr><name>k</name> <operator>%</operator> <name>firstLength</name></expr>]</index></name></expr></argument>)</argument_list></decl>, <decl><type ref="prev"/><name>secondMove</name><argument_list>(<argument><expr><name><name>second</name><index>[<expr><name>k</name> <operator>%</operator> <name>secondLength</name></expr>]</index></name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <if_stmt><if>if<condition>(<expr><name>firstMove</name> <operator>==</operator> <literal type="char">'R'</literal> <operator>&amp;&amp;</operator> <name>secondMove</name> <operator>==</operator> <literal type="char">'P'</literal></expr>)</condition><block>{<block_content><expr_stmt><expr><operator>++</operator><name>secondScore</name></expr>;</expr_stmt></block_content>}</block></if>
        <if type="elseif">else if<condition>(<expr><name>firstMove</name> <operator>==</operator> <literal type="char">'R'</literal> <operator>&amp;&amp;</operator> <name>secondMove</name> <operator>==</operator> <literal type="char">'S'</literal></expr>)</condition><block>{<block_content><expr_stmt><expr><operator>++</operator><name>firstScore</name></expr>;</expr_stmt></block_content>}</block></if>
        <if type="elseif">else if<condition>(<expr><name>firstMove</name> <operator>==</operator> <literal type="char">'P'</literal> <operator>&amp;&amp;</operator> <name>secondMove</name> <operator>==</operator> <literal type="char">'R'</literal></expr>)</condition><block>{<block_content><expr_stmt><expr><operator>++</operator><name>firstScore</name></expr>;</expr_stmt></block_content>}</block></if>
        <if type="elseif">else if<condition>(<expr><name>firstMove</name> <operator>==</operator> <literal type="char">'P'</literal> <operator>&amp;&amp;</operator> <name>secondMove</name> <operator>==</operator> <literal type="char">'S'</literal></expr>)</condition><block>{<block_content><expr_stmt><expr><operator>++</operator><name>secondScore</name></expr>;</expr_stmt></block_content>}</block></if>
        <if type="elseif">else if<condition>(<expr><name>firstMove</name> <operator>==</operator> <literal type="char">'S'</literal> <operator>&amp;&amp;</operator> <name>secondMove</name> <operator>==</operator> <literal type="char">'R'</literal></expr>)</condition><block>{<block_content><expr_stmt><expr><operator>++</operator><name>secondScore</name></expr>;</expr_stmt></block_content>}</block></if>
        <if type="elseif">else if<condition>(<expr><name>firstMove</name> <operator>==</operator> <literal type="char">'S'</literal> <operator>&amp;&amp;</operator> <name>secondMove</name> <operator>==</operator> <literal type="char">'P'</literal></expr>)</condition><block>{<block_content><expr_stmt><expr><operator>++</operator><name>firstScore</name></expr>;</expr_stmt></block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%ld %ld\n"</literal></expr></argument>, <argument><expr><name>secondScore</name></expr></argument>, <argument><expr><name>firstScore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
