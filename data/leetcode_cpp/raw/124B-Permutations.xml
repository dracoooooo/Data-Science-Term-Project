<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode_cpp\raw\124B-Permutations.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{<block_content>

    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt> <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d %d\n"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>perm</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></decl>;</decl_stmt> <for>for<control>(<init><decl><type><name>int</name></type> <name>p</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>k</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block>{<block_content><expr_stmt><expr><name><name>perm</name><index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt></block_content>}</block></for>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>numbers</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><call><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>p</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>q</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>q</name> <operator>&lt;</operator> <name>k</name></expr>;</condition> <incr><expr><name>q</name><operator>++</operator></expr></incr>)</control><block>{<block_content><decl_stmt><decl><type><name>char</name></type> <name>temp</name></decl>;</decl_stmt> <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>numbers</name><index>[<expr><name>p</name></expr>]</index><index>[<expr><name>q</name></expr>]</index></name> <operator>=</operator> <name>temp</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block_content>}</block></for>
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <decl_stmt><decl><type><name>long</name></type> <name>minDiff</name><argument_list>(<argument><expr><literal type="number">1e10</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

    <do>do<block>{<block_content>
        <decl_stmt><decl><type><name>long</name></type> <name>minNum</name><argument_list>(<argument><expr><literal type="number">1e10</literal></expr></argument>)</argument_list></decl>, <decl><type ref="prev"/><name>maxNum</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

        <for>for<control>(<init><decl><type><name>int</name></type> <name>p</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
            <decl_stmt><decl><type><name>long</name></type> <name>current</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <for>for<control>(<init><decl><type><name>int</name></type> <name>q</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>q</name> <operator>&lt;</operator> <name>k</name></expr>;</condition> <incr><expr><name>q</name><operator>++</operator></expr></incr>)</control><block>{<block_content><expr_stmt><expr><name>current</name> <operator>=</operator> <literal type="number">10</literal> <operator>*</operator> <name>current</name> <operator>+</operator> <name><name>numbers</name><index>[<expr><name>p</name></expr>]</index><index>[<expr><name><name>perm</name><index>[<expr><name>q</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block_content>}</block></for>
            <if_stmt><if>if<condition>(<expr><name>current</name> <operator>&lt;</operator> <name>minNum</name></expr>)</condition><block>{<block_content><expr_stmt><expr><name>minNum</name> <operator>=</operator> <name>current</name></expr>;</expr_stmt></block_content>}</block></if></if_stmt>
            <if_stmt><if>if<condition>(<expr><name>current</name> <operator>&gt;</operator> <name>maxNum</name></expr>)</condition><block>{<block_content><expr_stmt><expr><name>maxNum</name> <operator>=</operator> <name>current</name></expr>;</expr_stmt></block_content>}</block></if></if_stmt>
        </block_content>}</block></for>

        <decl_stmt><decl><type><name>long</name></type> <name>diff</name> <init>= <expr><name>maxNum</name> <operator>-</operator> <name>minNum</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if<condition>(<expr><name>diff</name> <operator>&lt;</operator> <name>minDiff</name></expr>)</condition><block>{<block_content><expr_stmt><expr><name>minDiff</name> <operator>=</operator> <name>diff</name></expr>;</expr_stmt></block_content>}</block></if></if_stmt> 

    </block_content>}</block>while<condition>(<expr><call><name>next_permutation</name><argument_list>(<argument><expr><call><name><name>perm</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>perm</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>;</do>

    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%ld\n"</literal></expr></argument>, <argument><expr><name>minDiff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
