<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode_cpp\raw\175B-PlaneOfTanksPro.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>

<function><type><name>bool</name></type> <name>pairComp</name><parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>pair</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>A</name></decl></parameter>, <parameter><decl><type><name><name>std</name><operator>::</operator><name>pair</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>B</name></decl></parameter>)</parameter_list><block>{<block_content><return>return <expr><name><name>A</name><operator>.</operator><name>second</name></name> <operator>&gt;</operator> <name><name>B</name><operator>.</operator><name>second</name></name></expr>;</return></block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{<block_content>

    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt> <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cin</name></name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>map</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>bestScores</name></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>name</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>score</name></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cin</name></name> <operator>&gt;&gt;</operator> <name>name</name> <operator>&gt;&gt;</operator> <name>score</name></expr>;</expr_stmt>
        <comment type="line">//std::cout &lt;&lt; name &lt;&lt; "\t" &lt;&lt; score &lt;&lt; std::endl;</comment>
        <if_stmt><if>if<condition>(<expr><call><name><name>bestScores</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name><name>bestScores</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><block>{<block_content><expr_stmt><expr><call><name><name>bestScores</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>pair</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>score</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content>}</block></if>
        <if type="elseif">else if<condition>(<expr><name><name>bestScores</name><index>[<expr><name>name</name></expr>]</index></name> <operator>&lt;</operator> <name>score</name></expr>)</condition><block>{<block_content><expr_stmt><expr><name><name>bestScores</name><index>[<expr><name>name</name></expr>]</index></name> <operator>=</operator> <name>score</name></expr>;</expr_stmt></block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <decl_stmt><decl><type><name>int</name></type> <name>N</name> <init>= <expr><call><name><name>bestScores</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>pair</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>scoreVec</name><argument_list>(<argument><expr><name>N</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>map</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list><operator>::</operator><name>iterator</name></name></type> <name>mapIter</name> <init>= <expr><call><name><name>bestScores</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>index</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <for>for<control>(<init><expr><name>mapIter</name> <operator>=</operator> <call><name><name>bestScores</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</init> <condition><expr><name>mapIter</name> <operator>!=</operator> <call><name><name>bestScores</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>mapIter</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <expr_stmt><expr><name><name>scoreVec</name><index>[<expr><name>index</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>mapIter</name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name><name>scoreVec</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>scoreVec</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>pairComp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><name>N</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>lastScore</name> <init>= <expr><name><name>scoreVec</name><index>[<expr><name>N</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>second</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>title</name> <init>= <expr><literal type="string">"pro"</literal></expr></init></decl>;</decl_stmt>

    <for>for<control>(<init><decl><type><name>int</name></type> <name>p</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <name><name>scoreVec</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt>
        <if_stmt><if>if<condition>(<expr><name><name>scoreVec</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name>second</name> <operator>!=</operator> <name>lastScore</name></expr>)</condition><block>{<block_content>
            <if_stmt><if>if<condition>(<expr><name>p</name> <operator>&gt;</operator> <literal type="number">0.5</literal> <operator>*</operator> <name>N</name></expr>)</condition><block>{<block_content><expr_stmt><expr><name>title</name> <operator>=</operator> <literal type="string">"noob"</literal></expr>;</expr_stmt></block_content>}</block></if>
            <if type="elseif">else if<condition>(<expr><name>p</name> <operator>&gt;</operator> <literal type="number">0.2</literal> <operator>*</operator> <name>N</name></expr>)</condition><block>{<block_content><expr_stmt><expr><name>title</name> <operator>=</operator> <literal type="string">"random"</literal></expr>;</expr_stmt></block_content>}</block></if>
            <if type="elseif">else if<condition>(<expr><name>p</name> <operator>&gt;</operator> <literal type="number">0.1</literal> <operator>*</operator> <name>N</name></expr>)</condition><block>{<block_content><expr_stmt><expr><name>title</name> <operator>=</operator> <literal type="string">"average"</literal></expr>;</expr_stmt></block_content>}</block></if>
            <if type="elseif">else if<condition>(<expr><name>p</name> <operator>&gt;</operator> <literal type="number">0.01</literal> <operator>*</operator> <name>N</name></expr>)</condition><block>{<block_content><expr_stmt><expr><name>title</name> <operator>=</operator> <literal type="string">"hardcore"</literal></expr>;</expr_stmt></block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>lastScore</name> <operator>=</operator> <name><name>scoreVec</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name>second</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">//std::cout &lt;&lt; title &lt;&lt; "\t" &lt;&lt; scoreVec[p].second &lt;&lt; std::endl;</comment>
        <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <name>title</name> <operator>&lt;&lt;</operator> <name><name>std</name><operator>::</operator><name>endl</name></name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
