<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="C:\Users\DRACO\PycharmProjects\Data-Science-Term-Project-1\data\leetcode_cpp\raw\161B-Discounts.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>

<struct>struct <name>penstool</name><block>{<public type="default"><decl_stmt><decl><type><name>long</name></type> <name>order</name></decl>, <decl><type ref="prev"/><name>price</name></decl>, <decl><type ref="prev"/><name>kind</name></decl>;</decl_stmt></public>}</block>;</struct>
<function><type><name>bool</name></type> <name>compenstool</name><parameter_list>(<parameter><decl><type><name>penstool</name></type> <name>A</name></decl></parameter>, <parameter><decl><type><name>penstool</name></type> <name>B</name></decl></parameter>)</parameter_list><block>{<block_content>
    <if_stmt><if>if<condition>(<expr><name><name>A</name><operator>.</operator><name>kind</name></name> <operator>==</operator> <name><name>B</name><operator>.</operator><name>kind</name></name></expr>)</condition><block>{<block_content><return>return <expr><name><name>A</name><operator>.</operator><name>price</name></name> <operator>&gt;</operator> <name><name>B</name><operator>.</operator><name>price</name></name></expr>;</return></block_content>}</block></if>
    <if type="elseif">else if<condition>(<expr><name><name>A</name><operator>.</operator><name>kind</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block>{<block_content><return>return <expr><literal type="number">1</literal></expr>;</return></block_content>}</block></if>
    <if type="elseif">else if<condition>(<expr><name><name>B</name><operator>.</operator><name>kind</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block>{<block_content><return>return <expr><literal type="number">0</literal></expr>;</return></block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{<block_content>

    <decl_stmt><decl><type><name>long</name></type> <name>n</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>, <decl><type ref="prev"/><name>k</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%ld %ld\n"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>penstool</name></expr></argument>&gt;</argument_list></name></type> <name>itemVec</name><argument_list>(<argument><expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>long</name></type> <name>minPrice</name><argument_list>(<argument><expr><literal type="number">1e9</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>p</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>p</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <expr_stmt><expr><name><name>itemVec</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name>order</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%ld %ld\n"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>itemVec</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name>price</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>itemVec</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name>kind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>(<expr><name><name>itemVec</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name>price</name> <operator>&lt;</operator> <name>minPrice</name></expr>)</condition><block>{<block_content><expr_stmt><expr><name>minPrice</name> <operator>=</operator> <name><name>itemVec</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name>price</name></expr>;</expr_stmt></block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><operator>++</operator><call><name><name>itemVec</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>itemVec</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>compenstool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>double</name></type> <name>totalPrice</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>long</name></type> <name>p</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>p</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <if_stmt><if>if<condition>(<expr><name><name>itemVec</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name>kind</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>p</name> <operator>&lt;</operator> <name>k</name></expr>)</condition><block>{<block_content><expr_stmt><expr><name>totalPrice</name> <operator>+=</operator> <literal type="number">0.5</literal> <operator>*</operator> <name><name>itemVec</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name>price</name></expr>;</expr_stmt></block_content>}</block></if>
        <else>else<block>{<block_content><expr_stmt><expr><name>totalPrice</name> <operator>+=</operator> <name><name>itemVec</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name>price</name></expr>;</expr_stmt></block_content>}</block></else></if_stmt>
    </block_content>}</block></for>
    <if_stmt><if>if<condition>(<expr><name><name>itemVec</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>kind</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block>{<block_content><expr_stmt><expr><name>totalPrice</name> <operator>-=</operator> <literal type="number">0.5</literal> <operator>*</operator> <name>minPrice</name></expr>;</expr_stmt></block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%.1lf\n"</literal></expr></argument>, <argument><expr><name>totalPrice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>long</name></type> <name>p</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>k</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block>{<block_content><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"1 %ld\n"</literal></expr></argument>, <argument><expr><name><name>itemVec</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name>order</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content>}</block></for>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%ld "</literal></expr></argument>, <argument><expr><name>n</name> <operator>-</operator> <name>k</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <for>for<control>(<init><decl><type><name>long</name></type> <name>p</name> <init>= <expr><name>k</name></expr></init></decl>;</init> <condition><expr><name>p</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block>{<block_content><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%ld "</literal></expr></argument>, <argument><expr><name><name>itemVec</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name>order</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content>}</block></for>
    <expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
