<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="C:\Users\DRACO\PycharmProjects\Data-Science-Term-Project-1\data\leetcode_cpp\raw\8A-TrainAndPeter.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{<block_content>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>trip</name></decl>, <decl><type ref="prev"/><name>first</name></decl>, <decl><type ref="prev"/><name>second</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>getline</name><argument_list>(<argument><expr><name><name>std</name><operator>::</operator><name>cin</name></name></expr></argument>, <argument><expr><name>trip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>getline</name><argument_list>(<argument><expr><name><name>std</name><operator>::</operator><name>cin</name></name></expr></argument>, <argument><expr><name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>getline</name><argument_list>(<argument><expr><name><name>std</name><operator>::</operator><name>cin</name></name></expr></argument>, <argument><expr><name>second</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>long</name></type> <name>posF1</name> <init>= <expr><call><name><name>trip</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>first</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name></type> <name>posF2</name> <init>= <expr><call><name><name>trip</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>second</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>posF2</name> <operator>!=</operator> <name><name>std</name><operator>::</operator><name>string</name><operator>::</operator><name>npos</name></name></expr>)</condition><block>{<block_content>
        <decl_stmt><decl><type><name>long</name></type> <name>test</name> <init>= <expr><call><name><name>trip</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>second</name></expr></argument>, <argument><expr><name>posF2</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if<condition>(<expr><name>test</name> <operator>!=</operator> <name><name>std</name><operator>::</operator><name>string</name><operator>::</operator><name>npos</name></name></expr>)</condition><block>{<block_content><expr_stmt><expr><name>posF2</name> <operator>=</operator> <name>test</name></expr>;</expr_stmt></block_content>}</block></if>
        <else>else<block>{<block_content><break>break;</break></block_content>}</block></else></if_stmt>
    </block_content>}</block></while><empty_stmt>;</empty_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>forward</name> <init>= <expr><operator>(</operator><name>posF1</name> <operator>!=</operator> <name><name>std</name><operator>::</operator><name>string</name><operator>::</operator><name>npos</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>posF2</name> <operator>!=</operator> <name><name>std</name><operator>::</operator><name>string</name><operator>::</operator><name>npos</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>posF1</name> <operator>+</operator> <call><name><name>first</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>posF2</name><operator>)</operator></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>retTrip</name> <init>= <expr><name>trip</name></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>long</name></type> <name>p</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <call><name><name>trip</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block>{<block_content><expr_stmt><expr><name><name>retTrip</name><index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <name><name>trip</name><index>[<expr><call><name><name>trip</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>p</name></expr>]</index></name></expr>;</expr_stmt></block_content>}</block></for>
    <decl_stmt><decl><type><name>long</name></type> <name>posB1</name> <init>= <expr><call><name><name>retTrip</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>first</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name></type> <name>posB2</name> <init>= <expr><call><name><name>retTrip</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>second</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>posB2</name> <operator>!=</operator> <name><name>std</name><operator>::</operator><name>string</name><operator>::</operator><name>npos</name></name></expr>)</condition><block>{<block_content>
        <decl_stmt><decl><type><name>long</name></type> <name>test</name> <init>= <expr><call><name><name>retTrip</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>second</name></expr></argument>, <argument><expr><name>posB2</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if<condition>(<expr><name>test</name> <operator>!=</operator> <name><name>std</name><operator>::</operator><name>string</name><operator>::</operator><name>npos</name></name></expr>)</condition><block>{<block_content><expr_stmt><expr><name>posB2</name> <operator>=</operator> <name>test</name></expr>;</expr_stmt></block_content>}</block></if>
        <else>else<block>{<block_content><break>break;</break></block_content>}</block></else></if_stmt>
    </block_content>}</block></while><empty_stmt>;</empty_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>backward</name> <init>= <expr><operator>(</operator><name>posB1</name> <operator>!=</operator> <name><name>std</name><operator>::</operator><name>string</name><operator>::</operator><name>npos</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>posB2</name> <operator>!=</operator> <name><name>std</name><operator>::</operator><name>string</name><operator>::</operator><name>npos</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>posB1</name> <operator>+</operator> <call><name><name>first</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>posB2</name><operator>)</operator></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>(<expr><name>forward</name> <operator>&amp;&amp;</operator> <name>backward</name></expr>)</condition><block>{<block_content><expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"both"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content>}</block></if>
    <if type="elseif">else if<condition>(<expr><name>forward</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>backward</name></expr>)</condition><block>{<block_content><expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"forward"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content>}</block></if>
    <if type="elseif">else if<condition>(<expr><operator>!</operator><name>forward</name> <operator>&amp;&amp;</operator> <name>backward</name></expr>)</condition><block>{<block_content><expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"backward"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content>}</block></if>
    <else>else <block>{<block_content><expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"fantasy"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content>}</block></else></if_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
