<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode_cpp\raw\49B-Sum.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>

<function><type><name>bool</name></type> <name>check</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>r</name></decl></parameter>)</parameter_list><block>{<block_content>
    <while>while<condition>(<expr><name>a</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content><if_stmt><if>if<condition>(<expr><name>a</name> <operator>%</operator> <literal type="number">10</literal> <operator>&gt;=</operator> <name>r</name></expr>)</condition><block>{<block_content><return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content>}</block></if></if_stmt><empty_stmt>;</empty_stmt> <expr_stmt><expr><name>a</name> <operator>/=</operator> <literal type="number">10</literal></expr>;</expr_stmt></block_content>}</block></while>
    <while>while<condition>(<expr><name>b</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content><if_stmt><if>if<condition>(<expr><name>b</name> <operator>%</operator> <literal type="number">10</literal> <operator>&gt;=</operator> <name>r</name></expr>)</condition><block>{<block_content><return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content>}</block></if></if_stmt><empty_stmt>;</empty_stmt> <expr_stmt><expr><name>b</name> <operator>/=</operator> <literal type="number">10</literal></expr>;</expr_stmt></block_content>}</block></while>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>long</name></type> <name>getSumLength</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>r</name></decl></parameter>)</parameter_list><block>{<block_content>

    <decl_stmt><decl><type><name>long</name></type> <name>sum</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name></type> <name>mult</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt> <while>while<condition>(<expr><name>a</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content><expr_stmt><expr><name>sum</name> <operator>+=</operator> <name>mult</name> <operator>*</operator> <operator>(</operator><name>a</name> <operator>%</operator> <literal type="number">10</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>mult</name> <operator>*=</operator> <name>r</name></expr>;</expr_stmt> <expr_stmt><expr><name>a</name> <operator>/=</operator> <literal type="number">10</literal></expr>;</expr_stmt></block_content>}</block></while>
    <expr_stmt><expr><name>mult</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <while>while<condition>(<expr><name>b</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content><expr_stmt><expr><name>sum</name> <operator>+=</operator> <name>mult</name> <operator>*</operator> <operator>(</operator><name>b</name> <operator>%</operator> <literal type="number">10</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>mult</name> <operator>*=</operator> <name>r</name></expr>;</expr_stmt> <expr_stmt><expr><name>b</name> <operator>/=</operator> <literal type="number">10</literal></expr>;</expr_stmt></block_content>}</block></while>

    <decl_stmt><decl><type><name>long</name></type> <name>len</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>sum</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content><expr_stmt><expr><name>sum</name> <operator>/=</operator> <name>r</name></expr>;</expr_stmt> <expr_stmt><expr><operator>++</operator><name>len</name></expr>;</expr_stmt></block_content>}</block></while>
    <return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{<block_content>

    <decl_stmt><decl><type><specifier>const</specifier> <name>long</name></type> <name>N</name> <init>= <expr><literal type="number">1000</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt> <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%ld %ld"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>long</name></type> <name>maxLength</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>long</name></type> <name>r</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>r</name> <operator>&lt;=</operator> <name>N</name></expr>;</condition> <incr><expr><name>r</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>check</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content><continue>continue;</continue></block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>length</name> <init>= <expr><call><name>getSumLength</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>maxLength</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>maxLength</name> <operator>&gt;</operator> <name>length</name><operator>)</operator></expr> ?</condition><then> <expr><name>maxLength</name></expr> </then><else>: <expr><name>length</name></expr></else></ternary></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%ld\n"</literal></expr></argument>, <argument><expr><name>maxLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
