<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="C:\Users\DRACO\PycharmProjects\Data-Science-Term-Project-1\data\leetcode_cpp\raw\3A-ShortestPathOfTheKing.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{<block_content>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>source</name></decl>, <decl><type ref="prev"/><name>dest</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>getline</name><argument_list>(<argument><expr><name><name>std</name><operator>::</operator><name>cin</name></name></expr></argument>, <argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>getline</name><argument_list>(<argument><expr><name><name>std</name><operator>::</operator><name>cin</name></name></expr></argument>,<argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>horDist</name></decl>, <decl><type ref="prev"/><name>verDist</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>char</name></type> <name>horLet</name></decl>, <decl><type ref="prev"/><name>verLet</name></decl>;</decl_stmt>
    
    <if_stmt><if>if<condition>(<expr><name><name>source</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <name><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block>{<block_content><expr_stmt><expr><name>horDist</name> <operator>=</operator> <name><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>source</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>horLet</name> <operator>=</operator> <literal type="char">'R'</literal></expr>;</expr_stmt></block_content>}</block></if>
    <else>else<block>{<block_content><expr_stmt><expr><name>horDist</name> <operator>=</operator> <name><name>source</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>horLet</name> <operator>=</operator> <literal type="char">'L'</literal></expr>;</expr_stmt></block_content>}</block></else></if_stmt> 

    <if_stmt><if>if<condition>(<expr><name><name>source</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <name><name>dest</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block>{<block_content><expr_stmt><expr><name>verDist</name> <operator>=</operator> <name><name>dest</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>source</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>verLet</name> <operator>=</operator> <literal type="char">'U'</literal></expr>;</expr_stmt></block_content>}</block></if>
    <else>else<block>{<block_content><expr_stmt><expr><name>verDist</name> <operator>=</operator> <name><name>source</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>dest</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt><expr_stmt><expr><name>verLet</name> <operator>=</operator> <literal type="char">'D'</literal></expr>;</expr_stmt></block_content>}</block></else></if_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>numMoves</name> <init>= <expr><call><name><name>std</name><operator>::</operator><name>max</name></name><argument_list>(<argument><expr><name>horDist</name></expr></argument>, <argument><expr><name>verDist</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><name>numMoves</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <while>while<condition>(<expr><name>numMoves</name><operator>--</operator></expr>)</condition><block>{<block_content>
        <if_stmt><if>if<condition>(<expr><operator>--</operator><name>horDist</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content><expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <name>horLet</name></expr>;</expr_stmt></block_content>}</block></if></if_stmt>
        <if_stmt><if>if<condition>(<expr><operator>--</operator><name>verDist</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content><expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <name>verLet</name></expr>;</expr_stmt></block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <name><name>std</name><operator>::</operator><name>endl</name></name></expr>;</expr_stmt>
    </block_content>}</block></while>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
