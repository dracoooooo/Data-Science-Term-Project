<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode_cpp\raw\143A-HelpVasilisaTheWise2.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{<block_content>

    <decl_stmt><decl><type><name>int</name></type> <name>r1</name></decl>,<decl><type ref="prev"/><name>r2</name></decl>,<decl><type ref="prev"/><name>c1</name></decl>,<decl><type ref="prev"/><name>c2</name></decl>,<decl><type ref="prev"/><name>d1</name></decl>,<decl><type ref="prev"/><name>d2</name></decl>;</decl_stmt> <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d %d\n%d %d\n%d %d\n"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>r1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>d1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>d2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name>r1</name> <operator>+</operator> <name>c1</name> <operator>-</operator> <name>d2</name><operator>)</operator><operator>)</operator> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>(</operator><operator>(</operator><name>r1</name> <operator>+</operator> <name>c1</name> <operator>-</operator> <name>d2</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name>r1</name> <operator>+</operator> <name>c2</name> <operator>-</operator> <name>d1</name><operator>)</operator><operator>)</operator> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>(</operator><operator>(</operator><name>r1</name> <operator>+</operator> <name>c2</name> <operator>-</operator> <name>d1</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></init></decl> ;</decl_stmt> 
    <decl_stmt><decl><type><name>int</name></type> <name>z</name> <init>= <expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name>r2</name> <operator>+</operator> <name>c1</name> <operator>-</operator> <name>d1</name><operator>)</operator><operator>)</operator> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>(</operator><operator>(</operator><name>r2</name> <operator>+</operator> <name>c1</name> <operator>-</operator> <name>d1</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name>r2</name> <operator>+</operator> <name>c2</name> <operator>-</operator> <name>d2</name><operator>)</operator><operator>)</operator> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>(</operator><operator>(</operator><name>r2</name> <operator>+</operator> <name>c2</name> <operator>-</operator> <name>d2</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></init></decl> ;</decl_stmt>

    <if_stmt><if>if<condition>(<expr><name><name>x</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name><name>y</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name><name>z</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name><name>w</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name>x</name></expr></argument> &gt;</argument_list></name> <literal type="number">9</literal> <operator>||</operator> <name>y</name></expr></argument> &gt;</argument_list></name> <literal type="number">9</literal> <operator>||</operator> <name>z</name></expr></argument> &gt;</argument_list></name> <literal type="number">9</literal> <operator>||</operator> <name>w</name></expr></argument> &gt;</argument_list></name> <literal type="number">9</literal> <operator>||</operator> <name>x</name> <operator>==</operator> <name>y</name> <operator>||</operator> <name>x</name> <operator>==</operator> <name>z</name> <operator>||</operator> <name>x</name> <operator>==</operator> <name>w</name> <operator>||</operator> <name>y</name> <operator>==</operator> <name>z</name> <operator>||</operator> <name>y</name> <operator>==</operator> <name>w</name> <operator>||</operator> <name>z</name> <operator>==</operator> <name>w</name></expr>)</condition><block>{<block_content><expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"-1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content>}</block></if>
    <else>else<block>{<block_content><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d\n%d %d\n"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><name>z</name></expr></argument>,<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content>}</block></else></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
