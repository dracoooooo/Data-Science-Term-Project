<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="C:\Users\DRACO\PycharmProjects\Data-Science-Term-Project-1\data\leetcode_cpp\raw\2B-TheLeastRoundWay.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<function><type><name><name>std</name><operator>::</operator><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument> , <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>findFactors</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>input</name></decl></parameter>)</parameter_list><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>twos</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>, <decl><type ref="prev"/><name>fives</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name></type> <name>test</name> <init>= <expr><name>input</name></expr></init></decl>;</decl_stmt> <while>while<condition>(<expr><name>test</name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content><expr_stmt><expr><operator>++</operator><name>twos</name></expr>;</expr_stmt> <expr_stmt><expr><name>test</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content>}</block></while>
    <expr_stmt><expr><name>test</name> <operator>=</operator> <name>input</name></expr>;</expr_stmt> <while>while<condition>(<expr><name>test</name> <operator>%</operator> <literal type="number">5</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content><expr_stmt><expr><operator>++</operator><name>fives</name></expr>;</expr_stmt> <expr_stmt><expr><name>test</name> <operator>/=</operator> <literal type="number">5</literal></expr>;</expr_stmt></block_content>}</block></while>
    <return>return <expr><call><name><name>std</name><operator>::</operator><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>twos</name></expr></argument>, <argument><expr><name>fives</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>std</name><operator>::</operator><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>addPair</name><parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name><name>std</name><operator>::</operator><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<block_content><return>return <expr><call><name><name>std</name><operator>::</operator><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>first</name></name> <operator>+</operator> <name><name>b</name><operator>.</operator><name>first</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>.</operator><name>second</name></name> <operator>+</operator> <name><name>b</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><name><name>std</name><operator>::</operator><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>bestPair</name><parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name><name>std</name><operator>::</operator><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>minA</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>a</name><operator>.</operator><name>first</name></name> <operator>&lt;</operator> <name><name>a</name><operator>.</operator><name>second</name></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>a</name><operator>.</operator><name>first</name></name></expr> </then><else>: <expr><name><name>a</name><operator>.</operator><name>second</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>maxA</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>a</name><operator>.</operator><name>first</name></name> <operator>&lt;</operator> <name><name>a</name><operator>.</operator><name>second</name></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>a</name><operator>.</operator><name>second</name></name></expr> </then><else>: <expr><name><name>a</name><operator>.</operator><name>first</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>minB</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>b</name><operator>.</operator><name>first</name></name> <operator>&lt;</operator> <name><name>b</name><operator>.</operator><name>second</name></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>b</name><operator>.</operator><name>first</name></name></expr> </then><else>: <expr><name><name>b</name><operator>.</operator><name>second</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>maxB</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>b</name><operator>.</operator><name>first</name></name> <operator>&lt;</operator> <name><name>b</name><operator>.</operator><name>second</name></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>b</name><operator>.</operator><name>second</name></name></expr> </then><else>: <expr><name><name>b</name><operator>.</operator><name>first</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>(<expr><name>minA</name> <operator>&lt;</operator> <name>minB</name> <operator>||</operator> <operator>(</operator><name>minA</name> <operator>==</operator> <name>minB</name> <operator>&amp;&amp;</operator> <name>maxA</name> <operator>&lt;</operator> <name>maxB</name><operator>)</operator></expr>)</condition><block>{<block_content><return>return <expr><name>a</name></expr>;</return></block_content>}</block></if> <else>else <block>{<block_content><return>return <expr><name>b</name></expr>;</return></block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{<block_content>

    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt> <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>long</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>matrix</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><call><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>long</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>state</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><call><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><call><name><name>std</name><operator>::</operator><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>move</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><call><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="char">'N'</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>row</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>row</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>row</name><operator>++</operator></expr></incr>)</control><block>{<block_content><for>for<control>(<init><decl><type><name>int</name></type> <name>col</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>col</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>col</name><operator>++</operator></expr></incr>)</control><block>{<block_content><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%ld"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>matrix</name><index>[<expr><name>row</name></expr>]</index><index>[<expr><name>col</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content>}</block></for></block_content>}</block></for>
    <expr_stmt><expr><name><name>state</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>findFactors</name><argument_list>(<argument><expr><name><name>matrix</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

   <for>for<control>(<init><decl><type><name>int</name></type> <name>row</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>row</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>row</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
       <expr_stmt><expr><name><name>state</name><index>[<expr><name>row</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>addPair</name><argument_list>(<argument><expr><name><name>state</name><index>[<expr><name>row</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument> , <argument><expr><call><name>findFactors</name><argument_list>(<argument><expr><name><name>matrix</name><index>[<expr><name>row</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><name><name>move</name><index>[<expr><name>row</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'D'</literal></expr>;</expr_stmt>
   </block_content>}</block></for>

   <for>for<control>(<init><decl><type><name>int</name></type> <name>col</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>col</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>col</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
       <expr_stmt><expr><name><name>state</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>col</name></expr>]</index></name> <operator>=</operator> <call><name>addPair</name><argument_list>(<argument><expr><name><name>state</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>col</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument> , <argument><expr><call><name>findFactors</name><argument_list>(<argument><expr><name><name>matrix</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>col</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><name><name>move</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>col</name></expr>]</index></name> <operator>=</operator> <literal type="char">'R'</literal></expr>;</expr_stmt>
   </block_content>}</block></for>

   <for>for<control>(<init><decl><type><name>int</name></type> <name>row</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>row</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>row</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
       <for>for<control>(<init><decl><type><name>int</name></type> <name>col</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>col</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>col</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
           <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>current</name> <init>= <expr><call><name>findFactors</name><argument_list>(<argument><expr><name><name>matrix</name><index>[<expr><name>row</name></expr>]</index><index>[<expr><name>col</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
           <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>fromLeft</name>   <init>= <expr><call><name>addPair</name><argument_list>(<argument><expr><name>current</name></expr></argument>, <argument><expr><name><name>state</name><index>[<expr><name>row</name></expr>]</index><index>[<expr><name>col</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
           <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>fromUp</name> <init>= <expr><call><name>addPair</name><argument_list>(<argument><expr><name>current</name></expr></argument>, <argument><expr><name><name>state</name><index>[<expr><name>row</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>col</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
           <expr_stmt><expr><name><name>state</name><index>[<expr><name>row</name></expr>]</index><index>[<expr><name>col</name></expr>]</index></name> <operator>=</operator> <call><name>bestPair</name><argument_list>(<argument><expr><name>fromLeft</name></expr></argument>, <argument><expr><name>fromUp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Row: %d Col: %d\t   state: %d %d\n"</literal></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name><name>state</name><index>[<expr><name>row</name></expr>]</index><index>[<expr><name>col</name></expr>]</index></name><operator>.</operator><name>first</name></expr></argument>, <argument><expr><name><name>state</name><index>[<expr><name>row</name></expr>]</index><index>[<expr><name>col</name></expr>]</index></name><operator>.</operator><name>second</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Row: %d Col: %d\t   LEFT : %d %d\n"</literal></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name><name>fromLeft</name><operator>.</operator><name>first</name></name></expr></argument>, <argument><expr><name><name>fromLeft</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Row: %d Col: %d\t   UP   : %d %d\n"</literal></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name><name>fromUp</name><operator>.</operator><name>first</name></name></expr></argument>, <argument><expr><name><name>fromUp</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <if_stmt><if>if<condition>(<expr><name><name>state</name><index>[<expr><name>row</name></expr>]</index><index>[<expr><name>col</name></expr>]</index></name> <operator>==</operator> <name>fromLeft</name></expr>)</condition><block>{<block_content><expr_stmt><expr><name><name>move</name><index>[<expr><name>row</name></expr>]</index><index>[<expr><name>col</name></expr>]</index></name>  <operator>=</operator> <literal type="char">'R'</literal></expr>;</expr_stmt></block_content>}</block></if></if_stmt> 
           <if_stmt><if>if<condition>(<expr><name><name>state</name><index>[<expr><name>row</name></expr>]</index><index>[<expr><name>col</name></expr>]</index></name> <operator>==</operator> <name>fromUp</name></expr>)</condition><block>{<block_content><expr_stmt><expr><name><name>move</name><index>[<expr><name>row</name></expr>]</index><index>[<expr><name>col</name></expr>]</index></name>  <operator>=</operator> <literal type="char">'D'</literal></expr>;</expr_stmt></block_content>}</block></if></if_stmt> 
       </block_content>}</block></for>
   </block_content>}</block></for>

   <decl_stmt><decl><type><name>int</name></type> <name>cRow</name><argument_list>(<argument><expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></decl>, <decl><type ref="prev"/><name>cCol</name><argument_list>(<argument><expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
   <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>&gt;</argument_list></name></type> <name>path</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
   <while>while<condition>(<expr><name>cRow</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>cCol</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
       <comment type="line">//printf("%d\t==&gt;%c&lt;==\n", cRow + cCol, move[cRow][cCol]);</comment>
       <expr_stmt><expr><name><name>path</name><index>[<expr><name>cRow</name> <operator>+</operator> <name>cCol</name></expr>]</index></name> <operator>=</operator> <name><name>move</name><index>[<expr><name>cRow</name></expr>]</index><index>[<expr><name>cCol</name></expr>]</index></name></expr>;</expr_stmt>
       <if_stmt><if>if<condition>(<expr><name><name>move</name><index>[<expr><name>cRow</name></expr>]</index><index>[<expr><name>cCol</name></expr>]</index></name> <operator>==</operator> <literal type="char">'R'</literal></expr>)</condition><block>{<block_content><expr_stmt><expr><operator>--</operator><name>cCol</name></expr>;</expr_stmt></block_content>}</block></if> <else>else <block>{<block_content><expr_stmt><expr><operator>--</operator><name>cRow</name></expr>;</expr_stmt></block_content>}</block></else></if_stmt>
   </block_content>}</block></while>

   <decl_stmt><decl><type><name>int</name></type> <name>total</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>state</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>first</name> <operator>&lt;</operator> <name><name>state</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>second</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>state</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>first</name></expr> </then><else>: <expr><name><name>state</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>second</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
   <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><name>total</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   <for>for<control>(<init><decl><type><name>int</name></type> <name>p</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <call><name><name>path</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block>{<block_content><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><name><name>path</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content>}</block></for><empty_stmt>;</empty_stmt> <expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


    <comment type="line">//for(int row = 0; row &lt; n; row++){for(int col = 0; col &lt; n; col++){printf("%ld\t", matrix[row][col]);}; puts("");}</comment>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>row</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>row</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>row</name><operator>++</operator></expr></incr>)</control><block>{<block_content><for>for<control>(<init><decl><type><name>int</name></type> <name>col</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>col</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>col</name><operator>++</operator></expr></incr>)</control><block>{<block_content><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%c\t"</literal></expr></argument>, <argument><expr><name><name>move</name><index>[<expr><name>row</name></expr>]</index><index>[<expr><name>col</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content>}</block></for><empty_stmt>;</empty_stmt> <expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content>}</block></for><empty_stmt>;</empty_stmt> <expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"====="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>row</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>row</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>row</name><operator>++</operator></expr></incr>)</control><block>{<block_content><for>for<control>(<init><decl><type><name>int</name></type> <name>col</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>col</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>col</name><operator>++</operator></expr></incr>)</control><block>{<block_content><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d,%d\t"</literal></expr></argument>, <argument><expr><name><name>state</name><index>[<expr><name>row</name></expr>]</index><index>[<expr><name>col</name></expr>]</index></name><operator>.</operator><name>first</name></expr></argument>, <argument><expr><name><name>state</name><index>[<expr><name>row</name></expr>]</index><index>[<expr><name>col</name></expr>]</index></name><operator>.</operator><name>second</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content>}</block></for><empty_stmt>;</empty_stmt> <expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content>}</block></for><empty_stmt>;</empty_stmt> <expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"====="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
