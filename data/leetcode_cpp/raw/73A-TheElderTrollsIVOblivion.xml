<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="C:\Users\DRACO\PycharmProjects\Data-Science-Term-Project-1\data\leetcode_cpp\raw\73A-TheElderTrollsIVOblivion.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{<block_content>

    <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>z</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt> <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%ld %ld %ld %ld"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>z</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>long</name></expr></argument>&gt;</argument_list></name></type> <name>dim</name><argument_list>(<argument><expr><name>N</name></expr></argument>)</argument_list></decl>;</decl_stmt><expr_stmt><expr><name><name>dim</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>dim</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>dim</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>z</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name><name>dim</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>dim</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>long</name></type> <name>a</name> <init>= <expr><name>m</name> <operator>/</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt> <if_stmt><if>if<condition>(<expr><name>a</name> <operator>&gt;</operator> <name><name>dim</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block>{<block_content><expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>dim</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>long</name></type> <name>b</name> <init>= <expr><operator>(</operator><name>m</name> <operator>-</operator> <name>a</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt> <if_stmt><if>if<condition>(<expr><name>b</name> <operator>&gt;</operator> <name><name>dim</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block>{<block_content><expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>dim</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>long</name></type> <name>c</name> <init>= <expr><operator>(</operator><name>m</name> <operator>-</operator> <name>a</name> <operator>-</operator> <name>b</name><operator>)</operator> <operator>/</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt> <if_stmt><if>if<condition>(<expr><name>c</name> <operator>&gt;</operator> <name><name>dim</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block>{<block_content><expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>dim</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content>}</block></if></if_stmt>
    
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>output</name> <init>= <expr><operator>(</operator><literal type="number">1LL</literal> <operator>+</operator> <name>a</name><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">1LL</literal> <operator>+</operator> <name>b</name><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">1LL</literal> <operator>+</operator> <name>c</name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld\n"</literal></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
