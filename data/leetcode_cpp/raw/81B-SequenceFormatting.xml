<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode_cpp\raw\81B-SequenceFormatting.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{<block_content>

    <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MAX</name> <init>= <expr><literal type="number">1000</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>s</name><index>[<expr><name>MAX</name></expr>]</index></name></decl>;</decl_stmt> <expr_stmt><expr><call><name>gets</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>count</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>, <decl><type ref="prev"/><name>cur</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>, <decl><type ref="prev"/><name>prev</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

    <for>for<control>(<init><decl><type><name>int</name></type> <name>p</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>s</name><index>[<expr><name>p</name></expr>]</index></name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <if_stmt><if>if<condition>(<expr><name><name>s</name><index>[<expr><name>p</name></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><block>{<block_content><continue>continue;</continue></block_content>}</block></if></if_stmt>
        <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>s</name><index>[<expr><name>p</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><name>p</name></expr>]</index></name> <operator>&lt;=</operator> <literal type="char">'9'</literal><operator>)</operator></expr>)</condition><block>{<block_content><expr_stmt><expr><name>cur</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content>}</block></if>
        <if type="elseif">else if<condition>(<expr><name><name>s</name><index>[<expr><name>p</name></expr>]</index></name> <operator>==</operator> <literal type="char">','</literal></expr>)</condition><block>{<block_content><expr_stmt><expr><name>cur</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content>}</block></if>
        <else>else<block>{<block_content><expr_stmt><expr><name>cur</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt> <expr_stmt><expr><name>count</name> <operator>=</operator> <operator>(</operator><name>count</name> <operator>%</operator> <literal type="number">3</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content>}</block></else></if_stmt>
        <if_stmt><if>if<condition>(<expr><operator>(</operator><name>prev</name> <operator>&amp;&amp;</operator> <name>cur</name> <operator>==</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name>count</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>p</name> <operator>&amp;&amp;</operator> <name>prev</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>cur</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><name>p</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal><operator>)</operator> <operator>||</operator> <name>prev</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block>{<block_content><expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>      
        <expr_stmt><expr><name>prev</name> <operator>=</operator> <name>cur</name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
