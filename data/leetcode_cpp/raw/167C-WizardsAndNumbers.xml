<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode_cpp\raw\167C-WizardsAndNumbers.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>

<function><type><name>bool</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<block_content>

    <if_stmt><if>if<condition>(<expr><name>a</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content><return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>(<expr><call><name>dfs</name><argument_list>(<argument><expr><name>b</name> <operator>%</operator> <name>a</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content><return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>(<expr><name>a</name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block>{<block_content><return>return <expr><operator>(</operator><name>b</name> <operator>/</operator> <name>a</name><operator>)</operator> <operator>%</operator> <literal type="number">2</literal></expr>;</return></block_content>}</block></if></if_stmt>
    <return>return <expr><operator>(</operator><name>b</name> <operator>/</operator> <name>a</name><operator>)</operator> <operator>%</operator> <operator>(</operator><name>a</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">2</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{<block_content>

    <decl_stmt><decl><type><name>long</name></type> <name>t</name></decl>;</decl_stmt> <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%ld\n"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition><block>{<block_content>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt> <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld %lld\n"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>(<expr><name>a</name> <operator>&gt;</operator> <name>b</name></expr>)</condition><block>{<block_content><decl_stmt><decl><type><name>int64_t</name></type> <name>c</name> <init>= <expr><name>a</name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt> <expr_stmt><expr><name>b</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt></block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <operator>(</operator><ternary><condition><expr><call><name>dfs</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"Second"</literal></expr> </then><else>: <expr><literal type="string">"First"</literal></expr></else></ternary><operator>)</operator> <operator>&lt;&lt;</operator> <name><name>std</name><operator>::</operator><name>endl</name></name></expr>;</expr_stmt>
    </block_content>}</block></while>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
