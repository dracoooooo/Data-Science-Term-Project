<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="C:\Users\DRACO\PycharmProjects\Data-Science-Term-Project-1\data\leetcode_cpp\raw\74B-Train.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt> <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cin</name></name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>m</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>dirstr</name></decl>;</decl_stmt> <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cin</name></name> <operator>&gt;&gt;</operator> <name>dirstr</name> <operator>&gt;&gt;</operator> <name>dirstr</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>state</name></decl>;</decl_stmt> <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cin</name></name> <operator>&gt;&gt;</operator> <name>state</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>dir</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>dirstr</name> <operator>==</operator> <literal type="string">"head"</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>p</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <call><name><name>state</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <if_stmt><if>if<condition>(<expr><name><name>state</name><index>[<expr><name>p</name></expr>]</index></name> <operator>==</operator> <literal type="char">'1'</literal></expr>)</condition><block>{<block_content>
            <expr_stmt><expr><name>k</name> <operator>+=</operator> <name>dir</name></expr>;</expr_stmt>
            <if_stmt><if>if<condition>(<expr><name>k</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>k</name> <operator>==</operator> <name>n</name></expr>)</condition><block>{<block_content><expr_stmt><expr><name>dir</name> <operator>=</operator> <operator>-</operator><name>dir</name></expr>;</expr_stmt></block_content>}</block></if></if_stmt>
            <if_stmt><if>if<condition>(<expr><name>k</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block>{<block_content><expr_stmt><expr><name>m</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt></block_content>}</block></if>
            <if type="elseif">else if<condition>(<expr><name>k</name> <operator>==</operator> <name>n</name></expr>)</condition><block>{<block_content><expr_stmt><expr><name>m</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content>}</block></if>
            <else>else<block>{<block_content><expr_stmt><expr><name>m</name> <operator>=</operator> <name>k</name> <operator>-</operator> <name>dir</name></expr>;</expr_stmt></block_content>}</block></else></if_stmt>
        </block_content>}</block></if>
        <else>else<block>{<block_content>
            <if_stmt><if>if<condition>(<expr><name>k</name> <operator>&gt;</operator> <name>m</name> <operator>&amp;&amp;</operator> <name>m</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block>{<block_content><expr_stmt><expr><operator>--</operator><name>m</name></expr>;</expr_stmt></block_content>}</block></if></if_stmt>
            <if_stmt><if>if<condition>(<expr><name>k</name> <operator>&lt;</operator> <name>m</name> <operator>&amp;&amp;</operator> <name>m</name> <operator>!=</operator> <name>n</name></expr>)</condition><block>{<block_content><expr_stmt><expr><operator>++</operator><name>m</name></expr>;</expr_stmt></block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>k</name> <operator>+=</operator> <name>dir</name></expr>;</expr_stmt>
            <if_stmt><if>if<condition>(<expr><name>k</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>k</name> <operator>==</operator> <name>n</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>dir</name> <operator>=</operator> <operator>-</operator><name>dir</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></else></if_stmt>

        <if_stmt><if>if<condition>(<expr><name>k</name> <operator>==</operator> <name>m</name></expr>)</condition><block>{<block_content><expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <literal type="string">"Controller "</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>p</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name><name>std</name><operator>::</operator><name>endl</name></name></expr>;</expr_stmt> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <literal type="string">"Stowaway"</literal> <operator>&lt;&lt;</operator> <name><name>std</name><operator>::</operator><name>endl</name></name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
