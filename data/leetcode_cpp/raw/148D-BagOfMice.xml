<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode_cpp\raw\148D-BagOfMice.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{<block_content>

    <decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt> <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d %d\n"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>w</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name><name>prob</name><index>[<expr><name>w</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>b</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>p</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>p</name> <operator>&lt;=</operator> <name>w</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block>{<block_content><for>for<control>(<init><decl><type><name>int</name></type> <name>q</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>q</name> <operator>&lt;=</operator> <name>b</name></expr>;</condition> <incr><expr><name>q</name><operator>++</operator></expr></incr>)</control><block>{<block_content><for>for<control>(<init><decl><type><name>int</name></type> <name>r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>r</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>r</name><operator>++</operator></expr></incr>)</control><block>{<block_content><expr_stmt><expr><name><name>prob</name><index>[<expr><name>p</name></expr>]</index><index>[<expr><name>q</name></expr>]</index><index>[<expr><name>r</name></expr>]</index></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt></block_content>}</block></for></block_content>}</block></for></block_content>}</block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>p</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>p</name> <operator>&lt;=</operator> <name>w</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block>{<block_content><expr_stmt><expr><name><name>prob</name><index>[<expr><name>p</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content>}</block></for>
    
    <for>for<control>(<init><decl><type><name>int</name></type> <name>p</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>p</name> <operator>&lt;=</operator> <name>w</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>q</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>q</name> <operator>&lt;=</operator> <name>b</name></expr>;</condition> <incr><expr><name>q</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
            <decl_stmt><decl><type><name>double</name></type> <name>win</name> <init>= <expr><literal type="number">1.0</literal> <operator>*</operator> <name>p</name> <operator>/</operator> <operator>(</operator><name>p</name> <operator>+</operator> <name>q</name><operator>)</operator></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>nowin</name> <init>= <expr><literal type="number">1.0</literal> <operator>-</operator> <name>win</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>prob</name><index>[<expr><name>p</name></expr>]</index><index>[<expr><name>q</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>win</name> <operator>+</operator> <name>nowin</name> <operator>*</operator> <name><name>prob</name><index>[<expr><name>p</name></expr>]</index><index>[<expr><name>q</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>double</name></type> <name>outWhite</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>q</name> <operator>&gt;=</operator> <literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><literal type="number">1.0</literal> <operator>*</operator> <name>p</name> <operator>/</operator> <operator>(</operator><name>p</name> <operator>+</operator> <name>q</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr> </then><else>: <expr><literal type="number">1.0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>outBlack</name> <init>= <expr><literal type="number">1.0</literal> <operator>-</operator> <name>outWhite</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>prob</name><index>[<expr><name>p</name></expr>]</index><index>[<expr><name>q</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>nowin</name> <operator>*</operator> <operator>(</operator><name>outWhite</name> <operator>*</operator> <name><name>prob</name><index>[<expr><name>p</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>q</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>outBlack</name> <operator>*</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>q</name> <operator>&gt;=</operator> <literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>prob</name><index>[<expr><name>p</name></expr>]</index><index>[<expr><name>q</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0.0</literal></expr></else></ternary><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%.12lf\n"</literal></expr></argument>, <argument><expr><name><name>prob</name><index>[<expr><name>w</name></expr>]</index><index>[<expr><name>b</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
