<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode_cpp\raw\117A-Elevator.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{<block_content>

    <decl_stmt><decl><type><name>long</name></type> <name>n</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>, <decl><type ref="prev"/><name>m</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%ld %ld"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>n</name><operator>--</operator></expr>)</condition><block>{<block_content>
        <decl_stmt><decl><type><name>long</name></type> <name>s</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>, <decl><type ref="prev"/><name>f</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>, <decl><type ref="prev"/><name>t</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>, <decl><type ref="prev"/><name>output</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%ld %ld %ld"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>f</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>(<expr><name>s</name> <operator>==</operator> <name>f</name></expr>)</condition><block>{<block_content><expr_stmt><expr><name>output</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt></block_content>}</block></if>
        <else>else<block>{<block_content>
            <decl_stmt><decl><type><name>long</name></type> <name>T</name> <init>= <expr><literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>m</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt> <comment type="line">//Period of a round trip</comment>
            <expr_stmt><expr><operator>--</operator><name>s</name></expr>;</expr_stmt> <expr_stmt><expr><operator>--</operator><name>f</name></expr>;</expr_stmt>   <comment type="line">//For modulo arithmetic to work</comment>
            <expr_stmt><expr><name>output</name> <operator>=</operator> <operator>(</operator><name>t</name><operator>/</operator><name>T</name><operator>)</operator> <operator>*</operator> <name>T</name></expr>;</expr_stmt>  
            <if_stmt><if>if<condition>(<expr><name>s</name> <operator>&lt;</operator> <name>f</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>output</name> <operator>+</operator> <name>s</name><operator>)</operator> <operator>&lt;</operator> <name>t</name></expr>)</condition><block>{<block_content><expr_stmt><expr><name>output</name> <operator>+=</operator> <name>T</name></expr>;</expr_stmt></block_content>}</block></if>
            <if type="elseif">else if<condition>(<expr><name>s</name> <operator>&gt;</operator> <name>f</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>output</name> <operator>+</operator> <name>T</name> <operator>-</operator> <name>s</name><operator>)</operator> <operator>&lt;</operator> <name>t</name></expr>)</condition><block>{<block_content><expr_stmt><expr><name>output</name> <operator>+=</operator> <name>T</name></expr>;</expr_stmt></block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>output</name> <operator>+=</operator> <ternary><condition><expr><operator>(</operator><name>s</name> <operator>&lt;</operator> <name>f</name><operator>)</operator></expr> ?</condition><then> <expr><name>f</name></expr> </then><else>: <expr><operator>(</operator><name>T</name> <operator>-</operator> <name>f</name><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%ld\n"</literal></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
