<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode_cpp\raw\43A-Football.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{<block_content>

    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt> <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>first</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></decl>, <decl><type ref="prev"/><name>second</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></decl>, <decl><type ref="prev"/><name>temp</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name><name>goals</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

    <while>while<condition>(<expr><name>n</name><operator>--</operator></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><call><name>getline</name><argument_list>(<argument><expr><name><name>std</name><operator>::</operator><name>cin</name></name></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>(<expr><name>first</name> <operator>==</operator> <literal type="string">""</literal></expr>)</condition><block>{<block_content><expr_stmt><expr><name>first</name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt></block_content>}</block></if>
        <if type="elseif">else if<condition>(<expr><name>temp</name> <operator>!=</operator> <name>first</name> <operator>&amp;&amp;</operator> <name>second</name> <operator>==</operator> <literal type="string">""</literal></expr>)</condition><block>{<block_content><expr_stmt><expr><name>second</name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt></block_content>}</block></if></if_stmt>
        <expr_stmt><expr><ternary><condition><expr><operator>(</operator><name>temp</name> <operator>==</operator> <name>first</name><operator>)</operator></expr> ?</condition><then> <expr><operator>++</operator><name><name>goals</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> </then><else>: <expr><operator>++</operator><name><name>goals</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><name>temp</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>goals</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <name><name>goals</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><name>first</name></expr> </then><else>: <expr><name>second</name></expr></else></ternary></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <name>temp</name> <operator>&lt;&lt;</operator> <name><name>std</name><operator>::</operator><name>endl</name></name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
