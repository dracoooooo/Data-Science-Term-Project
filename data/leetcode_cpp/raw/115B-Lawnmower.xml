<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode_cpp\raw\115B-Lawnmower.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<function><type><name>long</name></type> <name>abs</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{<block_content><return>return <expr><ternary><condition><expr><name>x</name><operator>&gt;=</operator><literal type="number">0</literal></expr>?</condition><then><expr><name>x</name></expr></then><else>:<expr><operator>-</operator><name>x</name></expr></else></ternary></expr>;</return></block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{<block_content>

    <decl_stmt><decl><type><name>long</name></type> <name>rows</name></decl>, <decl><type ref="prev"/><name>cols</name></decl>;</decl_stmt> <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cin</name></name> <operator>&gt;&gt;</operator> <name>rows</name> <operator>&gt;&gt;</operator> <name>cols</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name></type> <name>m</name><argument_list>(<argument><expr><name>rows</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>p</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>rows</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block>{<block_content><expr_stmt><expr><name><name>std</name><operator>::</operator><name>cin</name></name> <operator>&gt;&gt;</operator> <name><name>m</name><index>[<expr><name>p</name></expr>]</index></name></expr>;</expr_stmt></block_content>}</block></for>

    <decl_stmt><decl><type><name>long</name></type> <name>rr</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>, <decl><type ref="prev"/><name>cc</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>, <decl><type ref="prev"/><name>res</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>long</name></type> <name>row</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>row</name> <operator>&lt;</operator> <name>rows</name></expr>;</condition> <incr><expr><name>row</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <decl_stmt><decl><type><name>long</name></type> <name>startCol</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>row</name> <operator>%</operator> <literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>cols</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>stepCol</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>row</name> <operator>%</operator> <literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>long</name></type> <name>col</name> <init>= <expr><name>startCol</name></expr></init></decl>;</init> <condition><expr><name>col</name> <operator>&gt;=</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>col</name> <operator>&lt;</operator> <name>cols</name></expr>;</condition> <incr><expr><name>col</name> <operator>+=</operator> <name>stepCol</name></expr></incr>)</control><block>{<block_content>
            <if_stmt><if>if<condition>(<expr><name><name>m</name><index>[<expr><name>row</name></expr>]</index><index>[<expr><name>col</name></expr>]</index></name><operator>==</operator><literal type="char">'W'</literal></expr>)</condition><block>{<block_content>
                <decl_stmt><decl><type><name>long</name></type> <name>xdiff</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>cc</name> <operator>&gt;</operator> <name>col</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>cc</name> <operator>-</operator> <name>col</name><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><name>col</name> <operator>-</operator> <name>cc</name><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>long</name></type> <name>ydiff</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>rr</name> <operator>&gt;</operator> <name>row</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>rr</name> <operator>-</operator> <name>row</name><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><name>row</name> <operator>-</operator> <name>rr</name><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>res</name> <operator>+=</operator> <name>xdiff</name> <operator>+</operator> <name>ydiff</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>rr</name> <operator>=</operator> <name>row</name></expr>;</expr_stmt> <expr_stmt><expr><name>cc</name> <operator>=</operator> <name>col</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></for>

    <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <name>res</name> <operator>&lt;&lt;</operator> <name><name>std</name><operator>::</operator><name>endl</name></name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
