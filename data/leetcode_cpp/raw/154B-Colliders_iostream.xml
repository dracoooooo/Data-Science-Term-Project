<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode_cpp\raw\154B-Colliders_iostream.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>


<function><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>long</name></expr></argument>&gt;</argument_list></name></type> <name>getFactors</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name></type> <name>qprime</name></decl></parameter>)</parameter_list><block>{<block_content>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>long</name></expr></argument>&gt;</argument_list></name></type> <name>ans</name></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>long</name></type> <name>p</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>p</name> <operator>*</operator> <name>p</name> <operator>&lt;=</operator> <name>x</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <if_stmt><if>if<condition>(<expr><name>x</name> <operator>%</operator> <name>p</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content><continue>continue;</continue></block_content>}</block></if></if_stmt>
        <if_stmt><if>if<condition>(<expr><name><name>qprime</name><index>[<expr><name>p</name></expr>]</index></name></expr>)</condition><block>{<block_content><expr_stmt><expr><call><name><name>ans</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content>}</block></if></if_stmt>
        <if_stmt><if>if<condition>(<expr><name><name>qprime</name><index>[<expr><name>x</name> <operator>/</operator> <name>p</name></expr>]</index></name></expr>)</condition><block>{<block_content><expr_stmt><expr><call><name><name>ans</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>x</name> <operator>/</operator> <name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if<condition>(<expr><call><name><name>ans</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><block>{<block_content><expr_stmt><expr><call><name><name>ans</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content>}</block></if></if_stmt>
    <return>return <expr><name>ans</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{<block_content>
    <decl_stmt><decl><type><name>long</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt> <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cin</name></name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>m</name></expr>;</expr_stmt>

    <comment type="line">//Find all prime numbers;</comment>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name></type> <name>isPrime</name><argument_list>(<argument><expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>isPrime</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>isPrime</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>long</name></type> <name>p</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>p</name> <operator>*</operator> <name>p</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>isPrime</name><index>[<expr><name>p</name></expr>]</index></name></expr>)</condition><block>{<block_content><continue>continue;</continue></block_content>}</block></if></if_stmt>
        <for>for<control>(<init><decl><type><name>long</name></type> <name>q</name> <init>= <expr><literal type="number">2</literal> <operator>*</operator> <name>p</name></expr></init></decl>;</init> <condition><expr><name>q</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>q</name> <operator>+=</operator> <name>p</name></expr></incr>)</control><block>{<block_content><expr_stmt><expr><name><name>isPrime</name><index>[<expr><name>q</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content>}</block></for>
    </block_content>}</block></for>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>long</name></expr></argument>&gt;</argument_list></name></type> <name>active</name><argument_list>(<argument><expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>set</name><argument_list type="generic">&lt;<argument><expr><name>long</name></expr></argument>&gt;</argument_list></name></type> <name>on</name></decl>;</decl_stmt>


    <while>while<condition>(<expr><name>m</name><operator>--</operator></expr>)</condition><block>{<block_content>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>s</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>long</name></type> <name>collider</name></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cin</name></name> <operator>&gt;&gt;</operator> <name>s</name> <operator>&gt;&gt;</operator> <name>collider</name></expr>;</expr_stmt>
    
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>long</name></expr></argument>&gt;</argument_list></name></type> <name>factors</name> <init>= <expr><call><name>getFactors</name><argument_list>(<argument><expr><name>collider</name></expr></argument>, <argument><expr><name>isPrime</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if<condition>(<expr><name>s</name> <operator>==</operator> <literal type="string">"+"</literal></expr>)</condition><block>{<block_content>
            <if_stmt><if>if<condition>(<expr><call><name><name>on</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><name>collider</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content><expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"Already on"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content>}</block></if>
            <else>else<block>{<block_content>
                <decl_stmt><decl><type><name>long</name></type> <name>conflicted</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                <for>for<control>(<init><decl><type><name>long</name></type> <name>p</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <call><name><name>factors</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
                    <if_stmt><if>if<condition>(<expr><name><name>active</name><index>[<expr><name><name>factors</name><index>[<expr><name>p</name></expr>]</index></name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content><expr_stmt><expr><name>conflicted</name> <operator>=</operator> <name><name>active</name><index>[<expr><name><name>factors</name><index>[<expr><name>p</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt> <break>break;</break></block_content>}</block></if></if_stmt>
                </block_content>}</block></for>

                <if_stmt><if>if<condition>(<expr><name>conflicted</name></expr>)</condition><block>{<block_content><expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <literal type="string">"Conflict with "</literal> <operator>&lt;&lt;</operator> <name>conflicted</name> <operator>&lt;&lt;</operator> <name><name>std</name><operator>::</operator><name>endl</name></name></expr>;</expr_stmt></block_content>}</block></if>
                <else>else<block>{<block_content>
                    <expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"Success"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>on</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>collider</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <for>for<control>(<init><decl><type><name>long</name></type> <name>p</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <call><name><name>factors</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block>{<block_content><expr_stmt><expr><name><name>active</name><index>[<expr><name><name>factors</name><index>[<expr><name>p</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>collider</name></expr>;</expr_stmt></block_content>}</block></for>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if>

        <if type="elseif">else if<condition>(<expr><name>s</name> <operator>==</operator> <literal type="string">"-"</literal></expr>)</condition><block>{<block_content>
            <if_stmt><if>if<condition>(<expr><call><name><name>on</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><name>collider</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
                <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <literal type="string">"Success"</literal> <operator>&lt;&lt;</operator> <name><name>std</name><operator>::</operator><name>endl</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>on</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>collider</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <for>for<control>(<init><decl><type><name>long</name></type> <name>p</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <call><name><name>factors</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block>{<block_content><expr_stmt><expr><name><name>active</name><index>[<expr><name><name>factors</name><index>[<expr><name>p</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content>}</block></for>
            </block_content>}</block></if>
            <else>else<block>{<block_content><expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <literal type="string">"Already off"</literal> <operator>&lt;&lt;</operator> <name><name>std</name><operator>::</operator><name>endl</name></name></expr>;</expr_stmt></block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
