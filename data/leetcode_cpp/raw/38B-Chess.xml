<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode_cpp\raw\38B-Chess.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{<block_content>

    <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>n</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>array</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><call><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>pos1</name></decl>;</decl_stmt> <expr_stmt><expr><call><name>getline</name><argument_list>(<argument><expr><name><name>std</name><operator>::</operator><name>cin</name></name></expr></argument>, <argument><expr><name>pos1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>pos2</name></decl>;</decl_stmt> <expr_stmt><expr><call><name>getline</name><argument_list>(<argument><expr><name><name>std</name><operator>::</operator><name>cin</name></name></expr></argument>, <argument><expr><name>pos2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>rookRow</name> <init>= <expr><name><name>pos1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="char">'1'</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rookCol</name> <init>= <expr><name><name>pos1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="char">'a'</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>row</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>row</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>row</name><operator>++</operator></expr></incr>)</control><block>{<block_content><expr_stmt><expr><name><name>array</name><index>[<expr><name>row</name></expr>]</index><index>[<expr><name>rookCol</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content>}</block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>col</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>col</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>col</name><operator>++</operator></expr></incr>)</control><block>{<block_content><expr_stmt><expr><name><name>array</name><index>[<expr><name>rookRow</name></expr>]</index><index>[<expr><name>col</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content>}</block></for>


    <decl_stmt><decl><type><name>int</name></type> <name>knightRow</name> <init>= <expr><name><name>pos2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="char">'1'</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>knightCol</name> <init>= <expr><name><name>pos2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="char">'a'</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>array</name><index>[<expr><name>knightRow</name></expr>]</index><index>[<expr><name>knightCol</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>posRow</name></decl>, <decl><type ref="prev"/><name>posCol</name></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>row</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>row</name> <operator>&lt;=</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>row</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>col</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>col</name> <operator>&lt;=</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>col</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
            <if_stmt><if>if<condition>(<expr><name>row</name> <operator>+</operator> <name>col</name> <operator>!=</operator> <literal type="number">3</literal></expr>)</condition><block>{<block_content><continue>continue;</continue></block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>posRow</name> <operator>=</operator> <name>knightRow</name> <operator>+</operator> <name>row</name></expr>;</expr_stmt> <expr_stmt><expr><name>posCol</name> <operator>=</operator> <name>knightCol</name> <operator>+</operator> <name>col</name></expr>;</expr_stmt>
            <if_stmt><if>if<condition>(<expr><name>posRow</name> <operator>&lt;</operator> <name>n</name> <operator>&amp;&amp;</operator> <name>posCol</name> <operator>&lt;</operator> <name>n</name></expr>)</condition><block>{<block_content><expr_stmt><expr><name><name>array</name><index>[<expr><name>posRow</name></expr>]</index><index>[<expr><name>posCol</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content>}</block></if></if_stmt>

            <expr_stmt><expr><name>posRow</name> <operator>=</operator> <name>knightRow</name> <operator>-</operator> <name>row</name></expr>;</expr_stmt> <expr_stmt><expr><name>posCol</name> <operator>=</operator> <name>knightCol</name> <operator>+</operator> <name>col</name></expr>;</expr_stmt>
            <if_stmt><if>if<condition>(<expr><name>posRow</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>posCol</name> <operator>&lt;</operator> <name>n</name></expr>)</condition><block>{<block_content><expr_stmt><expr><name><name>array</name><index>[<expr><name>posRow</name></expr>]</index><index>[<expr><name>posCol</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content>}</block></if></if_stmt>

            <expr_stmt><expr><name>posRow</name> <operator>=</operator> <name>knightRow</name> <operator>+</operator> <name>row</name></expr>;</expr_stmt> <expr_stmt><expr><name>posCol</name> <operator>=</operator> <name>knightCol</name> <operator>-</operator> <name>col</name></expr>;</expr_stmt>
            <if_stmt><if>if<condition>(<expr><name>posRow</name> <operator>&lt;</operator> <name>n</name> <operator>&amp;&amp;</operator> <name>posCol</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content><expr_stmt><expr><name><name>array</name><index>[<expr><name>posRow</name></expr>]</index><index>[<expr><name>posCol</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content>}</block></if></if_stmt>

            <expr_stmt><expr><name>posRow</name> <operator>=</operator> <name>knightRow</name> <operator>-</operator> <name>row</name></expr>;</expr_stmt> <expr_stmt><expr><name>posCol</name> <operator>=</operator> <name>knightCol</name> <operator>-</operator> <name>col</name></expr>;</expr_stmt>
            <if_stmt><if>if<condition>(<expr><name>posRow</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>posCol</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content><expr_stmt><expr><name><name>array</name><index>[<expr><name>posRow</name></expr>]</index><index>[<expr><name>posCol</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content>}</block></if></if_stmt>

            <expr_stmt><expr><name>posRow</name> <operator>=</operator> <name>rookRow</name> <operator>+</operator> <name>row</name></expr>;</expr_stmt> <expr_stmt><expr><name>posCol</name> <operator>=</operator> <name>rookCol</name> <operator>+</operator> <name>col</name></expr>;</expr_stmt>
            <if_stmt><if>if<condition>(<expr><name>posRow</name> <operator>&lt;</operator> <name>n</name> <operator>&amp;&amp;</operator> <name>posCol</name> <operator>&lt;</operator> <name>n</name></expr>)</condition><block>{<block_content><expr_stmt><expr><name><name>array</name><index>[<expr><name>posRow</name></expr>]</index><index>[<expr><name>posCol</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content>}</block></if></if_stmt>

            <expr_stmt><expr><name>posRow</name> <operator>=</operator> <name>rookRow</name> <operator>-</operator> <name>row</name></expr>;</expr_stmt> <expr_stmt><expr><name>posCol</name> <operator>=</operator> <name>rookCol</name> <operator>+</operator> <name>col</name></expr>;</expr_stmt>
            <if_stmt><if>if<condition>(<expr><name>posRow</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>posCol</name> <operator>&lt;</operator> <name>n</name></expr>)</condition><block>{<block_content><expr_stmt><expr><name><name>array</name><index>[<expr><name>posRow</name></expr>]</index><index>[<expr><name>posCol</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content>}</block></if></if_stmt>

            <expr_stmt><expr><name>posRow</name> <operator>=</operator> <name>rookRow</name> <operator>+</operator> <name>row</name></expr>;</expr_stmt> <expr_stmt><expr><name>posCol</name> <operator>=</operator> <name>rookCol</name> <operator>-</operator> <name>col</name></expr>;</expr_stmt>
            <if_stmt><if>if<condition>(<expr><name>posRow</name> <operator>&lt;</operator> <name>n</name> <operator>&amp;&amp;</operator> <name>posCol</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content><expr_stmt><expr><name><name>array</name><index>[<expr><name>posRow</name></expr>]</index><index>[<expr><name>posCol</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content>}</block></if></if_stmt>

            <expr_stmt><expr><name>posRow</name> <operator>=</operator> <name>rookRow</name> <operator>-</operator> <name>row</name></expr>;</expr_stmt> <expr_stmt><expr><name>posCol</name> <operator>=</operator> <name>rookCol</name> <operator>-</operator> <name>col</name></expr>;</expr_stmt>
            <if_stmt><if>if<condition>(<expr><name>posRow</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>posCol</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content><expr_stmt><expr><name><name>array</name><index>[<expr><name>posRow</name></expr>]</index><index>[<expr><name>posCol</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content>}</block></if></if_stmt>

        </block_content>}</block></for>
    </block_content>}</block></for>


    <decl_stmt><decl><type><name>int</name></type> <name>total</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>row</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>row</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>row</name><operator>++</operator></expr></incr>)</control><block>{<block_content><for>for<control>(<init><decl><type><name>int</name></type> <name>col</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>col</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>col</name><operator>++</operator></expr></incr>)</control><block>{<block_content><expr_stmt><expr><name>total</name> <operator>+=</operator> <name><name>array</name><index>[<expr><name>row</name></expr>]</index><index>[<expr><name>col</name></expr>]</index></name></expr>;</expr_stmt></block_content>}</block></for></block_content>}</block></for>
    <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <name>total</name> <operator>&lt;&lt;</operator> <name><name>std</name><operator>::</operator><name>endl</name></name></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
