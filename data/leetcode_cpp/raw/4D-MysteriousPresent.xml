<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="C:\Users\DRACO\PycharmProjects\Data-Science-Term-Project-1\data\leetcode_cpp\raw\4D-MysteriousPresent.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>

<struct>struct <name>envelope</name><block>{<public type="default"><decl_stmt><decl><type><name>long</name></type> <name>order</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>long</name></type> <name>width</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>long</name></type> <name>height</name></decl>;</decl_stmt></public>}</block>;</struct>
<function><type><name>bool</name></type> <name>widthSort</name><parameter_list>(<parameter><decl><type><name>envelope</name></type> <name>A</name></decl></parameter>, <parameter><decl><type><name>envelope</name></type> <name>B</name></decl></parameter>)</parameter_list><block>{<block_content><return>return <expr><name><name>A</name><operator>.</operator><name>width</name></name> <operator>&lt;</operator> <name><name>B</name><operator>.</operator><name>width</name></name></expr>;</return></block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{<block_content>
    
    <decl_stmt><decl><type><name>long</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>cardWidth</name></decl>, <decl><type ref="prev"/><name>cardHeight</name></decl>;</decl_stmt> <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%ld %ld %ld"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cardWidth</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cardHeight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>envelope</name></expr></argument>&gt;</argument_list></name></type> <name>envVec</name></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>long</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <decl_stmt><decl><type><name>long</name></type> <name>w</name></decl>, <decl><type ref="prev"/><name>h</name></decl>;</decl_stmt> <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%ld %ld\n"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>w</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>(<expr><name>w</name> <operator>&lt;=</operator> <name>cardWidth</name> <operator>||</operator> <name>h</name> <operator>&lt;=</operator> <name>cardHeight</name></expr>)</condition><block>{<block_content><continue>continue;</continue></block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>envelope</name></type> <name>current</name></decl>;</decl_stmt> <expr_stmt><expr><name><name>current</name><operator>.</operator><name>order</name></name> <operator>=</operator> <name>k</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>current</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name>w</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>current</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>envVec</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>current</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>sort</name></name><argument_list>(<argument><expr><call><name><name>envVec</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>envVec</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>widthSort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>long</name></type> <name>totalEnv</name><argument_list>(<argument><expr><call><name><name>envVec</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name></type> <name>maxLength</name><argument_list>(<argument><expr><name>totalEnv</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></decl>, <decl><type ref="prev"/><name>maxFinal</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>long</name></expr></argument>&gt;</argument_list></name></type> <name>endingLength</name><argument_list>(<argument><expr><name>totalEnv</name></expr></argument>, <argument><expr><name>maxLength</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>long</name></expr></argument>&gt;</argument_list></name></type> <name>previous</name><argument_list>(<argument><expr><name>totalEnv</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

    <for>for<control>(<init><decl><type><name>long</name></type> <name>p</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>totalEnv</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <for>for<control>(<init><decl><type><name>long</name></type> <name>q</name> <init>= <expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>q</name> <operator>&lt;</operator> <name>totalEnv</name></expr>;</condition> <incr><expr><name>q</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
            <if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>envVec</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name>width</name> <operator>&lt;</operator> <name><name>envVec</name><index>[<expr><name>q</name></expr>]</index></name><operator>.</operator><name>width</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>envVec</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name>height</name> <operator>&lt;</operator> <name><name>envVec</name><index>[<expr><name>q</name></expr>]</index></name><operator>.</operator><name>height</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>endingLength</name><index>[<expr><name>q</name></expr>]</index></name> <operator>&lt;</operator> <name><name>endingLength</name><index>[<expr><name>p</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block>{<block_content>
                <expr_stmt><expr><name><name>previous</name><index>[<expr><name>q</name></expr>]</index></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>endingLength</name><index>[<expr><name>q</name></expr>]</index></name> <operator>=</operator> <name><name>endingLength</name><index>[<expr><name>p</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <if_stmt><if>if<condition>(<expr><name><name>endingLength</name><index>[<expr><name>q</name></expr>]</index></name> <operator>&gt;</operator> <name>maxLength</name></expr>)</condition><block>{<block_content><expr_stmt><expr><name>maxLength</name> <operator>=</operator> <name><name>endingLength</name><index>[<expr><name>q</name></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>maxFinal</name> <operator>=</operator> <name>q</name></expr>;</expr_stmt></block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></for>


    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%ld\n"</literal></expr></argument>, <argument><expr><name>maxLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>long</name></expr></argument>&gt;</argument_list></name></type> <name>usedEnv</name><argument_list>(<argument><expr><name>maxLength</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name></type> <name>current</name> <init>= <expr><name>maxFinal</name></expr></init></decl>;</decl_stmt> <for>for<control>(<init><decl><type><name>long</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>maxLength</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block>{<block_content><expr_stmt><expr><name><name>usedEnv</name><index>[<expr><name>maxLength</name> <operator>-</operator> <name>k</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>envVec</name><index>[<expr><name>current</name></expr>]</index></name><operator>.</operator><name>order</name></expr>;</expr_stmt> <expr_stmt><expr><name>current</name> <operator>=</operator> <name><name>previous</name><index>[<expr><name>current</name></expr>]</index></name></expr>;</expr_stmt></block_content>}</block></for>
    <for>for<control>(<init><decl><type><name>long</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>maxLength</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block>{<block_content><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%ld "</literal></expr></argument>, <argument><expr><name><name>usedEnv</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content>}</block></for> <expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
