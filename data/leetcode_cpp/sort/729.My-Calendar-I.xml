<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="C++" filename="C:\Users\DRACO\PycharmProjects\Data-Science-Term-Project-1\data\leetcode_cpp\sort\729.My-Calendar-I.cpp"><class>class <name>MyCalendar</name> <block>{<private type="default">
    <decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type><name>Map</name></decl>;</decl_stmt>
</private><public>public:
    <constructor><name>MyCalendar</name><parameter_list>()</parameter_list> <block>{<block_content>
        
    </block_content>}</block></constructor>
    
    <function><type><name>bool</name></type> <name>book</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>end</name></decl></parameter>)</parameter_list> 
    <block>{<block_content>
        <decl_stmt><decl><type><name>auto</name></type> <name>iter1</name> <init>= <expr><call><name><name>Map</name><operator>.</operator><name>upper_bound</name></name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>iter1</name><operator>!=</operator><call><name><name>Map</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>auto</name></type> <name>iter2</name> <init>= <expr><call><name>prev</name><argument_list>(<argument><expr><name>iter1</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>iter2</name><operator>-&gt;</operator><name>second</name></name> <operator>&gt;</operator> <name>start</name></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>iter1</name> <operator>!=</operator> <call><name><name>Map</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>iter1</name><operator>-&gt;</operator><name>first</name></name> <operator>&lt;</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>Map</name><index>[<expr><name>start</name></expr>]</index></name> <operator>=</operator> <name>end</name></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>
</public>}</block>;</class>
</unit>
