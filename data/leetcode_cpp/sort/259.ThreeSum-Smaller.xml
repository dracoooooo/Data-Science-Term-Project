<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="C++" filename="C:\Users\DRACO\PycharmProjects\Data-Science-Term-Project-1\data\leetcode_cpp\sort\259.ThreeSum-Smaller.cpp"><class>class <name>Solution</name> <block>{<private type="default">
</private><public>public:
    <function><type><name>int</name></type> <name>threeSumSmaller</name><parameter_list>(<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>nums</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>target</name></decl></parameter>)</parameter_list> 
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>count</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name><name>nums</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>nums</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <for>for <control>(<init><decl><type><name>int</name></type> <name>a</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>a</name><operator>&lt;</operator><call><name><name>nums</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>a</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>sum</name><init>=<expr><name>target</name><operator>-</operator><name><name>nums</name><index>[<expr><name>a</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>left</name><init>=<expr><name>a</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>right</name><init>=<expr><call><name><name>nums</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
            
            <while>while <condition>(<expr><name>left</name><operator>&lt;</operator><name>right</name></expr>)</condition>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>nums</name><index>[<expr><name>left</name></expr>]</index></name><operator>+</operator><name><name>nums</name><index>[<expr><name>right</name></expr>]</index></name><operator>&lt;</operator><name>sum</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name>count</name><operator>+=</operator><name>right</name><operator>-</operator><name>left</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>left</name><operator>++</operator></expr>;</expr_stmt>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content>
                    <expr_stmt><expr><name>right</name><operator>--</operator></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></while>
            
            <comment type="line">//cout&lt;&lt;count&lt;&lt;endl;</comment>
        </block_content>}</block></for>
        
        <return>return <expr><name>count</name></expr>;</return>
        
    </block_content>}</block></function>
</public>}</block>;</class>
</unit>
