<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="C++" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode_cpp\sort\354.Russian-Doll-Envelopes_v2.cpp"><class>class <name>Solution</name> <block>{<private type="default">
    <function><type><specifier>static</specifier> <name>bool</name></type> <name>cmp</name><parameter_list>(<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type><name>b</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&gt;</operator><name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</return></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <return>return <expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&lt;</operator><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return></block_content></block></else></if_stmt>
    </block_content>}</block></function>
</private><public>public:
    <function><type><name>int</name></type> <name>maxEnvelopes</name><parameter_list>(<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>envelopes</name></decl></parameter>)</parameter_list> 
    <block>{<block_content>
        <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name><name>envelopes</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>envelopes</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type><name>q</name></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>auto</name></type> <name>x</name><range>: <expr><name>envelopes</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>q</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call> <operator>||</operator> <name><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&gt;</operator><call><name><name>q</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else
            <block>{<block_content>
                <decl_stmt><decl><type><name>auto</name></type> <name>iter</name> <init>= <expr><call><name>lower_bound</name><argument_list>(<argument><expr><call><name><name>q</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>q</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><operator>*</operator><name>iter</name> <operator>=</operator> <name><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></for>
        <return>return <expr><call><name><name>q</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>
</public>}</block>;</class>
</unit>
