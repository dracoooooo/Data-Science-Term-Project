<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="C++" filename="C:\Users\DRACO\PycharmProjects\Data-Science-Term-Project-1\data\leetcode_cpp\sort\4-Median-of-Two-Sorted-Arrays.cpp"><class>class <name>Solution</name> <block>{<private type="default">
</private><public>public:
    <function><type><name>double</name></type> <name>findMedianSortedArrays</name><parameter_list>(<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>nums1</name></decl></parameter>, <parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>nums2</name></decl></parameter>)</parameter_list> 
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>m</name><init>=<expr><call><name><name>nums1</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>n</name><init>=<expr><call><name><name>nums2</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>m</name><operator>+</operator><name>n</name><operator>)</operator><operator>%</operator><literal type="number">2</literal><operator>==</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name>FindKthSmallest</name><argument_list>(<argument><expr><name>nums1</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>m</name></expr></argument>,<argument><expr><name>nums2</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>n</name></expr></argument>,<argument><expr><operator>(</operator><name>m</name><operator>+</operator><name>n</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <return>return <expr><operator>(</operator><call><name>FindKthSmallest</name><argument_list>(<argument><expr><name>nums1</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>m</name></expr></argument>,<argument><expr><name>nums2</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>n</name></expr></argument>,<argument><expr><operator>(</operator><name>m</name><operator>+</operator><name>n</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>+</operator><call><name>FindKthSmallest</name><argument_list>(<argument><expr><name>nums1</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>m</name></expr></argument>,<argument><expr><name>nums2</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>n</name></expr></argument>,<argument><expr><operator>(</operator><name>m</name><operator>+</operator><name>n</name><operator>)</operator><operator>/</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>;</return></block_content></block></else></if_stmt>
        
    </block_content>}</block></function>
    
    <function><type><name>double</name></type> <name>FindKthSmallest</name><parameter_list>(<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>nums1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>nums2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <comment type="line">//cout&lt;&lt;a&lt;&lt;" "&lt;&lt;m&lt;&lt;" "&lt;&lt;b&lt;&lt;" "&lt;&lt;n&lt;&lt;endl;</comment>
        
        <if_stmt><if>if <condition>(<expr><name>m</name><operator>&gt;</operator><name>n</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>FindKthSmallest</name><argument_list>(<argument><expr><name>nums2</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>n</name></expr></argument>,<argument><expr><name>nums1</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>m</name></expr></argument>,<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
        
        <if_stmt><if>if <condition>(<expr><name>m</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name><name>nums2</name><index>[<expr><name>b</name><operator>+</operator><name>k</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>
        
        <if_stmt><if>if <condition>(<expr><name>k</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>min</name><argument_list>(<argument><expr><name><name>nums1</name><index>[<expr><name>a</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>nums2</name><index>[<expr><name>b</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
        
        <decl_stmt><decl><type><name>int</name></type> <name>k1</name><init>=<expr><call><name>min</name><argument_list>(<argument><expr><name>m</name></expr></argument>,<argument><expr><name>k</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>k2</name><init>=<expr><name>k</name><operator>-</operator><name>k1</name></expr></init></decl>;</decl_stmt>
        
        <if_stmt><if>if <condition>(<expr><name><name>nums1</name><index>[<expr><name>a</name><operator>+</operator><name>k1</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>&lt;</operator><name><name>nums2</name><index>[<expr><name>b</name><operator>+</operator><name>k2</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name>FindKthSmallest</name><argument_list>(<argument><expr><name>nums1</name></expr></argument>,<argument><expr><name>a</name><operator>+</operator><name>k1</name></expr></argument>,<argument><expr><name>m</name><operator>-</operator><name>k1</name></expr></argument>,<argument><expr><name>nums2</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>n</name></expr></argument>,<argument><expr><name>k</name><operator>-</operator><name>k1</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <return>return <expr><call><name>FindKthSmallest</name><argument_list>(<argument><expr><name>nums1</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>n</name></expr></argument>,<argument><expr><name>nums2</name></expr></argument>,<argument><expr><name>b</name><operator>+</operator><name>k2</name></expr></argument>,<argument><expr><name>n</name><operator>-</operator><name>k2</name></expr></argument>,<argument><expr><name>k</name><operator>-</operator><name>k2</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
    </block_content>}</block></function>
</public>}</block>;</class>
</unit>
