<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="C++" filename="C:\Users\DRACO\PycharmProjects\Data-Science-Term-Project-1\data\leetcode_cpp\sort\352.Data-Stream-as-Disjoint-Intervals-v2.cpp"><comment type="block" format="doxygen">/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */</comment>
<class>class <name>SummaryRanges</name> <block>{<private type="default">
    <decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type><name>Set</name></decl>;</decl_stmt>
    
</private><public>public:
    <comment type="block" format="doxygen">/** Initialize your data structure here. */</comment>
    <constructor><name>SummaryRanges</name><parameter_list>()</parameter_list> <block>{<block_content>
        
    </block_content>}</block></constructor>
    
    <function><type><name>void</name></type> <name>addNum</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>)</parameter_list> 
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>Set</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>
    
    <function><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Interval</name></expr></argument>&gt;</argument_list></name></type> <name>getIntervals</name><parameter_list>()</parameter_list> 
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Interval</name></expr></argument>&gt;</argument_list></name></type><name>result</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>start</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>end</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>first</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><name>auto</name></type> <name>a</name><range>:<expr><name>Set</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>first</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>start</name><operator>=</operator><name>a</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>end</name><operator>=</operator><name>a</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>first</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
                <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>
            
            <if_stmt><if>if <condition>(<expr><name>a</name><operator>==</operator><name>end</name><operator>+</operator><literal type="number">1</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>end</name><operator>=</operator><name>a</name></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <decl_stmt><decl><type><name>Interval</name></type> <name>newInterval</name><argument_list>(<argument><expr><name>start</name></expr></argument>,<argument><expr><name>end</name></expr></argument>)</argument_list></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>newInterval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>start</name><operator>=</operator><name>a</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>end</name><operator>=</operator><name>a</name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></for>
        
        <decl_stmt><decl><type><name>Interval</name></type> <name>newInterval</name><argument_list>(<argument><expr><name>start</name></expr></argument>,<argument><expr><name>end</name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>newInterval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>        
        
        <return>return <expr><name>result</name></expr>;</return>
    </block_content>}</block></function>
</public>}</block>;</class>

<comment type="block" format="doxygen">/**
 * Your SummaryRanges object will be instantiated and called as such:
 * SummaryRanges obj = new SummaryRanges();
 * obj.addNum(val);
 * vector&lt;Interval&gt; param_2 = obj.getIntervals();
 */</comment>
</unit>
