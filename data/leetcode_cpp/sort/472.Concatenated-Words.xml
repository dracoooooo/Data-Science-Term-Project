<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="C++" filename="C:\Users\DRACO\PycharmProjects\Data-Science-Term-Project-1\data\leetcode_cpp\sort\472.Concatenated-Words.cpp"><class>class <name>Solution</name> <block>{<private type="default">    
</private><public>public:
    <function><type><specifier>static</specifier> <name>bool</name></type> <name>cmp</name><parameter_list>(<parameter><decl><type><name>string</name></type> <name>A</name></decl></parameter>, <parameter><decl><type><name>string</name></type> <name>B</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><call><name><name>A</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>&lt;</operator><call><name><name>B</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>
    
    <decl_stmt><decl><type><name><name>unordered_set</name><argument_list type="generic">&lt;<argument><expr><name>string</name></expr></argument>&gt;</argument_list></name></type><name>Set</name></decl>;</decl_stmt>
    
    <function><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>string</name></expr></argument>&gt;</argument_list></name></type> <name>findAllConcatenatedWordsInADict</name><parameter_list>(<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>string</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>words</name></decl></parameter>)</parameter_list> 
    <block>{<block_content>
        <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name><name>words</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>words</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>            
        
        <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>string</name></expr></argument>&gt;</argument_list></name></type><name>results</name></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>auto</name></type> <name>s</name><range>:<expr><name>words</name></expr></range></decl></init>)</control>     
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>s</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>==</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>DFS</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>results</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><call><name><name>Set</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>results</name></expr>;</return>
    </block_content>}</block></function>
    
    <function><type><name>bool</name></type> <name>DFS</name><parameter_list>(<parameter><decl><type><name>string</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>times</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>Set</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>times</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>
        
        <decl_stmt><decl><type><name>string</name></type> <name>a</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
	    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name><name>s</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
        <block>{<block_content>
		    <expr_stmt><expr><name>a</name> <operator>+=</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		    <decl_stmt><decl><type><name>string</name></type> <name>b</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>substr</name></name><argument_list>(<argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		    <if_stmt><if>if<condition>(<expr><call><name><name>Set</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>DFS</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>times</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>
	    </block_content>}</block></for>
	    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>
</public>}</block>;</class>
</unit>
