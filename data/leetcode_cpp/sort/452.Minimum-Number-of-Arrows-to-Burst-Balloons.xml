<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="C++" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode_cpp\sort\452.Minimum-Number-of-Arrows-to-Burst-Balloons.cpp"><class>class <name>Solution</name> <block>{<private type="default">
    <function><type><specifier>static</specifier> <name>bool</name></type> <name>cmp</name><parameter_list>(<parameter><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type><name>b</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <return>return <expr><name><name>a</name><operator>.</operator><name>second</name></name><operator>&lt;</operator><name><name>b</name><operator>.</operator><name>second</name></name></expr>;</return>
    </block_content>}</block></function>
</private><public>public:
    <function><type><name>int</name></type> <name>findMinArrowShots</name><parameter_list>(<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>points</name></decl></parameter>)</parameter_list> 
    <block>{<block_content>
        <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name><name>points</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>points</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <decl_stmt><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>count</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><name>j</name><operator>&lt;</operator><call><name><name>points</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>            
            <decl_stmt><decl><type><name>int</name></type> <name>right</name><init>=<expr><name><name>points</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>second</name></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><name>j</name><operator>&lt;</operator><call><name><name>points</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name><name>points</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>first</name><operator>&lt;=</operator><name>right</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
            <expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></while>
        
        <return>return <expr><name>count</name></expr>;</return>
    </block_content>}</block></function>
</public>}</block>;</class>
</unit>
