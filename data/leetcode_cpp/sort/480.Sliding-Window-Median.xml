<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="C++" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode_cpp\sort\480.Sliding-Window-Median.cpp"><class>class <name>Solution</name> <block>{<private type="default">
</private><public>public:
    <function><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>double</name></expr></argument>&gt;</argument_list></name></type> <name>medianSlidingWindow</name><parameter_list>(<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>nums</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>)</parameter_list> 
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>multiset</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type><name>Set</name></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>k</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>        
            <expr_stmt><expr><call><name><name>Set</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name><name>nums</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        
        <decl_stmt><decl><type><name>auto</name></type> <name>pos</name><init>=<expr><call><name><name>Set</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>k</name><operator>/</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><name>pos</name><operator>=</operator><call><name>next</name><argument_list>(<argument><expr><name>pos</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        
        <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>double</name></expr></argument>&gt;</argument_list></name></type><name>results</name></decl>;</decl_stmt>
        
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>k</name></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><call><name><name>nums</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>k</name><operator>%</operator><literal type="number">2</literal><operator>==</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>results</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><operator>*</operator><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>results</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><operator>*</operator><name>pos</name><operator>/</operator><literal type="number">2.0</literal><operator>+</operator><operator>*</operator><call><name>prev</name><argument_list>(<argument><expr><name>pos</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">2.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
            
            <if_stmt><if>if <condition>(<expr><name>i</name><operator>==</operator><call><name><name>nums</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
            
            <expr_stmt><expr><call><name><name>Set</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name><name>nums</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            
            <if_stmt><if>if <condition>(<expr><name>k</name><operator>%</operator><literal type="number">2</literal><operator>==</operator><literal type="number">1</literal></expr>)</condition>   <comment type="line">// OXO</comment>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>nums</name><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;=</operator><operator>*</operator><name>pos</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>pos</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
                                
                <comment type="line">// OOXO</comment>
                <if_stmt><if>if <condition>(<expr><name><name>nums</name><index>[<expr><name>i</name><operator>-</operator><name>k</name></expr>]</index></name><operator>&gt;</operator><operator>*</operator><name>pos</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>pos</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if>
                <if type="elseif">else if <condition>(<expr><name><name>nums</name><index>[<expr><name>i</name><operator>-</operator><name>k</name></expr>]</index></name><operator>&lt;</operator><operator>*</operator><name>pos</name></expr>)</condition><block type="pseudo"><block_content>
                    <empty_stmt>;</empty_stmt></block_content></block></if>
                <if type="elseif">else if <condition>(<expr><name><name>nums</name><index>[<expr><name>i</name><operator>-</operator><name>k</name></expr>]</index></name><operator>==</operator><operator>*</operator><name>pos</name> <operator>&amp;&amp;</operator> <operator>*</operator><call><name>prev</name><argument_list>(<argument><expr><name>pos</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>!=</operator><operator>*</operator><name>pos</name></expr>)</condition><block type="pseudo"><block_content>  
                    <comment type="line">// å¦æXå·¦è¾¹æ¯ä¸ªéå¤åç´ ï¼åæ éæ¹å¨ï¼å¦æXå·¦è¾¹ä¸æ¯éå¤åç´ ï¼åXä¼è¢«å é¤ï¼æééå·¦ç§»</comment>
                    <expr_stmt><expr><name>pos</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>                
            </block_content>}</block></if>
            <else>else    <comment type="line">// OOXO</comment>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>nums</name><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;</operator><operator>*</operator><name>pos</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>pos</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
                
                <comment type="line">// OOXOO</comment>
                <if_stmt><if>if <condition>(<expr><name><name>nums</name><index>[<expr><name>i</name><operator>-</operator><name>k</name></expr>]</index></name><operator>&lt;</operator><operator>*</operator><name>pos</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>pos</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
                <if type="elseif">else if <condition>(<expr><name><name>nums</name><index>[<expr><name>i</name><operator>-</operator><name>k</name></expr>]</index></name><operator>&gt;</operator><operator>*</operator><name>pos</name></expr>)</condition><block type="pseudo"><block_content>
                    <empty_stmt>;</empty_stmt></block_content></block></if>
                <if type="elseif">else if <condition>(<expr><name><name>nums</name><index>[<expr><name>i</name><operator>-</operator><name>k</name></expr>]</index></name><operator>==</operator><operator>*</operator><name>pos</name></expr>)</condition><block type="pseudo"><block_content>
                    <comment type="line">// å¦æXå·¦è¾¹æ¯ä¸ªéå¤åç´ ï¼åä¼å é¤é£ä¸ªOï¼å¦æXå·¦è¾¹ä¸æ¯éå¤åç´ ï¼åä¼å é¤Xãä¸¤ç§æåµä¸æéé½éå³ç§»</comment>
                    <expr_stmt><expr><name>pos</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></else></if_stmt>
            
            <expr_stmt><expr><call><name><name>Set</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><call><name><name>Set</name><operator>.</operator><name>lower_bound</name></name><argument_list>(<argument><expr><name><name>nums</name><index>[<expr><name>i</name><operator>-</operator><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>     
        </block_content>}</block></for>
        
        <return>return <expr><name>results</name></expr>;</return>
        
    </block_content>}</block></function>
</public>}</block>;</class>
</unit>
