<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="C++" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode_cpp\sort\315.Count-of-Smaller-Numbers-After-Self.cpp"><class>class <name>Solution</name> <block>{<private type="default">    
</private><public>public:
    <function><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>countSmaller</name><parameter_list>(<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>nums</name></decl></parameter>)</parameter_list> 
    <block>{<block_content>        
        <decl_stmt><decl><type><name>int</name></type> <name>N</name> <init>= <expr><call><name><name>nums</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>N</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><block>{}</block></expr>;</return></block_content></block></if></if_stmt>
        
        <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type><name>sortedNums</name> <init>= <expr><name>nums</name></expr></init></decl>;</decl_stmt>        
        <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type><name>counts</name><argument_list>(<argument><expr><name>N</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>DivideConque</name><argument_list>(<argument><expr><name>nums</name></expr></argument>,<argument><expr><name>sortedNums</name></expr></argument>, <argument><expr><name>counts</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>nums</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">// 0è¡¨ç¤ºèµ·ç¹ï¼N-1è¡¨ç¤ºç»ç¹</comment>
        <return>return <expr><name>counts</name></expr>;</return>
    </block_content>}</block></function>
    
    <function><type><name>void</name></type> <name>DivideConque</name><parameter_list>(<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type><name>nums</name></decl></parameter>, <parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type><name>sortedNums</name></decl></parameter>, <parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type><name>counts</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>end</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>start</name><operator>==</operator><name>end</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
        
        <comment type="line">// å¦æéè¦å¤ççåç´ æå¤ä¸ªï¼åæååæ²»å¤çãæ³¨æï¼åæ²»å¤çåçsortedNumsååä¸¤é¨ååç´ é½æ¯æåºçã</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>mid</name> <init>= <expr><name>start</name><operator>+</operator><operator>(</operator><name>end</name><operator>-</operator><name>start</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>DivideConque</name><argument_list>(<argument><expr><name>nums</name></expr></argument>, <argument><expr><name>sortedNums</name></expr></argument>, <argument><expr><name>counts</name></expr></argument>, <argument><expr><name>start</name></expr></argument>,<argument><expr><name>mid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>DivideConque</name><argument_list>(<argument><expr><name>nums</name></expr></argument>, <argument><expr><name>sortedNums</name></expr></argument>, <argument><expr><name>counts</name></expr></argument>, <argument><expr><name>mid</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <comment type="line">// OKï¼æ¢ç¶ç°å¨start~midåmid+1~endè¿ä¸¤æ®µé½åå«æåºï¼</comment>
        <comment type="line">// é£ä¹å¯¹äºstart~midä¸­çä»»ä½ä¸ä¸ªåç´ ï¼æä»¬é½å¯ä»¥è½»æå°ç¥éå¨mid+1~endä¸­æå¤å°å°äºå®çæ°</comment>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>start</name></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>mid</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><name><name>nums</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>auto</name></type> <name>pos</name> <init>= <expr><call><name>lower_bound</name><argument_list>(<argument><expr><call><name><name>sortedNums</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>+</operator><name>mid</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>sortedNums</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>+</operator><name>end</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>            
            <expr_stmt><expr><name><name>counts</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name>pos</name><operator>-</operator><operator>(</operator><call><name><name>sortedNums</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>+</operator><name>mid</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
        </block_content>}</block></for>
        
        <comment type="line">// å°ä¸¤æ®µå·²ç»æåºçæ°ç»æ®µstart~mid,mid+1~endåèµ·æ¥æåºã</comment>
        <comment type="line">// å¦æåå½å¹¶æåºçcodeä¼æ´å¿«ä¸äºãè¿éå°±å·æäºï¼ç´æ¥ç¨sortå½æ°ã        </comment>
        <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name><name>sortedNums</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>+</operator><name>start</name></expr></argument>,<argument><expr><call><name><name>sortedNums</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>+</operator><name>end</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>        
    </block_content>}</block></function>
</public>}</block>;</class>
</unit>
