<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="C++" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode_cpp\sort\1066.Campus-Bikes-II.cpp"><class>class <name>Solution</name> <block>{<private type="default">
</private><public>public:
    <function><type><name>int</name></type> <name>dis</name><parameter_list>(<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>workers</name></decl></parameter>, <parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>bikes</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>x1</name><init>=<expr><name><name>workers</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>y1</name><init>=<expr><name><name>workers</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>x2</name><init>=<expr><name><name>bikes</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>y2</name><init>=<expr><name><name>bikes</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name>abs</name><argument_list>(<argument><expr><name>x1</name><operator>-</operator><name>x2</name></expr></argument>)</argument_list></call><operator>+</operator><call><name>abs</name><argument_list>(<argument><expr><name>y1</name><operator>-</operator><name>y2</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
    
    
    <function><type><name>int</name></type> <name>assignBikes</name><parameter_list>(<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>workers</name></decl></parameter>, <parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>bikes</name></decl></parameter>)</parameter_list> 
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type><name>Set</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Set</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type><name>visited</name></decl>;</decl_stmt>
        
        <while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>cost</name> <init>= <expr><operator>(</operator><operator>*</operator><call><name><name>Set</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><operator>(</operator><operator>*</operator><call><name><name>Set</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>taken</name> <init>= <expr><operator>(</operator><operator>*</operator><call><name><name>Set</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>)</operator><index>[<expr><literal type="number">2</literal></expr>]</index></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>Set</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><call><name><name>Set</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            
            <if_stmt><if>if <condition>(<expr><name>i</name><operator>==</operator><call><name><name>workers</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><name>cost</name></expr>;</return></block_content></block></if></if_stmt>
            
            <if_stmt><if>if <condition>(<expr><call><name><name>visited</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><block>{<expr><name>i</name></expr>,<expr><name>taken</name></expr>}</block></expr></argument>)</argument_list></call><operator>!=</operator><call><name><name>visited</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <continue>continue;</continue></block_content></block></if></if_stmt>
            <expr_stmt><expr><call><name><name>visited</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><block>{<expr><name>i</name></expr>,<expr><name>taken</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            
            <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;</operator><call><name><name>bikes</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><operator>(</operator><name>taken</name><operator>&amp;</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>j</name><operator>)</operator><operator>)</operator> <operator>!=</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                    <continue>continue;</continue></block_content></block></if></if_stmt>
                <expr_stmt><expr><call><name><name>Set</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><block>{<expr><name>cost</name><operator>+</operator><call><name>dis</name><argument_list>(<argument><expr><name>workers</name></expr></argument>, <argument><expr><name>bikes</name></expr></argument>, <argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>, <expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>, <expr><name>taken</name><operator>+</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>j</name><operator>)</operator></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>            
        </block_content>}</block></while>
        
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></function>
</public>}</block>;</class>
</unit>
