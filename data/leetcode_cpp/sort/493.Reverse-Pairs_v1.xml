<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="C++" filename="C:\Users\DRACO\PycharmProjects\Data-Science-Term-Project-1\data\leetcode_cpp\sort\493.Reverse-Pairs_v1.cpp"><class>class <name>Solution</name> <block>{<private type="default">
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name><name>temp</name><index>[<expr><literal type="number">50001</literal></expr>]</index></name></decl>;</decl_stmt>
</private><public>public:
    <function><type><name>int</name></type> <name>reversePairs</name><parameter_list>(<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>nums</name></decl></parameter>)</parameter_list> 
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name><name>nums</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type><name>sorted</name> <init>= <expr><name>nums</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>helper</name><argument_list>(<argument><expr><name>nums</name></expr></argument>, <argument><expr><name>sorted</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>ret</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>void</name></type> <name>helper</name><parameter_list>(<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>nums</name></decl></parameter>, <parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>sorted</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>a</name><operator>&gt;=</operator><name>b</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>mid</name> <init>= <expr><name>a</name><operator>+</operator><operator>(</operator><name>b</name><operator>-</operator><name>a</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>helper</name><argument_list>(<argument><expr><name>nums</name></expr></argument>, <argument><expr><name>sorted</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>mid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>helper</name><argument_list>(<argument><expr><name>nums</name></expr></argument>, <argument><expr><name>sorted</name></expr></argument>, <argument><expr><name>mid</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><name>mid</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;=</operator><name>b</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>auto</name></type> <name>iter</name> <init>= <expr><call><name>upper_bound</name><argument_list>(<argument><expr><call><name><name>sorted</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>+</operator><name>a</name></expr></argument>, <argument><expr><call><name><name>sorted</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>+</operator><name>mid</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal><operator>*</operator><operator>(</operator><name>long</name><operator>)</operator><name><name>nums</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>ret</name> <operator>+=</operator> <call><name><name>sorted</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>+</operator><name>mid</name><operator>+</operator><literal type="number">1</literal> <operator>-</operator> <name>iter</name></expr>;</expr_stmt>
        </block_content>}</block></for>
        <comment type="line">// sort(sorted.begin()+a, sorted.begin()+b+1);</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>a</name></expr></init></decl>, <decl><type ref="prev"/><name>j</name><init>=<expr><name>mid</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>p</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>        
        <while>while <condition>(<expr><name>i</name><operator>&lt;=</operator><name>mid</name> <operator>&amp;&amp;</operator> <name>j</name><operator>&lt;=</operator><name>b</name></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>sorted</name><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;=</operator><name><name>sorted</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>temp</name><index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <name><name>sorted</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
            </block_content>}</block></if>                
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><name><name>temp</name><index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <name><name>sorted</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt> 
            <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></while>
        <while>while <condition>(<expr><name>i</name><operator>&lt;=</operator><name>mid</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>temp</name><index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <name><name>sorted</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></while>
        <while>while <condition>(<expr><name>j</name><operator>&lt;=</operator><name>b</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>temp</name><index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <name><name>sorted</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></while>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>b</name><operator>-</operator><name>a</name><operator>+</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>sorted</name><index>[<expr><name>a</name><operator>+</operator><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>temp</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
    </block_content>}</block></function>
</public>}</block>;</class>
</unit>
