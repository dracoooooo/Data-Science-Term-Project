<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="C++" filename="C:\Users\DRACO\PycharmProjects\Data-Science-Term-Project-1\data\leetcode_cpp\sort\087.Scramble-String.cpp"><class>class <name>Solution</name> <block>{<private type="default">
</private><public>public:
    <function><type><name>bool</name></type> <name>isScramble</name><parameter_list>(<parameter><decl><type><name>string</name></type> <name>s1</name></decl></parameter>, <parameter><decl><type><name>string</name></type> <name>s2</name></decl></parameter>)</parameter_list> 
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>n</name><init>=<expr><call><name><name>s1</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>n</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>s1</name><operator>==</operator><name>s2</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
        
        <decl_stmt><decl><type><name>string</name></type> <name>temp1</name><init>=<expr><name>s1</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name><name>temp1</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>temp1</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>string</name></type> <name>temp2</name><init>=<expr><name>s2</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name><name>temp2</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>temp2</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>temp1</name><operator>!=</operator><name>temp2</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
        
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>isScramble</name><argument_list>(<argument><expr><call><name><name>s1</name><operator>.</operator><name>substr</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name><name>s2</name><operator>.</operator><name>substr</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>isScramble</name><argument_list>(<argument><expr><call><name><name>s1</name><operator>.</operator><name>substr</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name><name>s2</name><operator>.</operator><name>substr</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>
            
            <if_stmt><if>if <condition>(<expr><call><name>isScramble</name><argument_list>(<argument><expr><call><name><name>s1</name><operator>.</operator><name>substr</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name><name>s2</name><operator>.</operator><name>substr</name></name><argument_list>(<argument><expr><name>n</name><operator>-</operator><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>isScramble</name><argument_list>(<argument><expr><call><name><name>s1</name><operator>.</operator><name>substr</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name><name>s2</name><operator>.</operator><name>substr</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>n</name><operator>-</operator><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block></for>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>
</public>}</block>;</class>
</unit>
