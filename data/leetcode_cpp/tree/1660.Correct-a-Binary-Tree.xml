<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="C++" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode_cpp\tree\1660.Correct-a-Binary-Tree.cpp"><comment type="block" format="doxygen">/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */</comment>
<class>class <name>Solution</name> <block>{<private type="default">    
</private><public>public:
    <function><type><name>TreeNode</name><modifier>*</modifier></type> <name>correctBinaryTree</name><parameter_list>(<parameter><decl><type><name>TreeNode</name><modifier>*</modifier></type> <name>root</name></decl></parameter>)</parameter_list> 
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>unordered_set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type><name>Set</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>queue</name><argument_list type="generic">&lt;<argument><expr><name>TreeNode</name><modifier>*</modifier></expr></argument>&gt;</argument_list></name></type><name>q</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Set</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name><name>root</name><operator>-&gt;</operator><name>val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <while>while <condition>(<expr><operator>!</operator><call><name><name>q</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name><name>q</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><name>len</name><operator>--</operator></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><name>TreeNode</name><modifier>*</modifier></type> <name>node</name> <init>= <expr><call><name><name>q</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>                
                <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                
                <if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>right</name></name></expr>)</condition>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>TreeNode</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>right</name></name></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>right</name></name> <operator>&amp;&amp;</operator> <call><name><name>Set</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>right</name><operator>-&gt;</operator><name>val</name></name></expr></argument>)</argument_list></call><operator>!=</operator><call><name><name>Set</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>right</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
                        <return>return <expr><name>root</name></expr>;</return>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>Set</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>left</name></name></expr>)</condition>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>TreeNode</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>left</name></name></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>right</name></name> <operator>&amp;&amp;</operator> <call><name><name>Set</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>right</name><operator>-&gt;</operator><name>val</name></name></expr></argument>)</argument_list></call><operator>!=</operator><call><name><name>Set</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>left</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
                        <return>return <expr><name>root</name></expr>;</return>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>Set</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></while>
        </block_content>}</block></while>
        <return>return <expr><name>root</name></expr>;</return>
    </block_content>}</block></function>
    
</public>}</block>;</class>
</unit>
