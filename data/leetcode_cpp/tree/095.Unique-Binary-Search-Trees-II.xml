<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="C++" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode_cpp\tree\095.Unique-Binary-Search-Trees-II.cpp"><comment type="block" format="doxygen">/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */</comment>
<class>class <name>Solution</name> <block>{<private type="default">
</private><public>public:
    <function><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>TreeNode</name><modifier>*</modifier></expr></argument>&gt;</argument_list></name></type> <name>generateTrees</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> 
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><block>{}</block></expr>;</return></block_content></block></if></if_stmt>
        <return>return <expr><call><name>generateTreesDFS</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
    
    <function><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>TreeNode</name><modifier>*</modifier></expr></argument>&gt;</argument_list></name></type> <name>generateTreesDFS</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>end</name></decl></parameter>)</parameter_list> 
    <block>{<block_content>
         <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>TreeNode</name><modifier>*</modifier></expr></argument>&gt;</argument_list></name></type> <name>subTree</name></decl>;</decl_stmt>
         
         <if_stmt><if>if <condition>(<expr><name>start</name><operator>&gt;</operator><name>end</name></expr>)</condition>
         <block>{<block_content>
             <expr_stmt><expr><call><name><name>subTree</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></if>
         <else>else
         <block>{<block_content>
             <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>start</name></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>end</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
             <block>{<block_content>
                <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>TreeNode</name><modifier>*</modifier></expr></argument>&gt;</argument_list></name></type> <name>leftSubTree</name> <init>= <expr><call><name>generateTreesDFS</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>TreeNode</name><modifier>*</modifier></expr></argument>&gt;</argument_list></name></type> <name>rightSubTree</name> <init>= <expr><call><name>generateTreesDFS</name><argument_list>(<argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
             
            
                <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <call><name><name>leftSubTree</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control><block type="pseudo"><block_content> 
                    <for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <call><name><name>rightSubTree</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control> 
                    <block>{<block_content>
                        <decl_stmt><decl><type><name>TreeNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>new</operator> <call><name>TreeNode</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>left</name></name> <operator>=</operator> <operator>(</operator><name>leftSubTree</name><operator>)</operator><index>[<expr><name>j</name></expr>]</index></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>right</name></name> <operator>=</operator> <operator>(</operator><name>rightSubTree</name><operator>)</operator><index>[<expr><name>k</name></expr>]</index></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>subTree</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></for></block_content></block></for>
            </block_content>}</block></for>             
         </block_content>}</block></else></if_stmt>
         
         <return>return <expr><name>subTree</name></expr>;</return>
    </block_content>}</block></function>

</public>}</block>;</class>
</unit>
