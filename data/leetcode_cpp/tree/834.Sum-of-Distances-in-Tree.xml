<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="C++" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode_cpp\tree\834.Sum-of-Distances-in-Tree.cpp"><class>class <name>Solution</name> <block>{<private type="default">
    <decl_stmt><decl><type><name><name>unordered_map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name><name>unordered_set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type><name>Children</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type><name>SubLeaves</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type><name>results</name></decl>;</decl_stmt>
    
</private><public>public:
    <function><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>sumOfDistancesInTree</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>N</name></decl></parameter>, <parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>edges</name></decl></parameter>)</parameter_list> 
    <block>{<block_content>
        <expr_stmt><expr><call><name><name>SubLeaves</name><operator>.</operator><name>assign</name></name><argument_list>(<argument><expr><name>N</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>results</name><operator>.</operator><name>assign</name></name><argument_list>(<argument><expr><name>N</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <decl_stmt><decl><type><name><name>unordered_map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name><name>unordered_set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type><name>Map</name></decl>;</decl_stmt>        
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name><name>edges</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <expr_stmt><expr><name><name>Map</name><index>[<expr><name><name>edges</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name><name>edges</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>Map</name><index>[<expr><name><name>edges</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name><name>edges</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
                        
        <decl_stmt><decl><type><name><name>queue</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type><name>q</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <while>while <condition>(<expr><operator>!</operator><call><name><name>q</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>root</name> <init>= <expr><call><name><name>q</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>            
            <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>auto</name></type> <name>child</name><range>:<expr><name><name>Map</name><index>[<expr><name>root</name></expr>]</index></name></expr></range></decl></init>)</control>
            <block>{<block_content>
                <expr_stmt><expr><name><name>Children</name><index>[<expr><name>root</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
                <expr_stmt><expr><name><name>Map</name><index>[<expr><name>child</name></expr>]</index></name><operator>.</operator><call><name>erase</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>                        
        </block_content>}</block></while>
                
        <decl_stmt><decl><type><name>int</name></type> <name>root</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>temp</name> <init>= <expr><call><name>DFS1</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>        
        <decl_stmt><decl><type><name>int</name></type> <name>AllSum</name> <init>= <expr><call><name>DFS2</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>        
        
        <expr_stmt><expr><name><name>results</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>AllSum</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>DFS3</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <return>return <expr><name>results</name></expr>;</return>
    </block_content>}</block></function>
    
    <function><type><name>int</name></type> <name>DFS1</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>Children</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>==</operator><literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>SubLeaves</name><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <return>return <expr><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>sum</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>auto</name></type> <name>a</name><range>: <expr><name><name>Children</name><index>[<expr><name>x</name></expr>]</index></name></expr></range></decl></init>)</control><block type="pseudo"><block_content>        
            <expr_stmt><expr><name>sum</name><operator>+=</operator><call><name>DFS1</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>                    
        <expr_stmt><expr><name><name>SubLeaves</name><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator><name>sum</name></expr>;</expr_stmt>   
        <return>return <expr><name>sum</name></expr>;</return>
    </block_content>}</block></function>
        
    <function><type><name>int</name></type> <name>DFS2</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>Children</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>==</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>        
        <decl_stmt><decl><type><name>int</name></type> <name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>auto</name></type> <name>a</name><range>: <expr><name><name>Children</name><index>[<expr><name>x</name></expr>]</index></name></expr></range></decl></init>)</control><block type="pseudo"><block_content>        
            <expr_stmt><expr><name>sum</name><operator>+=</operator><call><name>DFS2</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call><operator>+</operator><name><name>SubLeaves</name><index>[<expr><name>a</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>        
        <return>return <expr><name>sum</name></expr>;</return>
    </block_content>}</block></function>
    
    <function><type><name>void</name></type> <name>DFS3</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list>
    <block>{<block_content>        
        <for>for <control>(<init><decl><type><name>auto</name></type> <name>a</name><range>: <expr><name><name>Children</name><index>[<expr><name>x</name></expr>]</index></name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <expr_stmt><expr><name><name>results</name><index>[<expr><name>a</name></expr>]</index></name> <operator>=</operator> <name><name>results</name><index>[<expr><name>x</name></expr>]</index></name> <operator>-</operator> <name><name>SubLeaves</name><index>[<expr><name>a</name></expr>]</index></name> <operator>+</operator> <call><name><name>results</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>-</operator><name><name>SubLeaves</name><index>[<expr><name>a</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>DFS3</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>

</public>}</block>;</class>
</unit>
