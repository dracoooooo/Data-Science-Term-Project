<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="C++" filename="C:\Users\DRACO\PycharmProjects\Data-Science-Term-Project-1\data\leetcode_cpp\tree\1569.Number-of-Ways-to-Reorder-Array-to-Get-Same-BST.cpp"><class>class <name>Solution</name> <block>{<private type="default">
    <struct>struct <name>TreeNode</name> <block>{<public type="default">
      <decl_stmt><decl><type><name>int</name></type> <name>val</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>TreeNode</name> <modifier>*</modifier></type><name>left</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>TreeNode</name> <modifier>*</modifier></type><name>right</name></decl>;</decl_stmt>
      <constructor><name>TreeNode</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list> <member_init_list>: <call><name>val</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call>, <call><name>left</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call>, <call><name>right</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> </member_init_list><block>{<block_content/>}</block></constructor>
    </public>}</block>;</struct>
    
    <decl_stmt><decl><type><name>long</name></type> <name>M</name> <init>= <expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name></type> <name><name>comb</name><index>[<expr><literal type="number">1001</literal></expr>]</index><index>[<expr><literal type="number">1001</literal></expr>]</index></name></decl>;</decl_stmt>

    <function><type><name>long</name></type> <name>getComb</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>n</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>comb</name><index>[<expr><name>m</name></expr>]</index><index>[<expr><name>n</name></expr>]</index></name><operator>!=</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name><name>comb</name><index>[<expr><name>m</name></expr>]</index><index>[<expr><name>n</name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>n</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>n</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>m</name></expr>;</return></block_content></block></if></if_stmt>        
        <if_stmt><if>if <condition>(<expr><name>n</name><operator>&gt;</operator><name>m</name><operator>-</operator><name>n</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>getComb</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>m</name><operator>-</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>a</name> <init>= <expr><call><name>getComb</name><argument_list>(<argument><expr><name>m</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>        
        <decl_stmt><decl><type><name>long</name></type> <name>b</name> <init>= <expr><call><name>getComb</name><argument_list>(<argument><expr><name>m</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>comb</name><index>[<expr><name>m</name></expr>]</index><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>a</name><operator>+</operator><name>b</name><operator>)</operator><operator>%</operator><name>M</name></expr>;</expr_stmt>
        <return>return <expr><name><name>comb</name><index>[<expr><name>m</name></expr>]</index><index>[<expr><name>n</name></expr>]</index></name></expr>;</return>
    </block_content>}</block></function>
    
</private><public>public:
    <function><type><name>int</name></type> <name>numOfWays</name><parameter_list>(<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>nums</name></decl></parameter>)</parameter_list> 
    <block>{<block_content>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><literal type="number">1000</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;=</operator><literal type="number">1000</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>comb</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for></block_content></block></for>
        
        <decl_stmt><decl><type><name>TreeNode</name><modifier>*</modifier></type> <name>root</name> <init>= <expr><operator>new</operator> <call><name>TreeNode</name><argument_list>(<argument><expr><name><name>nums</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name><name>nums</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>        
            <expr_stmt><expr><call><name>insertNode</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name><name>nums</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
                    
        <decl_stmt><decl><type><name>long</name></type> <name>num</name></decl>, <decl><type ref="prev"/><name>val</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>val</name><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>void</name></type> <name>insertNode</name><parameter_list>(<parameter><decl><type><name>TreeNode</name><modifier>*</modifier></type> <name>root</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>val</name> <operator>&lt;</operator> <name><name>root</name><operator>-&gt;</operator><name>val</name></name></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>root</name><operator>-&gt;</operator><name>left</name></name><operator>==</operator><name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>root</name><operator>-&gt;</operator><name>left</name></name> <operator>=</operator> <operator>new</operator> <call><name>TreeNode</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>insertNode</name><argument_list>(<argument><expr><name><name>root</name><operator>-&gt;</operator><name>left</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>root</name><operator>-&gt;</operator><name>right</name></name><operator>==</operator><name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>root</name><operator>-&gt;</operator><name>right</name></name> <operator>=</operator> <operator>new</operator> <call><name>TreeNode</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>insertNode</name><argument_list>(<argument><expr><name><name>root</name><operator>-&gt;</operator><name>right</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>
    
    <function><type><name>void</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>TreeNode</name><modifier>*</modifier></type> <name>node</name></decl></parameter>, <parameter><decl><type><name>long</name><modifier>&amp;</modifier></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>long</name><modifier>&amp;</modifier></type> <name>val</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>left</name></name><operator>==</operator><name>NULL</name> <operator>&amp;&amp;</operator> <name><name>node</name><operator>-&gt;</operator><name>right</name></name><operator>==</operator><name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>num</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        
        <decl_stmt><decl><type><name>long</name></type> <name>leftNum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>leftVal</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>rightNum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>rightVal</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>left</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>left</name></name></expr></argument>, <argument><expr><name>leftNum</name></expr></argument>, <argument><expr><name>leftVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>right</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>right</name></name></expr></argument>, <argument><expr><name>rightNum</name></expr></argument>, <argument><expr><name>rightVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        
        <expr_stmt><expr><name>num</name> <operator>=</operator> <name>leftNum</name><operator>+</operator><name>rightNum</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><operator>(</operator><call><name>getComb</name><argument_list>(<argument><expr><name>leftNum</name><operator>+</operator><name>rightNum</name></expr></argument>, <argument><expr><name>leftNum</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>leftVal</name><operator>)</operator> <operator>%</operator> <name>M</name> <operator>*</operator> <name>rightVal</name><operator>)</operator> <operator>%</operator> <name>M</name></expr>;</expr_stmt>
        <return>return;</return>        
    </block_content>}</block></function>
</public>}</block>;</class>
</unit>
