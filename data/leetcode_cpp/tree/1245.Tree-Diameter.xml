<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="C++" filename="C:\Users\DRACO\PycharmProjects\Data-Science-Term-Project-1\data\leetcode_cpp\tree\1245.Tree-Diameter.cpp"><class>class <name>Solution</name> <block>{<private type="default">
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type><name>adj</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>V</name></decl>;</decl_stmt>
</private><public>public:
    <function><type><name>int</name></type> <name>treeDiameter</name><parameter_list>(<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>edges</name></decl></parameter>)</parameter_list> 
    <block>{<block_content>
        <expr_stmt><expr><name>V</name> <operator>=</operator> <call><name><name>edges</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>adj</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>V</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>auto</name></type> <name>edge</name><range>:<expr><name>edges</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <expr_stmt><expr><name><name>adj</name><index>[<expr><name><name>edge</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name><name>edge</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>adj</name><index>[<expr><name><name>edge</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name><name>edge</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        
        <decl_stmt><decl><type><name>auto</name></type> <name>t1</name> <init>= <expr><call><name>bfs</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
        <decl_stmt><decl><type><name>auto</name></type> <name>t2</name> <init>= <expr><call><name>bfs</name><argument_list>(<argument><expr><name><name>t1</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
        <return>return <expr><name><name>t2</name><operator>.</operator><name>second</name></name></expr>;</return>        
    </block_content>}</block></function>
        
    <function><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>bfs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>u</name></decl></parameter>)</parameter_list> 
    <block>{<block_content> 
        <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type><name>dis</name><argument_list>(<argument><expr><name>V</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>queue</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>q</name></decl>;</decl_stmt> 
        <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
      
        <expr_stmt><expr><name><name>dis</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
        
        <while>while <condition>(<expr><operator>!</operator><call><name><name>q</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition> 
        <block>{<block_content> 
            <decl_stmt><decl><type><name>int</name></type> <name>t</name> <init>= <expr><call><name><name>q</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>       
            <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
            
            <for>for <control>(<init><decl><type><name>auto</name></type> <name>it</name> <init>= <expr><name><name>adj</name><index>[<expr><name>t</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>it</name> <operator>!=</operator> <name><name>adj</name><index>[<expr><name>t</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>it</name><operator>++</operator></expr></incr>)</control> 
            <block>{<block_content> 
                <decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><operator>*</operator><name>it</name></expr></init></decl>;</decl_stmt> 
                <if_stmt><if>if <condition>(<expr><name><name>dis</name><index>[<expr><name>v</name></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> 
                <block>{<block_content> 
                    <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   
                    <expr_stmt><expr><name><name>dis</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <name><name>dis</name><index>[<expr><name>t</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
                </block_content>}</block></if></if_stmt> 
            </block_content>}</block></for> 
        </block_content>}</block></while> 
  
        <decl_stmt><decl><type><name>int</name></type> <name>maxDis</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
        <decl_stmt><decl><type><name>int</name></type> <name>nodeIdx</name></decl>;</decl_stmt> 
          
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>V</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> 
        <block>{<block_content> 
            <if_stmt><if>if <condition>(<expr><name><name>dis</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name>maxDis</name></expr>)</condition> 
            <block>{<block_content> 
                <expr_stmt><expr><name>maxDis</name> <operator>=</operator> <name><name>dis</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt> 
                <expr_stmt><expr><name>nodeIdx</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt> 
            </block_content>}</block></if></if_stmt> 
        </block_content>}</block></for> 
        <return>return <expr><call><name>make_pair</name><argument_list>(<argument><expr><name>nodeIdx</name></expr></argument>, <argument><expr><name>maxDis</name></expr></argument>)</argument_list></call></expr>;</return> 
    </block_content>}</block></function>     
</public>}</block>;</class>
</unit>
