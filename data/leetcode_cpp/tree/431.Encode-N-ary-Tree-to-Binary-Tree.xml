<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="C++" filename="C:\Users\DRACO\PycharmProjects\Data-Science-Term-Project-1\data\leetcode_cpp\tree\431.Encode-N-ary-Tree-to-Binary-Tree.cpp"><comment type="block">/*
// Definition for a Node.
class Node {
public:
    int val;
    vector&lt;Node*&gt; children;

    Node() {}

    Node(int _val) {
        val = _val;
    }

    Node(int _val, vector&lt;Node*&gt; _children) {
        val = _val;
        children = _children;
    }
};
*/</comment>

<comment type="block" format="doxygen">/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */</comment>

<class>class <name>Codec</name> <block>{<private type="default">
</private><public>public:
    <comment type="line">// Encodes an n-ary tree to a binary tree.</comment>
    <function><type><name>TreeNode</name><modifier>*</modifier></type> <name>encode</name><parameter_list>(<parameter><decl><type><name>Node</name><modifier>*</modifier></type> <name>root</name></decl></parameter>)</parameter_list> 
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>root</name><operator>==</operator><name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>        
        <decl_stmt><decl><type><name>TreeNode</name><modifier>*</modifier></type> <name>node</name> <init>= <expr><operator>new</operator> <call><name>TreeNode</name><argument_list>(<argument><expr><name><name>root</name><operator>-&gt;</operator><name>val</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>root</name><operator>-&gt;</operator><name>children</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>==</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>node</name></expr>;</return></block_content></block></if></if_stmt>
        
        <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>left</name></name> <operator>=</operator> <call><name>encode</name><argument_list>(<argument><expr><name><name>root</name><operator>-&gt;</operator><name>children</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>TreeNode</name><modifier>*</modifier></type> <name>h</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>left</name></name></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator> <call><name><name>root</name><operator>-&gt;</operator><name>children</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>right</name></name> <operator>=</operator> <call><name>encode</name><argument_list>(<argument><expr><name><name>root</name><operator>-&gt;</operator><name>children</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>h</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>right</name></name></expr>;</expr_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>node</name></expr>;</return>        
    </block_content>}</block></function>
	
    <comment type="line">// Decodes your binary tree to an n-ary tree.</comment>
    <function><type><name>Node</name><modifier>*</modifier></type> <name>decode</name><parameter_list>(<parameter><decl><type><name>TreeNode</name><modifier>*</modifier></type> <name>root</name></decl></parameter>)</parameter_list> 
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>root</name><operator>==</operator><name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>        
        <decl_stmt><decl><type><name>Node</name><modifier>*</modifier></type> <name>node</name> <init>= <expr><operator>new</operator> <call><name>Node</name><argument_list>(<argument><expr><name><name>root</name><operator>-&gt;</operator><name>val</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>root</name><operator>-&gt;</operator><name>left</name></name><operator>==</operator><name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>node</name></expr>;</return></block_content></block></if></if_stmt>
        
        <decl_stmt><decl><type><name>TreeNode</name><modifier>*</modifier></type> <name>h</name> <init>= <expr><name><name>root</name><operator>-&gt;</operator><name>left</name></name></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><name>h</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name><name>node</name><operator>-&gt;</operator><name>children</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>decode</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>h</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>right</name></name></expr>;</expr_stmt>
        </block_content>}</block></while>
        <return>return <expr><name>node</name></expr>;</return>
    </block_content>}</block></function>
</public>}</block>;</class>

<comment type="line">// Your Codec object will be instantiated and called as such:</comment>
<comment type="line">// Codec codec;</comment>
<comment type="line">// codec.decode(codec.encode(root));</comment>
</unit>
