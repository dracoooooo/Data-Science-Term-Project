<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="C++" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode_cpp\tree\126.Word-Ladder-II.cpp"><class>class <name>Solution</name> <block>{<private type="default">
</private><public>public:
    <decl_stmt><decl><type><name><name>unordered_set</name><argument_list type="generic">&lt;<argument><expr><name>string</name></expr></argument>&gt;</argument_list></name></type><name>wordSet</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>unordered_map</name><argument_list type="generic">&lt;<argument><expr><name>string</name></expr></argument>,<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>string</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type><name>next</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>unordered_map</name><argument_list type="generic">&lt;<argument><expr><name>string</name></expr></argument>,<argument><expr><name><name>unordered_set</name><argument_list type="generic">&lt;<argument><expr><name>string</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type><name>prev</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>string</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type><name>results</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>string</name></type> <name>beginWord</name></decl>;</decl_stmt>
    
    <function><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>string</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>findLadders</name><parameter_list>(<parameter><decl><type><name>string</name></type> <name>beginWord</name></decl></parameter>, <parameter><decl><type><name>string</name></type> <name>endWord</name></decl></parameter>, <parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>string</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>wordList</name></decl></parameter>)</parameter_list> 
    <block>{<block_content>   
        <expr_stmt><expr><call><name><name>wordList</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>beginWord</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>        
        
        <for>for <control>(<init><decl><type><name>auto</name></type> <name>str</name><range>:<expr><name>wordList</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>wordSet</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>beginWord</name></name> <operator>=</operator> <name>beginWord</name></expr>;</expr_stmt>
        
        <if_stmt><if>if <condition>(<expr><call><name><name>wordSet</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>endWord</name></expr></argument>)</argument_list></call><operator>==</operator><call><name><name>wordSet</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><block>{}</block></expr>;</return></block_content></block></if></if_stmt>
                
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name><name>wordList</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>string</name></type> <name>str</name> <init>= <expr><name><name>wordList</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>k</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name><operator>&lt;</operator><call><name><name>str</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>                
                <for>for <control>(<init><decl><type><name>char</name></type> <name>ch</name><init>=<expr><literal type="char">'a'</literal></expr></init></decl>;</init> <condition><expr><name>ch</name><operator>&lt;=</operator><literal type="char">'z'</literal></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>string</name></type> <name>temp</name> <init>= <expr><name>str</name></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name><name>temp</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name>ch</name></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>temp</name><operator>==</operator><name>str</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
                    <if_stmt><if>if <condition>(<expr><call><name><name>wordSet</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call><operator>!=</operator><call><name><name>wordSet</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><name><name>next</name><index>[<expr><name>str</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>                    
                </block_content>}</block></for>
            </block_content>}</block></for>
        </block_content>}</block></for>
        
        <decl_stmt><decl><type><name><name>unordered_set</name><argument_list type="generic">&lt;<argument><expr><name>string</name></expr></argument>&gt;</argument_list></name></type><name>visited</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>queue</name><argument_list type="generic">&lt;<argument><expr><name>string</name></expr></argument>&gt;</argument_list></name></type><name>q</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>flag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        
        <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><name>beginWord</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>visited</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>beginWord</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <while>while <condition>(<expr><operator>!</operator><call><name><name>q</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name><name>q</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>unordered_set</name><argument_list type="generic">&lt;<argument><expr><name>string</name></expr></argument>&gt;</argument_list></name></type><name>newVisited</name></decl>;</decl_stmt>
            
            <for>for <control>(<init><decl><type><name>int</name></type> <name>k</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name><operator>&lt;</operator><name>len</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><name>string</name></type> <name>str</name> <init>= <expr><call><name><name>q</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                                
                <for>for <control>(<init><decl><type><name>auto</name></type> <name>nextStr</name><range>: <expr><name><name>next</name><index>[<expr><name>str</name></expr>]</index></name></expr></range></decl></init>)</control>
                <block>{<block_content>                                        
                    <if_stmt><if>if <condition>(<expr><call><name><name>visited</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>nextStr</name></expr></argument>)</argument_list></call><operator>!=</operator><call><name><name>visited</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                        <continue>continue;</continue></block_content></block></if></if_stmt>                                                                                
                    <expr_stmt><expr><name><name>prev</name><index>[<expr><name>nextStr</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>newVisited</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>nextStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    
                    <if_stmt><if>if <condition>(<expr><name>nextStr</name><operator>==</operator><name>endWord</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>flag</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                </block_content>}</block></for>
            </block_content>}</block></for>    
            
            <for>for <control>(<init><decl><type><name>auto</name></type> <name>x</name><range>: <expr><name>newVisited</name></expr></range></decl></init>)</control>
            <block>{<block_content>
                <expr_stmt><expr><call><name><name>visited</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                
                <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>                
            
            <if_stmt><if>if <condition>(<expr><name>flag</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
        </block_content>}</block></while>       
        
        <if_stmt><if>if <condition>(<expr><name>flag</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><block>{}</block></expr>;</return></block_content></block></if></if_stmt>
        
        <expr_stmt><expr><call><name>DFS</name><argument_list>(<argument><expr><name>endWord</name></expr></argument>,<block>{<block_content><expr><name>endWord</name></expr></block_content>}</block></argument_list></call></expr></expr_stmt>)</block_content></block>;</function>
        
        <return>return <expr><name>results</name></expr>;</return>
    </public>}</block>
    
    <decl><name>void</name> <name>DFS</name><argument_list>(<argument><expr><name>string</name> <name>word</name></expr></argument>, <argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>string</name></expr></argument>&gt;</argument_list></name> <name>path</name></expr></argument>)</argument_list>
    <argument_list>{
        if <argument><expr><operator>(</operator><name>word</name><operator>==</operator><name>beginWord</name><operator>)</operator>
        <block>{
            <expr><call><name>reverse</name><argument_list>(<argument><expr><call><name><name>path</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>path</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
            <expr><call><name><name>results</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;
            <return>return;</return>
        }</block></expr></argument>
        
        <for>for <control>(<init><decl><type><name>auto</name> <name>preStr</name>:<name><name>prev</name><index>[<expr><name>word</name></expr>]</index></name></type></decl></init>)</control>
        <expr_stmt><expr><block>{
            <expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>string</name></expr></argument>&gt;</argument_list></name><name>newPath</name><operator>=</operator><name>path</name></expr>;
            <expr><call><name><name>newPath</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>preStr</name></expr></argument>)</argument_list></call></expr>;
            <expr><call><name>DFS</name><argument_list>(<argument><expr><name>preStr</name></expr></argument>, <argument><expr><name>newPath</name></expr></argument>)</argument_list></call></expr>;
        }</block></expr></expr_stmt></for></argument_list></decl></class>
        <return>return;</return>
    }
}<empty_stmt>;</empty_stmt>
</unit>
