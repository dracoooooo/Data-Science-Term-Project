<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="C++" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode_cpp\tree\117.PopulatingNextRightPointersinEachNodeII.cpp"><comment type="block" format="doxygen">/**
 * Definition for binary tree with next pointer.
 * struct TreeLinkNode {
 *  int val;
 *  TreeLinkNode *left, *right, *next;
 *  TreeLinkNode(int x) : val(x), left(NULL), right(NULL), next(NULL) {}
 * };
 */</comment>
<class>class <name>Solution</name> <block>{<private type="default">
</private><public>public:
    <function><type><name>void</name></type> <name>connect</name><parameter_list>(<parameter><decl><type><name>TreeLinkNode</name> <modifier>*</modifier></type><name>root</name></decl></parameter>)</parameter_list> 
    <block>{<block_content>
        <decl_stmt><decl><type><name>TreeLinkNode</name><modifier>*</modifier></type> <name>now</name><init>=<expr><name>root</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>TreeLinkNode</name><modifier>*</modifier></type> <name>head</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>TreeLinkNode</name><modifier>*</modifier></type> <name>tail</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        
        <while>while <condition>(<expr><name>now</name><operator>!=</operator><name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>now</name><operator>-&gt;</operator><name>left</name></name><operator>!=</operator><name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>head</name><operator>==</operator><name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>head</name><operator>=</operator><name><name>now</name><operator>-&gt;</operator><name>left</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><name>tail</name><operator>==</operator><name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 
                    <expr_stmt><expr><name>tail</name><operator>=</operator><name><name>now</name><operator>-&gt;</operator><name>left</name></name></expr>;</expr_stmt></block_content></block></if>
                <else>else
                <block>{<block_content>
                    <expr_stmt><expr><name><name>tail</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>now</name><operator>-&gt;</operator><name>left</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>tail</name><operator>=</operator><name><name>tail</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>now</name><operator>-&gt;</operator><name>right</name></name><operator>!=</operator><name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>head</name><operator>==</operator><name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>head</name><operator>=</operator><name><name>now</name><operator>-&gt;</operator><name>right</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><name>tail</name><operator>==</operator><name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 
                    <expr_stmt><expr><name>tail</name><operator>=</operator><name><name>now</name><operator>-&gt;</operator><name>right</name></name></expr>;</expr_stmt></block_content></block></if>
                <else>else
                <block>{<block_content>
                    <expr_stmt><expr><name><name>tail</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>now</name><operator>-&gt;</operator><name>right</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>tail</name><operator>=</operator><name><name>tail</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if></if_stmt>            
            <expr_stmt><expr><name>now</name><operator>=</operator><name><name>now</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>now</name><operator>==</operator><name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>now</name><operator>=</operator><name>head</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>head</name><operator>=</operator><name>NULL</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>tail</name><operator>=</operator><name>NULL</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></while>
    </block_content>}</block></function>
</public>}</block>;</class>
</unit>
