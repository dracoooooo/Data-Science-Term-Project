<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="C++" filename="C:\Users\DRACO\PycharmProjects\Data-Science-Term-Project-1\data\leetcode_cpp\tree\037.Sudoku-Solver.cpp"><class>class <name>Solution</name> <block>{<private type="default">
</private><public>public:
    <function><type><name>void</name></type> <name>solveSudoku</name><parameter_list>(<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>board</name></decl></parameter>)</parameter_list> 
    <block>{<block_content>
       <if_stmt><if>if <condition>(<expr><call><name><name>board</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>!=</operator><literal type="number">9</literal> <operator>||</operator> <name><name>board</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>!=</operator><literal type="number">9</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
       <decl_stmt><decl><type><name>bool</name></type> <name>temp</name> <init>= <expr><call><name>DFS</name><argument_list>(<argument><expr><name>board</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    </block_content>}</block></function>
    
    <function><type><name>bool</name></type> <name>DFS</name><parameter_list>(<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>board</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>i</name><operator>==</operator><literal type="number">9</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>j</name><operator>==</operator><literal type="number">9</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>DFS</name><argument_list>(<argument><expr><name>board</name></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>board</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>!=</operator><literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>DFS</name><argument_list>(<argument><expr><name>board</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
        
        <for>for <control>(<init><decl><type><name>int</name></type> <name>k</name><init>=<expr><literal type="char">'1'</literal></expr></init></decl>;</init> <condition><expr><name>k</name><operator>&lt;=</operator><literal type="char">'9'</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <expr_stmt><expr><name><name>board</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><name>k</name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>isValid</name><argument_list>(<argument><expr><name>board</name></expr></argument>,<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>DFS</name><argument_list>(<argument><expr><name>board</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>            
        </block_content>}</block></for>
        <expr_stmt><expr><name><name>board</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><literal type="char">'.'</literal></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>
    
    <function><type><name>bool</name></type> <name>isValid</name><parameter_list>(<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>board</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>row</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>row</name><operator>&lt;</operator><literal type="number">9</literal></expr>;</condition> <incr><expr><name>row</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>row</name><operator>!=</operator><name>i</name> <operator>&amp;&amp;</operator> <name><name>board</name><index>[<expr><name>row</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>==</operator><name><name>board</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block></for>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>col</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>col</name><operator>&lt;</operator><literal type="number">9</literal></expr>;</condition> <incr><expr><name>col</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>col</name><operator>!=</operator><name>j</name> <operator>&amp;&amp;</operator> <name><name>board</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>col</name></expr>]</index></name><operator>==</operator><name><name>board</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block></for>
        <decl_stmt><decl><type><name>int</name></type> <name>m</name><init>=<expr><name>i</name><operator>/</operator><literal type="number">3</literal><operator>*</operator><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>n</name><init>=<expr><name>j</name><operator>/</operator><literal type="number">3</literal><operator>*</operator><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>p</name><init>=<expr><name>m</name></expr></init></decl>;</init> <condition><expr><name>p</name><operator>&lt;</operator><name>m</name><operator>+</operator><literal type="number">3</literal></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
         <for>for <control>(<init><decl><type><name>int</name></type> <name>q</name><init>=<expr><name>n</name></expr></init></decl>;</init> <condition><expr><name>q</name><operator>&lt;</operator><name>n</name><operator>+</operator><literal type="number">3</literal></expr>;</condition> <incr><expr><name>q</name><operator>++</operator></expr></incr>)</control>
         <block>{<block_content>
             <if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name><operator>!=</operator><name>i</name><operator>||</operator><name>q</name><operator>!=</operator><name>j</name><operator>)</operator><operator>&amp;&amp;</operator><name><name>board</name><index>[<expr><name>p</name></expr>]</index><index>[<expr><name>q</name></expr>]</index></name><operator>==</operator><name><name>board</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
                 <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
         </block_content>}</block></for></block_content></block></for>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></function>
</public>}</block>;</class>
</unit>
