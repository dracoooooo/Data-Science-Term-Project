<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="C++" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode_cpp\tree\297.Serialize-and-Deserialize-Binary-Tree_v2.cpp"><comment type="block" format="doxygen">/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */</comment>
<class>class <name>Codec</name> <block>{<private type="default">
</private><public>public:

    <comment type="line">// Encodes a tree to a single string.</comment>
    <function><type><name>string</name></type> <name>serialize</name><parameter_list>(<parameter><decl><type><name>TreeNode</name><modifier>*</modifier></type> <name>root</name></decl></parameter>)</parameter_list> 
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>root</name><operator>==</operator><name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="string">"#"</literal></expr>;</return></block_content></block></if>
        <else>else<block type="pseudo"><block_content> <return>return <expr><call><name>to_string</name><argument_list>(<argument><expr><name><name>root</name><operator>-&gt;</operator><name>val</name></name></expr></argument>)</argument_list></call><operator>+</operator><literal type="string">","</literal><operator>+</operator><call><name>serialize</name><argument_list>(<argument><expr><name><name>root</name><operator>-&gt;</operator><name>left</name></name></expr></argument>)</argument_list></call><operator>+</operator><literal type="string">","</literal><operator>+</operator><call><name>serialize</name><argument_list>(<argument><expr><name><name>root</name><operator>-&gt;</operator><name>right</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>        
    </block_content>}</block></function>

    <comment type="line">// Decodes your encoded data to tree.</comment>
    <function><type><name>TreeNode</name><modifier>*</modifier></type> <name>deserialize</name><parameter_list>(<parameter><decl><type><name>string</name></type> <name>data</name></decl></parameter>)</parameter_list> 
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>TreeNode</name><modifier>*</modifier></expr></argument>&gt;</argument_list></name></type><name>nodes</name></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name><name>data</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>i</name></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><name>j</name><operator>&lt;</operator><call><name><name>data</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name><name>data</name><index>[<expr><name>j</name></expr>]</index></name><operator>!=</operator><literal type="char">','</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
            <decl_stmt><decl><type><name>string</name></type> <name>str</name> <init>= <expr><call><name><name>data</name><operator>.</operator><name>substr</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name><operator>-</operator><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>str</name><operator>==</operator><literal type="string">"#"</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>nodes</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>nodes</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>TreeNode</name><argument_list>(<argument><expr><call><name>stoi</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
            <expr_stmt><expr><name>i</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
        </block_content>}</block></for>

        <return>return <expr><call><name>DFS</name><argument_list>(<argument><expr><name>nodes</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>TreeNode</name><modifier>*</modifier></type> <name>DFS</name><parameter_list>(<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>TreeNode</name><modifier>*</modifier></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type><name>nodes</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cur</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>nodes</name><index>[<expr><name>cur</name></expr>]</index></name><operator>==</operator><name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>TreeNode</name><modifier>*</modifier></type> <name>left</name> <init>= <expr><call><name>DFS</name><argument_list>(<argument><expr><name>nodes</name></expr></argument>, <argument><expr><name>cur</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>leftSize</name> <init>= <expr><call><name>getNum</name><argument_list>(<argument><expr><name>left</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>TreeNode</name><modifier>*</modifier></type> <name>right</name> <init>= <expr><call><name>DFS</name><argument_list>(<argument><expr><name>nodes</name></expr></argument>, <argument><expr><name>cur</name><operator>+</operator><name>leftSize</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>nodes</name><index>[<expr><name>cur</name></expr>]</index></name> <operator>-&gt;</operator> <name>left</name> <operator>=</operator> <name>left</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>nodes</name><index>[<expr><name>cur</name></expr>]</index></name> <operator>-&gt;</operator> <name>right</name> <operator>=</operator> <name>right</name></expr>;</expr_stmt>
        <return>return <expr><name><name>nodes</name><index>[<expr><name>cur</name></expr>]</index></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>int</name></type> <name>getNum</name><parameter_list>(<parameter><decl><type><name>TreeNode</name><modifier>*</modifier></type> <name>node</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>node</name><operator>==</operator><name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if>
        <else>else<block type="pseudo"><block_content> <return>return <expr><call><name>getNum</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>left</name></name></expr></argument>)</argument_list></call><operator>+</operator><call><name>getNum</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>right</name></name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr>;</return></block_content></block></else></if_stmt>
    </block_content>}</block></function>
</public>}</block>;</class>

<comment type="line">// Your Codec object will be instantiated and called as such:</comment>
<comment type="line">// Codec codec;</comment>
<comment type="line">// codec.deserialize(codec.serialize(root));</comment>

<comment type="line">// 1,[2,#,#],[3,4,#,#,5,#,#],</comment>
</unit>
