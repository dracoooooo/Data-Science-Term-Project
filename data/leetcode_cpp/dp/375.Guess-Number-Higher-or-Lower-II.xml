<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="C++" filename="C:\Users\DRACO\PycharmProjects\Data-Science-Term-Project-1\data\leetcode_cpp\dp\375.Guess-Number-Higher-or-Lower-II.cpp"><class>class <name>Solution</name> <block>{<private type="default">
</private><public>public:
    <function><type><name>int</name></type> <name>getMoneyAmount</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> 
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type><name>dp</name><argument_list>(<argument><expr><name>n</name><operator>+</operator><literal type="number">2</literal></expr></argument>,<argument><expr><call><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>n</name><operator>+</operator><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>                
               
        <for>for <control>(<init><decl><type><name>int</name></type> <name>len</name><init>=<expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>len</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>len</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>        
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>+</operator><name>len</name><operator>-</operator><literal type="number">1</literal><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>i</name><operator>+</operator><name>len</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>INT_MAX</name><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
                                
                <for>for <control>(<init><decl><type><name>int</name></type> <name>k</name><init>=<expr><name>i</name></expr></init></decl>;</init> <condition><expr><name>k</name><operator>&lt;=</operator><name>j</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>                                   
                    <expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument> , <argument><expr><name>k</name> <operator>+</operator> <call><name>max</name><argument_list>(<argument><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>k</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dp</name><index>[<expr><name>k</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>                
            </block_content>}</block></for></block_content></block></for>            
        <return>return <expr><name><name>dp</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index></name></expr>;</return>        
    </block_content>}</block></function>
</public>}</block>;</class>
</unit>
