<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="C++" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode_cpp\dp\943.Find-the-Shortest-Superstring.cpp"><class>class <name>Solution</name> <block>{<private type="default">
</private><public>public:
    <function><type><name>string</name></type> <name>shortestSuperstring</name><parameter_list>(<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>string</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>A</name></decl></parameter>)</parameter_list> 
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>N</name> <init>= <expr><call><name><name>A</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>auto</name></type> <name>graph</name> <init>= <expr><call><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>N</name></expr></argument>,<argument><expr><call><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>N</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name>N</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
                <if_stmt><if>if <condition>(<expr><name>i</name><operator>!=</operator><name>j</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>graph</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><call><name>cal</name><argument_list>(<argument><expr><name><name>A</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>A</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></for>
        
        <decl_stmt><decl><type><name>int</name></type> <name>M</name> <init>= <expr><literal type="number">1</literal><operator>&lt;&lt;</operator><name>N</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>auto</name></type> <name>dp</name> <init>= <expr><call><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>M</name></expr></argument>,<argument><expr><call><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>N</name></expr></argument>,<argument><expr><name>INT_MAX</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>auto</name></type> <name>parent</name> <init>= <expr><call><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>M</name></expr></argument>,<argument><expr><call><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>N</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>dp</name><index>[<expr><literal type="number">1</literal><operator>&lt;&lt;</operator><name>i</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>A</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
                
        <for>for <control>(<init><decl><type><name>int</name></type> <name>mask</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>mask</name><operator>&lt;</operator><name>M</name></expr>;</condition> <incr><expr><name>mask</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>bit</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>bit</name><operator>&lt;</operator><name>N</name></expr>;</condition> <incr><expr><name>bit</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><operator>(</operator><name>mask</name><operator>&amp;</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>bit</name><operator>)</operator><operator>)</operator><operator>==</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>pmask</name> <init>= <expr><name>mask</name><operator>^</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>bit</name><operator>)</operator></expr></init></decl>;</decl_stmt>      
                <comment type="line">// we want to update dp[mask][bit] = min_{i}(dp[pmask][i]+graph[i][bit])</comment>
                <comment type="line">// where bit must be in mask, and i must be within pmask</comment>
                
                <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>pmask</name><operator>&amp;</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>i</name><operator>)</operator><operator>)</operator><operator>==</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
                    <if_stmt><if>if <condition>(<expr><name><name>dp</name><index>[<expr><name>pmask</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name><name>graph</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>bit</name></expr>]</index></name><operator>&lt;</operator><name><name>dp</name><index>[<expr><name>mask</name></expr>]</index><index>[<expr><name>bit</name></expr>]</index></name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><name><name>dp</name><index>[<expr><name>mask</name></expr>]</index><index>[<expr><name>bit</name></expr>]</index></name> <operator>=</operator> <name><name>dp</name><index>[<expr><name>pmask</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name><name>graph</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>bit</name></expr>]</index></name></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>parent</name><index>[<expr><name>mask</name></expr>]</index><index>[<expr><name>bit</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></for>                    
            </block_content>}</block></for></block_content></block></for>
                
        <decl_stmt><decl><type><name>int</name></type> <name>start</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><name>INT_MAX</name></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
            <if_stmt><if>if <condition>(<expr><name><name>dp</name><index>[<expr><name>M</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;</operator><name>count</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>count</name> <operator>=</operator> <name><name>dp</name><index>[<expr><name>M</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>start</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt></block_content></block></for>
        
        <decl_stmt><decl><type><name>int</name></type> <name>mask</name> <init>= <expr><name>M</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type><name>path</name><argument_list>(<argument><expr><block>{<expr><name>start</name></expr>}</block></expr></argument>)</argument_list></decl>;</decl_stmt>
        <while>while <condition>(<expr><name><name>parent</name><index>[<expr><name>mask</name></expr>]</index><index>[<expr><name>start</name></expr>]</index></name><operator>!=</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>next</name> <init>= <expr><name><name>parent</name><index>[<expr><name>mask</name></expr>]</index><index>[<expr><name>start</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>path</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>mask</name> <operator>=</operator> <name>mask</name><operator>^</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>start</name><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>start</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
        </block_content>}</block></while>
        
        <expr_stmt><expr><call><name>reverse</name><argument_list>(<argument><expr><call><name><name>path</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>path</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>string</name></type> <name>result</name> <init>= <expr><name><name>A</name><index>[<expr><name><name>path</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name><name>path</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>combine</name><argument_list>(<argument><expr><name>result</name></expr></argument>,<argument><expr><name><name>A</name><index>[<expr><name><name>path</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        
        <return>return <expr><name>result</name></expr>;</return>
        
    </block_content>}</block></function>
    
    <function><type><name>int</name></type> <name>cal</name><parameter_list>(<parameter><decl><type><name>string</name></type> <name>S</name></decl></parameter>, <parameter><decl><type><name>string</name></type> <name>T</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>k</name><init>=<expr><call><name>min</name><argument_list>(<argument><expr><call><name><name>S</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>T</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</init> <condition><expr><name>k</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>k</name><operator>--</operator></expr></incr>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>S</name><operator>.</operator><name>substr</name></name><argument_list>(<argument><expr><call><name><name>S</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>-</operator><name>k</name></expr></argument>)</argument_list></call><operator>==</operator><call><name><name>T</name><operator>.</operator><name>substr</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><call><name><name>T</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>-</operator><name>k</name></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block></for>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></function>
    
    <function><type><name>string</name></type> <name>combine</name><parameter_list>(<parameter><decl><type><name>string</name></type> <name>S</name></decl></parameter>, <parameter><decl><type><name>string</name></type> <name>T</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>k</name><init>=<expr><call><name>min</name><argument_list>(<argument><expr><call><name><name>S</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>T</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</init> <condition><expr><name>k</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>k</name><operator>--</operator></expr></incr>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>S</name><operator>.</operator><name>substr</name></name><argument_list>(<argument><expr><call><name><name>S</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>-</operator><name>k</name></expr></argument>)</argument_list></call><operator>==</operator><call><name><name>T</name><operator>.</operator><name>substr</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><name>S</name><operator>+</operator><call><name><name>T</name><operator>.</operator><name>substr</name></name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>S</name><operator>+</operator><name>T</name></expr>;</return>
    </block_content>}</block></function>
</public>}</block>;</class>
</unit>
