<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="C++" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode_cpp\dp\691.Stickers-to-Spell-Word.cpp"><class>class <name>Solution</name> <block>{<private type="default">
</private><public>public:
    <function><type><name>int</name></type> <name>minStickers</name><parameter_list>(<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>string</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>stickers</name></decl></parameter>, <parameter><decl><type><name>string</name></type> <name>target</name></decl></parameter>)</parameter_list> 
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name><name>target</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type><name>dp</name><argument_list>(<argument><expr><literal type="number">1</literal><operator>&lt;&lt;</operator><name>n</name></expr></argument>,<argument><expr><name>INT_MAX</name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>dp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

        <for>for <control>(<init><decl><type><name>int</name></type> <name>state</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>state</name><operator>&lt;</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>n</name><operator>)</operator></expr>;</condition> <incr><expr><name>state</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>dp</name><index>[<expr><name>state</name></expr>]</index></name><operator>==</operator><name>INT_MAX</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
            <for>for <control>(<init><decl><type><name>string</name></type> <name>str</name><range>:<expr><name>stickers</name></expr></range></decl></init>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>new_state</name> <init>= <expr><call><name>findNextStatusByUsingStr</name><argument_list>(<argument><expr><name>state</name></expr></argument>,<argument><expr><name>target</name></expr></argument>,<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name><name>dp</name><index>[<expr><name>new_state</name></expr>]</index></name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name><name>dp</name><index>[<expr><name>new_state</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>dp</name><index>[<expr><name>state</name></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></for>
        <return>return <expr><ternary><condition><expr><name><name>dp</name><index>[<expr><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>n</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>==</operator><name>INT_MAX</name></expr>?</condition><then><expr><operator>-</operator><literal type="number">1</literal></expr></then><else>: <expr><name><name>dp</name><index>[<expr><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>n</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>
    
    <function><type><name>int</name></type> <name>findNextStatusByUsingStr</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>, <parameter><decl><type><name>string</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>string</name></type> <name>s</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name><name>target</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>auto</name></type> <name>ch</name><range>:<expr><name>s</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <comment type="line">// loop over each character in target, if equals to ch and not filled, then set as filled</comment>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>k</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>status</name><operator>&gt;&gt;</operator><name>k</name><operator>)</operator><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>target</name><index>[<expr><name>k</name></expr>]</index></name><operator>==</operator><name>ch</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name>status</name> <operator>=</operator> <name>status</name><operator>+</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>k</name><operator>)</operator></expr>;</expr_stmt>   
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>              
            </block_content>}</block></for>
        </block_content>}</block></for>
        <return>return <expr><name>status</name></expr>;</return>
    </block_content>}</block></function>
</public>}</block>;</class>
</unit>
