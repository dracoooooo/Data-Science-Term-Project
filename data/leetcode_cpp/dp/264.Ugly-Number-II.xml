<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="C++" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode_cpp\dp\264.Ugly-Number-II.cpp"><class>class <name>Solution</name> <block>{<private type="default">
</private><public>public:
    <function><type><name>int</name></type> <name>nthUglyNumber</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> 
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type><name>q</name><argument_list>(<argument><expr><block>{<expr><literal type="number">1</literal></expr>}</block></expr></argument>)</argument_list></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>a</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>b</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>c</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name><operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>num</name> <init>= <expr><call><name>min</name><argument_list>(<argument><expr><call><name>min</name><argument_list>(<argument><expr><name><name>q</name><index>[<expr><name>a</name></expr>]</index></name><operator>*</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name><name>q</name><index>[<expr><name>b</name></expr>]</index></name><operator>*</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name><name>q</name><index>[<expr><name>c</name></expr>]</index></name><operator>*</operator><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>q</name><index>[<expr><name>a</name></expr>]</index></name><operator>*</operator><literal type="number">2</literal><operator>==</operator><name>num</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>a</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>q</name><index>[<expr><name>b</name></expr>]</index></name><operator>*</operator><literal type="number">3</literal><operator>==</operator><name>num</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>b</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>q</name><index>[<expr><name>c</name></expr>]</index></name><operator>*</operator><literal type="number">5</literal><operator>==</operator><name>num</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>c</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <return>return <expr><name><name>q</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</return>
    </block_content>}</block></function>
</public>}</block>;</class>
</unit>
