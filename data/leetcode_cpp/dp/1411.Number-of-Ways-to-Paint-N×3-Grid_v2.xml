<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="C++" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode_cpp\dp\1411.Number-of-Ways-to-Paint-N¡Á3-Grid_v2.cpp"><class>class <name>Solution</name> <block>{<private type="default">
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type><name>temp1</name></decl>, <decl><type ref="prev"/><name>temp2</name></decl>;</decl_stmt>
</private><public>public:
    <function><type><name>int</name></type> <name>numOfWays</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> 
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type><name>dp</name><argument_list>(<argument><expr><literal type="number">27</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>M</name> <init>= <expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>temp1</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>temp2</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <for>for <control>(<init><decl><type><name>int</name></type> <name>p</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>p</name><operator>&lt;</operator><literal type="number">27</literal></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>selfOK</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>dp</name><index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></for>

        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>auto</name></type> <name>dp_prev</name> <init>= <expr><name>dp</name></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>p</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>p</name><operator>&lt;</operator><literal type="number">27</literal></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <expr_stmt><expr><name><name>dp</name><index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>selfOK</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>q</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>q</name><operator>&lt;</operator><literal type="number">27</literal></expr>;</condition> <incr><expr><name>q</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>selfOK</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
                    <if_stmt><if>if <condition>(<expr><call><name>crossOK</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><name><name>dp</name><index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dp</name><index>[<expr><name>p</name></expr>]</index></name><operator>+</operator><name><name>dp_prev</name><index>[<expr><name>q</name></expr>]</index></name><operator>)</operator><operator>%</operator><name>M</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
                </block_content>}</block></for>
            </block_content>}</block></for>
        </block_content>}</block></for>
        
        <decl_stmt><decl><type><name>int</name></type> <name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>p</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>p</name><operator>&lt;</operator><literal type="number">27</literal></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>selfOK</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>sum</name> <operator>=</operator> <operator>(</operator><name>sum</name><operator>+</operator><name><name>dp</name><index>[<expr><name>p</name></expr>]</index></name><operator>)</operator><operator>%</operator><name>M</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>sum</name></expr>;</return>
        
    </block_content>}</block></function>
    
    <function><type><name>bool</name></type> <name>selfOK</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <expr_stmt><expr><name><name>temp1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>p</name><operator>%</operator><literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>p</name><operator>/=</operator><literal type="number">3</literal></expr>;</expr_stmt>
        </block_content>}</block></for>
        <return>return <expr><operator>(</operator><name><name>temp1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>!=</operator><name><name>temp1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>temp1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>!=</operator><name><name>temp1</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator></expr>;</return>
    </block_content>}</block></function>
    
    <function><type><name>bool</name></type> <name>crossOK</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>q</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <expr_stmt><expr><name><name>temp1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>p</name><operator>%</operator><literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>temp2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>q</name><operator>%</operator><literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>p</name><operator>/=</operator><literal type="number">3</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>q</name><operator>/=</operator><literal type="number">3</literal></expr>;</expr_stmt>
        </block_content>}</block></for>
        <return>return <expr><operator>(</operator><name><name>temp1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>!=</operator><name><name>temp2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>temp1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>!=</operator><name><name>temp2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>temp1</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>!=</operator><name><name>temp2</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator></expr>;</return>
    </block_content>}</block></function>
    
</public>}</block>;</class>
</unit>
