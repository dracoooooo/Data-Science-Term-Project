<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="C++" filename="C:\Users\DRACO\PycharmProjects\Data-Science-Term-Project-1\data\leetcode_cpp\dp\818.Race-Car.cpp"><class>class <name>Solution</name> <block>{<private type="default">
    <decl_stmt><decl><type><name>int</name></type> <name><name>dp</name><index>[<expr><literal type="number">10001</literal></expr>]</index></name><init>=<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
</private><public>public:
    <function><type><name>int</name></type> <name>racecar</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>target</name></decl></parameter>)</parameter_list> 
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>dp</name><index>[<expr><name>target</name></expr>]</index></name><operator>!=</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name><name>dp</name><index>[<expr><name>target</name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>
        
        <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name>log2</name><argument_list>(<argument><expr><name>target</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>pow</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><name>n</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal><operator>==</operator><name>target</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>dp</name><index>[<expr><name>target</name></expr>]</index></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
            <return>return <expr><name>n</name></expr>;</return>   
        </block_content>}</block></if></if_stmt>
        
        <comment type="line">// run past the taget</comment>
        <expr_stmt><expr><name><name>dp</name><index>[<expr><name>target</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>n</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>+</operator><literal type="number">1</literal><operator>+</operator><call><name>racecar</name><argument_list>(<argument><expr><call><name>pow</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal><operator>-</operator><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <comment type="line">// stop before the target</comment>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>temp</name> <init>= <expr><name>n</name><operator>+</operator><literal type="number">1</literal><operator>+</operator><name>k</name><operator>+</operator><literal type="number">1</literal><operator>+</operator> <call><name>racecar</name><argument_list>( <argument><expr><name>target</name> <operator>-</operator> <operator>(</operator><call><name>pow</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><name>n</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><call><name>pow</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><name>k</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>dp</name><index>[<expr><name>target</name></expr>]</index></name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name><name>dp</name><index>[<expr><name>target</name></expr>]</index></name></expr></argument>,<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        
        <return>return <expr><name><name>dp</name><index>[<expr><name>target</name></expr>]</index></name></expr>;</return>
    </block_content>}</block></function>
</public>}</block>;</class>
</unit>
