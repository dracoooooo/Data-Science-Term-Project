<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="C++" filename="C:\Users\DRACO\PycharmProjects\Data-Science-Term-Project-1\data\leetcode_cpp\dp\1531.String-Compression-II.cpp"><class>class <name>Solution</name> <block>{<private type="default">
    <decl_stmt><decl><type><name>int</name></type> <name><name>dp</name><index>[<expr><literal type="number">101</literal></expr>]</index><index>[<expr><literal type="number">101</literal></expr>]</index><index>[<expr><literal type="number">27</literal></expr>]</index><index>[<expr><literal type="number">11</literal></expr>]</index></name></decl>;</decl_stmt>
</private><public>public:
    <function><type><name>int</name></type> <name>getLengthOfOptimalCompression</name><parameter_list>(<parameter><decl><type><name>string</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>K</name></decl></parameter>)</parameter_list> 
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="string">"#"</literal><operator>+</operator><name>s</name></expr>;</expr_stmt>

        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>k</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name><operator>&lt;=</operator><name>K</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>ch</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>ch</name><operator>&lt;=</operator><literal type="number">26</literal></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
                    <for>for <control>(<init><decl><type><name>int</name></type> <name>num</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>num</name><operator>&lt;=</operator><literal type="number">10</literal></expr>;</condition> <incr><expr><name>num</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
                        <expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>num</name></expr>]</index></name> <operator>=</operator> <name>INT_MAX</name></expr>;</expr_stmt></block_content></block></for></block_content></block></for></block_content></block></for></block_content></block></for>
        <comment type="line">// dp[i][k][ch][num]: the optimal solution for s[1:i]</comment>
        <comment type="line">// with k digits removed, last letter as ch, the consecitive number of ch as num</comment>

        <expr_stmt><expr><name><name>dp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">26</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>k</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name><operator>&lt;=</operator><call><name>min</name><argument_list>(<argument><expr><name>K</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>ch</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>ch</name> <operator>&lt;=</operator> <literal type="number">26</literal></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
                    <for>for <control>(<init><decl><type><name>int</name></type> <name>num</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>num</name> <operator>&lt;=</operator><literal type="number">10</literal></expr>;</condition> <incr><expr><name>num</name><operator>++</operator></expr></incr>)</control>
                    <block>{<block_content>
                        <decl_stmt><decl><type><name>int</name></type> <name>cur</name> <init>= <expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>num</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                        <if_stmt><if>if <condition>(<expr><name>cur</name><operator>==</operator><name>INT_MAX</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

                        <comment type="line">// delete s[i+1]</comment>
                        <expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>k</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>num</name></expr>]</index></name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name><name>dp</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>k</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>num</name></expr>]</index></name></expr></argument>, <argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <comment type="line">// keep s[i+1]</comment>
                        <if_stmt><if>if <condition>(<expr><name><name>s</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>-</operator><literal type="char">'a'</literal> <operator>==</operator> <name>ch</name></expr>)</condition>
                        <block>{<block_content>
                            <decl_stmt><decl><type><name>int</name></type> <name>add</name></decl>;</decl_stmt>
                            <if_stmt><if>if <condition>(<expr><name>num</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>add</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>  <comment type="line">// a -&gt; a2</comment>
                            <if type="elseif">else if <condition>(<expr><name>num</name><operator>&gt;=</operator><literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>num</name><operator>&lt;=</operator><literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>add</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if> <comment type="line">// a3-&gt;a4</comment>
                            <if type="elseif">else if <condition>(<expr><name>num</name><operator>==</operator><literal type="number">9</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>add</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if> <comment type="line">// a9-&gt;a10;</comment>
                            <if type="elseif">else if <condition>(<expr><name>num</name><operator>==</operator><literal type="number">10</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>add</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="line">// a10-&gt;a11;</comment>
                            <expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>ch</name></expr>]</index><index>[<expr><call><name>min</name><argument_list>(<argument><expr><name>num</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name><name>dp</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>ch</name></expr>]</index><index>[<expr><call><name>min</name><argument_list>(<argument><expr><name>num</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>, <argument><expr><name>cur</name><operator>+</operator><name>add</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if>
                        <else>else
                        <block>{<block_content>
                            <expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>k</name></expr>]</index><index>[<expr><name><name>s</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>-</operator><literal type="char">'a'</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name><name>dp</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>k</name></expr>]</index><index>[<expr><name><name>s</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>-</operator><literal type="char">'a'</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>cur</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></else></if_stmt>
                    </block_content>}</block></for></block_content></block></for></block_content></block></for></block_content></block></for>
        
        <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>INT_MAX</name></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>ch</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>ch</name> <operator>&lt;=</operator> <literal type="number">26</literal></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>num</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>num</name> <operator>&lt;=</operator><literal type="number">10</literal></expr>;</condition> <incr><expr><name>num</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>                    
                <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name><name>dp</name><index>[<expr><name>n</name></expr>]</index><index>[<expr><name>K</name></expr>]</index><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>num</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></for>
        
        <return>return <expr><name>ret</name></expr>;</return>
    </block_content>}</block></function>
</public>}</block>;</class>

</unit>
