<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="C++" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode_cpp\dp\1575.Count-All-Possible-Routes_v3.cpp"><class>class <name>Solution</name> <block>{<private type="default">
    <decl_stmt><decl><type><name>long</name></type> <name><name>dp</name><index>[<expr><literal type="number">201</literal></expr>]</index><index>[<expr><literal type="number">101</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
</private><public>public:
    <function><type><name>int</name></type> <name>countRoutes</name><parameter_list>(<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>locations</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>finish</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fuel</name></decl></parameter>)</parameter_list> 
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name><name>locations</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>        
        <decl_stmt><decl><type><name>int</name></type> <name>startPos</name> <init>= <expr><name><name>locations</name><index>[<expr><name>start</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>finishPos</name> <init>= <expr><name><name>locations</name><index>[<expr><name>finish</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name><name>locations</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>locations</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <decl_stmt><decl><type><name>int</name></type> <name>startIdx</name></decl>, <decl><type ref="prev"/><name>finishIdx</name></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>locations</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name>startPos</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>startIdx</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>locations</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name>finishPos</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>finishIdx</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><name><name>dp</name><index>[<expr><name>fuel</name></expr>]</index><index>[<expr><name>startIdx</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>M</name> <init>= <expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
        
        <for>for <control>(<init><decl><type><name>int</name></type> <name>f</name><init>=<expr><name>fuel</name></expr></init></decl>;</init> <condition><expr><name>f</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>f</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>c</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>c</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>c</name><operator>&gt;</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>f</name><operator>+</operator><name><name>locations</name><index>[<expr><name>c</name></expr>]</index></name><operator>-</operator><name><name>locations</name><index>[<expr><name>c</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>&lt;=</operator> <name>fuel</name></expr>)</condition>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>int</name></type> <name>gas</name> <init>= <expr><name><name>locations</name><index>[<expr><name>c</name></expr>]</index></name><operator>-</operator><name><name>locations</name><index>[<expr><name>c</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>                    
                    <expr_stmt><expr><name><name>dp</name><index>[<expr><name>f</name></expr>]</index><index>[<expr><name>c</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name><name>dp</name><index>[<expr><name>f</name><operator>+</operator><name>gas</name></expr>]</index><index>[<expr><name>c</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>dp</name><index>[<expr><name>f</name><operator>+</operator><name>gas</name></expr>]</index><index>[<expr><name>c</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>dp</name><index>[<expr><name>f</name></expr>]</index><index>[<expr><name>c</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <name><name>dp</name><index>[<expr><name>f</name><operator>+</operator><name>gas</name></expr>]</index><index>[<expr><name>c</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>dp</name><index>[<expr><name>f</name><operator>+</operator><name>gas</name></expr>]</index><index>[<expr><name>c</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><name>c</name><operator>&lt;</operator><name>n</name><operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>f</name><operator>+</operator><name><name>locations</name><index>[<expr><name>c</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>-</operator><name><name>locations</name><index>[<expr><name>c</name></expr>]</index></name> <operator>&lt;=</operator> <name>fuel</name></expr>)</condition>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>int</name></type> <name>gas</name> <init>= <expr><name><name>locations</name><index>[<expr><name>c</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>-</operator><name><name>locations</name><index>[<expr><name>c</name></expr>]</index></name></expr></init></decl>;</decl_stmt> 
                    <expr_stmt><expr><name><name>dp</name><index>[<expr><name>f</name></expr>]</index><index>[<expr><name>c</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name><name>dp</name><index>[<expr><name>f</name><operator>+</operator><name>gas</name></expr>]</index><index>[<expr><name>c</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>dp</name><index>[<expr><name>f</name><operator>+</operator><name>gas</name></expr>]</index><index>[<expr><name>c</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>dp</name><index>[<expr><name>f</name></expr>]</index><index>[<expr><name>c</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name><name>dp</name><index>[<expr><name>f</name><operator>+</operator><name>gas</name></expr>]</index><index>[<expr><name>c</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>dp</name><index>[<expr><name>f</name><operator>+</operator><name>gas</name></expr>]</index><index>[<expr><name>c</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name><name>dp</name><index>[<expr><name>f</name></expr>]</index><index>[<expr><name>c</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>%=</operator><name>M</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>dp</name><index>[<expr><name>f</name></expr>]</index><index>[<expr><name>c</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>%=</operator><name>M</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>dp</name><index>[<expr><name>f</name></expr>]</index><index>[<expr><name>c</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>%=</operator><name>M</name></expr>;</expr_stmt>
            </block_content>}</block></for></block_content></block></for>
        <decl_stmt><decl><type><name>long</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>f</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>f</name><operator>&lt;=</operator><name>fuel</name></expr>;</condition> <incr><expr><name>f</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name>ret</name><operator>+</operator><name><name>dp</name><index>[<expr><name>f</name></expr>]</index><index>[<expr><name>finishIdx</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator><operator>%</operator><name>M</name></expr>;</expr_stmt></block_content></block></for>
        <return>return <expr><name>ret</name></expr>;</return>
    </block_content>}</block></function>
</public>}</block>;</class>
</unit>
