<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="C++" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode_cpp\dp\1595.Minimum-Cost-to-Connect-Two-Groups-of-Points.cpp"><class>class <name>Solution</name> <block>{<private type="default">
    <decl_stmt><decl><type><name>int</name></type> <name><name>dp</name><index>[<expr><literal type="number">12</literal></expr>]</index><index>[<expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">12</literal></expr>]</index></name></decl>;</decl_stmt>
</private><public>public:
    <function><type><name>int</name></type> <name>connectTwoGroups</name><parameter_list>(<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>cost</name></decl></parameter>)</parameter_list> 
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>m</name> <init>= <expr><call><name><name>cost</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><name><name>cost</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name><name>dp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>INT_MAX</name><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>state</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>state</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>n</name><operator>)</operator></expr>;</condition> <incr><expr><name>state</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>state</name><operator>&gt;&gt;</operator><name>j</name><operator>)</operator><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator><operator>==</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>sum</name> <operator>+=</operator> <name><name>cost</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></for>
            <expr_stmt><expr><name><name>dp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>state</name></expr>]</index></name> <operator>=</operator> <name>sum</name></expr>;</expr_stmt>
        </block_content>}</block></for>

        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>m</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>INT_MAX</name><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>state</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>state</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>n</name><operator>)</operator></expr>;</condition> <incr><expr><name>state</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>state</name></expr>]</index></name> <operator>=</operator> <name>INT_MAX</name><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>subset</name><init>=<expr><name>state</name></expr></init></decl>;</init> <condition><expr><name>subset</name><operator>&gt;</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>subset</name><operator>=</operator><operator>(</operator><name>subset</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>&amp;</operator><name>state</name></expr></incr>)</control>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>int</name></type> <name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                    <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
                    <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>subset</name><operator>&gt;&gt;</operator><name>j</name><operator>)</operator><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator><operator>==</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
                            <expr_stmt><expr><name>sum</name> <operator>+=</operator> <name><name>cost</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
                    </block_content>}</block></for>
                    <expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>state</name></expr>]</index></name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>state</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>dp</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>state</name><operator>-</operator><name>subset</name></expr>]</index></name><operator>+</operator><name>sum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>

                <decl_stmt><decl><type><name>int</name></type> <name>minPath</name> <init>= <expr><name>INT_MAX</name></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>minPath</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>minPath</name></expr></argument>, <argument><expr><name><name>cost</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
                <expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>state</name></expr>]</index></name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>state</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>dp</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>state</name></expr>]</index></name> <operator>+</operator> <name>minPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                                 
            </block_content>}</block></for>            
        </block_content>}</block></for>

        <return>return <expr><name><name>dp</name><index>[<expr><name>m</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>n</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</return>
    </block_content>}</block></function>
</public>}</block>;</class>
</unit>
