<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\raw\solutions\_679.java"><package>package <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>solutions</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>stream</name><operator>.</operator><name>IntStream</name></name>;</import>

<class><specifier>public</specifier> class <name>_679</name> <block>{
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution1</name> <block>{
        <comment type="block" format="javadoc">/**
         * Since there are only 4 cards and only 4 operations, we can iterate through all possible combinations, there's a total of 9216 possibilities:
         * 1. we pick two out of four cards, with order (since order matters for division), 4 * 3 = 12, then pick one of four operations: 12 * 4 = 48;
         * 2. then we pick two from these three numbers: 12 * 4 * 3 * 4 * 2 = 1152
         * 3. then we pick the remaining two: 1152 * 2 * 4 = 9216 (with order and out of 4 operations)
         */</comment>
        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>judgePoint24</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>nums</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <return>return <expr><call><name>dfs</name><argument_list>(<argument><expr><call><name><name>IntStream</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name>nums</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>mapToDouble</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>num</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name>num</name></expr></block_content></block></lambda></expr></argument>)</argument_list></call><operator>.</operator><call><name>toArray</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>boolean</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name><name>double</name><index>[]</index></name></type> <name>nums</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>nums</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><call><name><name>Math</name><operator>.</operator><name>abs</name></name><argument_list>(<argument><expr><name><name>nums</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="number">24</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1e-8</literal></expr>;</return><comment type="line">//1e-8 means 0.000000001, i.e. 10^(-8)</comment>
            </block_content>}</block></if></if_stmt>

            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>nums</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>nums</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name>j</name></expr>)</condition> <block>{<block_content>
                        <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name><name>double</name><index>[]</index></name></type> <name>a</name> <init>= <expr><operator>new</operator> <name><name>double</name><index>[<expr><name><name>nums</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
                        <for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>nums</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                            <if_stmt><if>if <condition>(<expr><name>k</name> <operator>!=</operator> <name>i</name> <operator>&amp;&amp;</operator> <name>k</name> <operator>!=</operator> <name>j</name></expr>)</condition> <block>{<block_content>
                                <expr_stmt><expr><name><name>a</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>nums</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>
                            </block_content>}</block></if></if_stmt>
                        </block_content>}</block></for>

                        <expr_stmt><expr><name><name>a</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <name><name>nums</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>nums</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
                        <if_stmt><if>if <condition>(<expr><call><name>dfs</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
                        </block_content>}</block></if></if_stmt>

                        <expr_stmt><expr><name><name>a</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <name><name>nums</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>nums</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
                        <if_stmt><if>if <condition>(<expr><call><name>dfs</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
                        </block_content>}</block></if></if_stmt>

                        <expr_stmt><expr><name><name>a</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <name><name>nums</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>nums</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
                        <if_stmt><if>if <condition>(<expr><call><name>dfs</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
                        </block_content>}</block></if></if_stmt>

                        <if_stmt><if>if <condition>(<expr><name><name>nums</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">1e-8</literal></expr>)</condition> <block>{<block_content>
                            <expr_stmt><expr><name><name>a</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <name><name>nums</name><index>[<expr><name>i</name></expr>]</index></name> <operator>/</operator> <name><name>nums</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
                            <if_stmt><if>if <condition>(<expr><call><name>dfs</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
                            </block_content>}</block></if></if_stmt>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></for>
            </block_content>}</block></for>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></function>
    }</block></class>
}</block></class>
</unit>
