<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\raw\solutions\_346.java"><package>package <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>solutions</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>LinkedList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Queue</name></name>;</import>

<class><specifier>public</specifier> class <name>_346</name> <block>{

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution1</name> <block>{
        <class>class <name>MovingAverage</name> <block>{

            <decl_stmt><decl><type><specifier>private</specifier> <name><name>Queue</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>q</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>private</specifier> <name>Long</name></type> <name>sum</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>max</name></decl>;</decl_stmt>

            <comment type="block" format="javadoc">/**
             * Initialize your data structure here.
             */</comment>
            <constructor><specifier>public</specifier> <name>MovingAverage</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <expr_stmt><expr><name>q</name> <operator>=</operator> <operator>new</operator> <call><name>LinkedList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>sum</name> <operator>=</operator> <literal type="number">0L</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>max</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
            </block_content>}</block></constructor>

            <function><type><specifier>public</specifier> <name>double</name></type> <name>next</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>q</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <name>max</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>offer</name></name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>sum</name> <operator>+=</operator> <name>val</name></expr>;</expr_stmt>
                    <return>return <expr><operator>(</operator><name>double</name><operator>)</operator> <name>sum</name> <operator>/</operator> <call><name><name>q</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <decl_stmt><decl><type><name>int</name></type> <name>first</name> <init>= <expr><call><name><name>q</name><operator>.</operator><name>poll</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name>sum</name> <operator>-=</operator> <name>first</name></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>offer</name></name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>sum</name> <operator>+=</operator> <name>val</name></expr>;</expr_stmt>
                    <return>return <expr><operator>(</operator><name>double</name><operator>)</operator> <name>sum</name> <operator>/</operator> <call><name><name>q</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></function>
        }</block></class>
    }</block></class>
}</block></class>
</unit>
