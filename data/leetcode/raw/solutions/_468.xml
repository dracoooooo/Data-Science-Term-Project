<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\raw\solutions\_468.java"><package>package <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>solutions</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>

<class><specifier>public</specifier> class <name>_468</name> <block>{

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution1</name> <block>{

        <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>NEITHER</name> <init>= <expr><literal type="string">"Neither"</literal></expr></init></decl>;</decl_stmt>

        <function><type><specifier>public</specifier> <name>String</name></type> <name>validIPAddress</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>IP</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>IP</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><call><name>isValidIPv4</name><argument_list>(<argument><expr><name>IP</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>IP</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><call><name>isValidIPv6</name><argument_list>(<argument><expr><name>IP</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <return>return <expr><name>NEITHER</name></expr>;</return>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>String</name></type> <name>isValidIPv6</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>IP</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>getDelimiterCount</name><argument_list>(<argument><expr><name>IP</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">7</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><name>NEITHER</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>bytes</name> <init>= <expr><call><name><name>IP</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">"\\:"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>bytes</name><operator>.</operator><name>length</name></name> <operator>!=</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><name>NEITHER</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name>hasInvalidIPV6Char</name><argument_list>(<argument><expr><name><name>bytes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <return>return <expr><name>NEITHER</name></expr>;</return>
                </block_content>}</block></if></if_stmt>
                <try>try <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name><name>bytes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
                        <return>return <expr><name>NEITHER</name></expr>;</return>
                    </block_content>}</block></if></if_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>intNum</name> <init>= <expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><name><name>bytes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>intNum</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                        <return>return <expr><name>NEITHER</name></expr>;</return>
                    </block_content>}</block></if></if_stmt>
                    <if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>intNum</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>bytes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>charAt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'0'</literal></expr>)</condition> <block>{<block_content>
                        <return>return <expr><name>NEITHER</name></expr>;</return>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                    <return>return <expr><name>NEITHER</name></expr>;</return>
                </block_content>}</block></catch></try>

            </block_content>}</block></for>
            <return>return <expr><literal type="string">"IPv6"</literal></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>String</name></type> <name>isValidIPv4</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>IP</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>getDelimiterCount</name><argument_list>(<argument><expr><name>IP</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><name>NEITHER</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>bytes</name> <init>= <expr><call><name><name>IP</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">"\\."</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>bytes</name><operator>.</operator><name>length</name></name> <operator>!=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><name>NEITHER</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <for>for <control>(<init><decl><type><name>String</name></type> <name>num</name> <range>: <expr><name>bytes</name></expr></range></decl></init>)</control> <block>{<block_content>
                <try>try <block>{<block_content>
                    <decl_stmt><decl><type><name>int</name></type> <name>intNum</name> <init>= <expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>intNum</name> <operator>&gt;</operator> <literal type="number">255</literal> <operator>||</operator> <name>intNum</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                        <return>return <expr><name>NEITHER</name></expr>;</return>
                    </block_content>}</block></if></if_stmt>
                    <if_stmt><if>if <condition>(<expr><name>intNum</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>num</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                            <if_stmt><if>if <condition>(<expr><call><name><name>num</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'0'</literal></expr>)</condition> <block>{<block_content>
                                <return>return <expr><name>NEITHER</name></expr>;</return>
                            </block_content>}</block></if> <else>else <block>{<block_content>
                                <break>break;</break>
                            </block_content>}</block></else></if_stmt>
                        </block_content>}</block></for>
                    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>intNum</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><call><name><name>num</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                            <return>return <expr><name>NEITHER</name></expr>;</return>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                    <return>return <expr><name>NEITHER</name></expr>;</return>
                </block_content>}</block></catch></try>
            </block_content>}</block></for>
            <return>return <expr><literal type="string">"IPv4"</literal></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>boolean</name></type> <name>hasInvalidIPV6Char</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Character</name></argument>&gt;</argument_list></name></type> <name>set</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><literal type="char">'0'</literal></expr></argument>, <argument><expr><literal type="char">'1'</literal></expr></argument>, <argument><expr><literal type="char">'2'</literal></expr></argument>, <argument><expr><literal type="char">'3'</literal></expr></argument>, <argument><expr><literal type="char">'4'</literal></expr></argument>, <argument><expr><literal type="char">'5'</literal></expr></argument>, <argument><expr><literal type="char">'6'</literal></expr></argument>, <argument><expr><literal type="char">'7'</literal></expr></argument>, <argument><expr><literal type="char">'8'</literal></expr></argument>, <argument><expr><literal type="char">'9'</literal></expr></argument>,
                    <argument><expr><literal type="char">'a'</literal></expr></argument>, <argument><expr><literal type="char">'b'</literal></expr></argument>, <argument><expr><literal type="char">'c'</literal></expr></argument>, <argument><expr><literal type="char">'d'</literal></expr></argument>, <argument><expr><literal type="char">'e'</literal></expr></argument>, <argument><expr><literal type="char">'f'</literal></expr></argument>, <argument><expr><literal type="char">'A'</literal></expr></argument>, <argument><expr><literal type="char">'B'</literal></expr></argument>, <argument><expr><literal type="char">'C'</literal></expr></argument>, <argument><expr><literal type="char">'D'</literal></expr></argument>, <argument><expr><literal type="char">'E'</literal></expr></argument>, <argument><expr><literal type="char">'F'</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>char</name></type> <name>c</name> <range>: <expr><call><name><name>str</name><operator>.</operator><name>toCharArray</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>set</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>int</name></type> <name>getDelimiterCount</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>ip</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>delimiter</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>char</name></type> <name>c</name> <range>: <expr><call><name><name>ip</name><operator>.</operator><name>toCharArray</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>delimiter</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
            <return>return <expr><name>count</name></expr>;</return>
        </block_content>}</block></function>
    }</block></class>
}</block></class>
</unit>
