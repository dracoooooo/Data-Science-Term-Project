<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\raw\solutions\_652.java"><package>package <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>solutions</name></name>;</package>

<import>import <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>common</name><operator>.</operator><name>classes</name><operator>.</operator><name>TreeNode</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>LinkedList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Queue</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>

<class><specifier>public</specifier> class <name>_652</name> <block>{
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution1</name> <block>{

        <comment type="block" format="javadoc">/**credit: https://discuss.leetcode.com/topic/97584/java-concise-postorder-traversal-solution*/</comment>

        <comment type="block" format="javadoc">/**
         * You don't actually need to check if every other tree is a duplicate of current node,
         * just when you go through each node, you'll see whether there's already one in the map,
         * since map.containsKey() checks this TreeNode.
         */</comment>
        <function><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>TreeNode</name></argument>&gt;</argument_list></name></type> <name>findDuplicateSubtrees</name><parameter_list>(<parameter><decl><type><name>TreeNode</name></type> <name>root</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>TreeNode</name></argument>&gt;</argument_list></name></type> <name>res</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>postorder</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>res</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>String</name></type> <name>postorder</name><parameter_list>(<parameter><decl><type><name>TreeNode</name></type> <name>curr</name></decl></parameter>, <parameter><decl><type><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>map</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>TreeNode</name></argument>&gt;</argument_list></name></type> <name>res</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>curr</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="string">"#"</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>serial</name> <init>= <expr><name><name>curr</name><operator>.</operator><name>val</name></name> <operator>+</operator> <literal type="string">","</literal> <operator>+</operator> <call><name>postorder</name><argument_list>(<argument><expr><name><name>curr</name><operator>.</operator><name>left</name></name></expr></argument>, <argument><expr><name>map</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">","</literal> <operator>+</operator> <call><name>postorder</name><argument_list>(<argument><expr><name><name>curr</name><operator>.</operator><name>right</name></name></expr></argument>, <argument><expr><name>map</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>map</name><operator>.</operator><name>getOrDefault</name></name><argument_list>(<argument><expr><name>serial</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>res</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>curr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>serial</name></expr></argument>, <argument><expr><call><name><name>map</name><operator>.</operator><name>getOrDefault</name></name><argument_list>(<argument><expr><name>serial</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>serial</name></expr>;</return>
        </block_content>}</block></function>
    }</block></class>
}</block></class>
</unit>
