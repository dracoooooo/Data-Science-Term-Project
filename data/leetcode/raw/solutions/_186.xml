<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\raw\solutions\_186.java"><package>package <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>solutions</name></name>;</package>

<comment type="block" format="javadoc">/**
 * 186. Reverse Words in a String II

 Given an input string, reverse the string word by word. A word is defined as a sequence of non-space characters.

 The input string does not contain leading or trailing spaces and the words are always separated by a single space.

 For example,
 Given s = "the sky is blue",
 return "blue is sky the".

 Could you do it in-place without allocating extra space?
 */</comment>
<class><specifier>public</specifier> class <name>_186</name> <block>{
  <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution1</name> <block>{
    <function><type><specifier>public</specifier> <name>void</name></type> <name>reverseWords</name><parameter_list>(<parameter><decl><type><name><name>char</name><index>[]</index></name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <comment type="line">// Three steps to reverse</comment>
      <comment type="line">// 1, reverse the whole sentence</comment>
      <expr_stmt><expr><call><name>reverse</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>s</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="line">// 2, reverse each word</comment>
      <decl_stmt><decl><type><name>int</name></type> <name>start</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>reverse</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>start</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
      <comment type="line">// 3, reverse the last word, if there is only one word this will solve the corner case</comment>
      <expr_stmt><expr><call><name>reverse</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name><name>s</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>reverse</name><parameter_list>(<parameter><decl><type><name><name>char</name><index>[]</index></name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>end</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <while>while <condition>(<expr><name>start</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>char</name></type> <name>temp</name> <init>= <expr><name><name>s</name><index>[<expr><name>start</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>s</name><index>[<expr><name>start</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><name>end</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>s</name><index>[<expr><name>end</name><operator>--</operator></expr>]</index></name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>
      </block_content>}</block></while>
    </block_content>}</block></function>
  }</block></class>

}</block></class>
</unit>
