<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\raw\solutions\_200.java"><package>package <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>solutions</name></name>;</package>

<comment type="block" format="javadoc">/**
 * 200. Number of Islands
 *
 * Given a 2d grid map of '1's (land) and '0's (water),
 * count the number of islands.
 * An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically.
 * You may assume all four edges of the grid are all surrounded by water.

 Example 1:
 11110
 11010
 11000
 00000
 Answer: 1

 Example 2:
 11000
 11000
 00100
 00011
 Answer: 3

 */</comment>
<class><specifier>public</specifier> class <name>_200</name> <block>{

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution1</name> <block>{

        <function><type><specifier>public</specifier> <name>int</name></type> <name>numIslands</name><parameter_list>(<parameter><decl><type><name><name>char</name><index>[]</index><index>[]</index></name></type> <name>grid</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>grid</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name><name>grid</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="number">0</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>m</name> <init>= <expr><name><name>grid</name><operator>.</operator><name>length</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><name><name>grid</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>length</name></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>m</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name><name>grid</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <literal type="char">'1'</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>grid</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></for>
            </block_content>}</block></for>
            <return>return <expr><name>count</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><name>void</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name><name>char</name><index>[]</index><index>[]</index></name></type> <name>grid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>i</name> <operator>&gt;=</operator> <name>m</name> <operator>||</operator> <name>j</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>j</name> <operator>&gt;=</operator> <name>n</name> <operator>||</operator> <name><name>grid</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <literal type="char">'0'</literal></expr>)</condition> <block>{<block_content>
                <return>return;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name><name>grid</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>grid</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>grid</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>grid</name></expr></argument>, <argument><expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>grid</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>
    }</block></class>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution2</name> <block>{

        <class>class <name>UnionFind</name> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>m</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>ids</name></decl>;</decl_stmt>

            <constructor><specifier>public</specifier> <name>UnionFind</name><parameter_list>(<parameter><decl><type><name><name>char</name><index>[]</index><index>[]</index></name></type> <name>grid</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <expr_stmt><expr><name>m</name> <operator>=</operator> <name><name>grid</name><operator>.</operator><name>length</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>grid</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>length</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>ids</name> <operator>=</operator> <operator>new</operator> <name><name>int</name><index>[<expr><name>m</name> <operator>*</operator> <name>n</name></expr>]</index></name></expr>;</expr_stmt>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>m</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                    <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><name><name>grid</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <literal type="char">'1'</literal></expr>)</condition> <block>{<block_content>
                            <expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
                            <expr_stmt><expr><name><name>ids</name><index>[<expr><name>i</name> <operator>*</operator> <name>n</name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>=</operator> <name>i</name> <operator>*</operator> <name>n</name> <operator>+</operator> <name>j</name></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></for>
                </block_content>}</block></for>
            </block_content>}</block></constructor>

            <function><type><specifier>public</specifier> <name>void</name></type> <name>union</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><call><name>find</name><argument_list>(<argument><expr><name>ids</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><call><name>find</name><argument_list>(<argument><expr><name>ids</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>x</name> <operator>!=</operator> <name>y</name></expr>)</condition> <block>{<block_content>
                    <comment type="block" format="javadoc">/**note: this is when x != y, only in this case, we should union these two nodes, which makes sense naturally.*/</comment>
                    <expr_stmt><expr><name>count</name><operator>--</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>ids</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt><comment type="line">//ids[y] = x; //also works</comment>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></function>

            <function><type><specifier>public</specifier> <name>int</name></type> <name>find</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>ids</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>ids</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>i</name></expr>)</condition> <block>{<block_content>
                    <return>return <expr><name>i</name></expr>;</return>
                </block_content>}</block></if></if_stmt>
                <return>return <expr><call><name>find</name><argument_list>(<argument><expr><name>ids</name></expr></argument>, <argument><expr><name><name>ids</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></function>
        }</block></class>

        <function><type><specifier>public</specifier> <name>int</name></type> <name>numIslands</name><parameter_list>(<parameter><decl><type><name><name>char</name><index>[]</index><index>[]</index></name></type> <name>grid</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>grid</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name><name>grid</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>grid</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="number">0</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>dirs</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[]</index></name><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>UnionFind</name></type> <name>uf</name> <init>= <expr><operator>new</operator> <call><name>UnionFind</name><argument_list>(<argument><expr><name>grid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>m</name> <init>= <expr><name><name>grid</name><operator>.</operator><name>length</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><name><name>grid</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>length</name></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>m</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name><name>grid</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <literal type="char">'1'</literal></expr>)</condition> <block>{<block_content>
                        <for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                            <decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name>i</name> <operator>+</operator> <name><name>dirs</name><index>[<expr><name>k</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                            <decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><name>j</name> <operator>+</operator> <name><name>dirs</name><index>[<expr><name>k</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
                            <if_stmt><if>if <condition>(<expr><name>x</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>x</name> <operator>&lt;</operator> <name>m</name> <operator>&amp;&amp;</operator> <name>y</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>y</name> <operator>&lt;</operator> <name>n</name> <operator>&amp;&amp;</operator> <name><name>grid</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name></expr>]</index></name> <operator>==</operator> <literal type="char">'1'</literal></expr>)</condition> <block>{<block_content>
                                <decl_stmt><decl><type><name>int</name></type> <name>id1</name> <init>= <expr><name>i</name> <operator>*</operator> <name>n</name> <operator>+</operator> <name>j</name></expr></init></decl>;</decl_stmt>
                                <decl_stmt><decl><type><name>int</name></type> <name>id2</name> <init>= <expr><name>x</name> <operator>*</operator> <name>n</name> <operator>+</operator> <name>y</name></expr></init></decl>;</decl_stmt>
                                <expr_stmt><expr><call><name><name>uf</name><operator>.</operator><name>union</name></name><argument_list>(<argument><expr><name>id1</name></expr></argument>, <argument><expr><name>id2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            </block_content>}</block></if></if_stmt>
                        </block_content>}</block></for>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></for>
            </block_content>}</block></for>
            <return>return <expr><name><name>uf</name><operator>.</operator><name>count</name></name></expr>;</return>
        </block_content>}</block></function>
    }</block></class>
}</block></class>
</unit>
