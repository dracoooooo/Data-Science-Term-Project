<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\raw\solutions\_170.java"><package>package <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>solutions</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

<class><specifier>public</specifier> class <name>_170</name> <block>{
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution1</name> <block>{
        <class>class <name>TwoSum</name> <block>{

            <decl_stmt><decl><type><specifier>private</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>map</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>private</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>list</name></decl>;</decl_stmt>

            <comment type="block" format="javadoc">/**
             * Initialize your data structure here.
             */</comment>
            <constructor><specifier>public</specifier> <name>TwoSum</name><parameter_list>()</parameter_list> <block>{<block_content>
                <expr_stmt><expr><name>map</name> <operator>=</operator> <operator>new</operator> <call><name>HashMap</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>list</name> <operator>=</operator> <operator>new</operator> <call><name>ArrayList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></constructor>


            <comment type="line">// Add the number to an internal data structure.</comment>
            <function><type><specifier>public</specifier> <name>void</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>number</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>number</name></expr></argument>, <argument><expr><call><name><name>map</name><operator>.</operator><name>getOrDefault</name></name><argument_list>(<argument><expr><name>number</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></function>

            <comment type="line">// Find if there exists any pair of numbers which sum is equal to the value.</comment>
            <function><type><specifier>public</specifier> <name>boolean</name></type> <name>find</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>list</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                    <decl_stmt><decl><type><name>int</name></type> <name>val1</name> <init>= <expr><call><name><name>list</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>val2</name> <init>= <expr><name>value</name> <operator>-</operator> <name>val1</name></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><call><name><name>map</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>val2</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><name>val1</name> <operator>==</operator> <name>val2</name></expr>)</condition> <block>{<block_content>
                            <if_stmt><if>if <condition>(<expr><call><name><name>map</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>val2</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
                            </block_content>}</block></if></if_stmt>
                        </block_content>}</block></if> <else>else <block>{<block_content>
                            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
                        </block_content>}</block></else></if_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></for>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return>
            </block_content>}</block></function>
        }</block></class>
    }</block></class>
}</block></class>
</unit>
