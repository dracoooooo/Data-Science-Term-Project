<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\raw\solutions\_439.java"><package>package <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>solutions</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayDeque</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Deque</name></name>;</import>

<class><specifier>public</specifier> class <name>_439</name> <block>{

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution1</name> <block>{
        <comment type="block" format="javadoc">/**
         * Below is my original solution, but looking at Discuss, a more concise way is to use just one
         * stack, process it from right to left, example: https://discuss.leetcode.com/topic/64409/very-easy-1-pass-stack-solution-in-java-no-string-concat
         */</comment>

        <function><type><specifier>public</specifier> <name>String</name></type> <name>parseTernary</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>expression</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name><name>Deque</name><argument_list type="generic">&lt;<argument><name>Character</name></argument>&gt;</argument_list></name></type> <name>stack</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayDeque</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>Deque</name><argument_list type="generic">&lt;<argument><name>Character</name></argument>&gt;</argument_list></name></type> <name>tmpStack</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayDeque</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>char</name></type> <name>c</name> <range>: <expr><call><name><name>expression</name><operator>.</operator><name>toCharArray</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                <expr_stmt><expr><call><name><name>stack</name><operator>.</operator><name>addFirst</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <while>while <condition>(<expr><operator>!</operator><call><name><name>stack</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>stack</name><operator>.</operator><name>peek</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="char">'?'</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>tmpStack</name><operator>.</operator><name>addFirst</name></name><argument_list>(<argument><expr><call><name><name>stack</name><operator>.</operator><name>pollFirst</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <decl_stmt><decl><type><name>char</name></type> <name>char1</name> <init>= <expr><call><name><name>tmpStack</name><operator>.</operator><name>removeFirst</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>tmpStack</name><operator>.</operator><name>removeFirst</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt><comment type="line">//remove ':'</comment>
                    <decl_stmt><decl><type><name>char</name></type> <name>char2</name> <init>= <expr><call><name><name>tmpStack</name><operator>.</operator><name>removeFirst</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>stack</name><operator>.</operator><name>removeFirst</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt><comment type="line">//remove '?'</comment>
                    <decl_stmt><decl><type><name>char</name></type> <name>judge</name> <init>= <expr><call><name><name>stack</name><operator>.</operator><name>removeFirst</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>tmpStack</name><operator>.</operator><name>addFirst</name></name><argument_list>(<argument><expr><ternary><condition><expr><name>judge</name> <operator>==</operator> <literal type="char">'T'</literal></expr> ?</condition><then> <expr><name>char1</name></expr> </then><else>: <expr><name>char2</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <while>while <condition>(<expr><operator>!</operator><call><name><name>tmpStack</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>stack</name><operator>.</operator><name>addFirst</name></name><argument_list>(<argument><expr><call><name><name>tmpStack</name><operator>.</operator><name>pollFirst</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></while>
                </block_content>}</block></else></if_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>stack</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></while>
            <return>return <expr><call><name><name>Character</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><call><name><name>stack</name><operator>.</operator><name>removeFirst</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

}</block></class>
</unit>
