<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\raw\solutions\_307.java"><package>package <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>solutions</name></name>;</package>

<class><specifier>public</specifier> class <name>_307</name> <block>{

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution1</name> <block>{
        <class>class <name>NumArray</name> <block>{
            <class>class <name>SegmentTreeNode</name> <block>{
                <decl_stmt><decl><type><name>SegmentTreeNode</name></type> <name>left</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>SegmentTreeNode</name></type> <name>right</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>start</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>end</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>sum</name></decl>;</decl_stmt>

                <constructor><specifier>public</specifier> <name>SegmentTreeNode</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>end</name></decl></parameter>)</parameter_list> <block>{<block_content>
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>start</name></name> <operator>=</operator> <name>start</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>end</name></name> <operator>=</operator> <name>end</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>left</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>right</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>sum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                </block_content>}</block></constructor>
            }</block></class>

            <decl_stmt><decl><type><specifier>private</specifier> <name>SegmentTreeNode</name></type> <name>root</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

            <constructor><specifier>public</specifier> <name>NumArray</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>nums</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <expr_stmt><expr><name>root</name> <operator>=</operator> <call><name>buildSegmentTree</name><argument_list>(<argument><expr><name>nums</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>nums</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></constructor>

            <function><type><name>SegmentTreeNode</name></type> <name>buildSegmentTree</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>nums</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>end</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>start</name> <operator>&gt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
                    <return>return <expr><literal type="null">null</literal></expr>;</return>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <decl_stmt><decl><type><name>SegmentTreeNode</name></type> <name>root</name> <init>= <expr><operator>new</operator> <call><name>SegmentTreeNode</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>start</name> <operator>==</operator> <name>end</name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name><name>root</name><operator>.</operator><name>sum</name></name> <operator>=</operator> <name><name>nums</name><index>[<expr><name>start</name></expr>]</index></name></expr>;</expr_stmt>
                    </block_content>}</block></if> <else>else <block>{<block_content>
                        <decl_stmt><decl><type><name>int</name></type> <name>mid</name> <init>= <expr><name>start</name> <operator>+</operator> <operator>(</operator><name>end</name> <operator>-</operator> <name>start</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><name><name>root</name><operator>.</operator><name>left</name></name> <operator>=</operator> <call><name>buildSegmentTree</name><argument_list>(<argument><expr><name>nums</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>mid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>root</name><operator>.</operator><name>right</name></name> <operator>=</operator> <call><name>buildSegmentTree</name><argument_list>(<argument><expr><name>nums</name></expr></argument>, <argument><expr><name>mid</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>root</name><operator>.</operator><name>sum</name></name> <operator>=</operator> <name><name>root</name><operator>.</operator><name>left</name><operator>.</operator><name>sum</name></name> <operator>+</operator> <name><name>root</name><operator>.</operator><name>right</name><operator>.</operator><name>sum</name></name></expr>;</expr_stmt>
                    </block_content>}</block></else></if_stmt>
                    <return>return <expr><name>root</name></expr>;</return>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></function>

            <function><type><name>void</name></type> <name>update</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></function>

            <function><type><name>void</name></type> <name>update</name><parameter_list>(<parameter><decl><type><name>SegmentTreeNode</name></type> <name>root</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>root</name><operator>.</operator><name>start</name></name> <operator>==</operator> <name><name>root</name><operator>.</operator><name>end</name></name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name><name>root</name><operator>.</operator><name>sum</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <decl_stmt><decl><type><name>int</name></type> <name>mid</name> <init>= <expr><name><name>root</name><operator>.</operator><name>start</name></name> <operator>+</operator> <operator>(</operator><name><name>root</name><operator>.</operator><name>end</name></name> <operator>-</operator> <name><name>root</name><operator>.</operator><name>start</name></name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&lt;=</operator> <name>mid</name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><name><name>root</name><operator>.</operator><name>left</name></name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if> <else>else <block>{<block_content>
                        <expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><name><name>root</name><operator>.</operator><name>right</name></name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></else></if_stmt>
                    <expr_stmt><expr><name><name>root</name><operator>.</operator><name>sum</name></name> <operator>=</operator> <name><name>root</name><operator>.</operator><name>left</name><operator>.</operator><name>sum</name></name> <operator>+</operator> <name><name>root</name><operator>.</operator><name>right</name><operator>.</operator><name>sum</name></name></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></function>

            <function><type><specifier>public</specifier> <name>int</name></type> <name>sumRange</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <return>return <expr><call><name>sumRange</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></function>

            <function><type><name>int</name></type> <name>sumRange</name><parameter_list>(<parameter><decl><type><name>SegmentTreeNode</name></type> <name>root</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>end</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>root</name><operator>.</operator><name>end</name></name> <operator>==</operator> <name>end</name> <operator>&amp;&amp;</operator> <name><name>root</name><operator>.</operator><name>start</name></name> <operator>==</operator> <name>start</name></expr>)</condition> <block>{<block_content>
                    <return>return <expr><name><name>root</name><operator>.</operator><name>sum</name></name></expr>;</return>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <decl_stmt><decl><type><name>int</name></type> <name>mid</name> <init>= <expr><name><name>root</name><operator>.</operator><name>start</name></name> <operator>+</operator> <operator>(</operator><name><name>root</name><operator>.</operator><name>end</name></name> <operator>-</operator> <name><name>root</name><operator>.</operator><name>start</name></name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>end</name> <operator>&lt;=</operator> <name>mid</name></expr>)</condition> <block>{<block_content>
                        <return>return <expr><call><name>sumRange</name><argument_list>(<argument><expr><name><name>root</name><operator>.</operator><name>left</name></name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</return>
                    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>start</name> <operator>&gt;=</operator> <name>mid</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                        <return>return <expr><call><name>sumRange</name><argument_list>(<argument><expr><name><name>root</name><operator>.</operator><name>right</name></name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</return>
                    </block_content>}</block></if> <else>else <block>{<block_content>
                        <return>return <expr><call><name>sumRange</name><argument_list>(<argument><expr><name><name>root</name><operator>.</operator><name>right</name></name></expr></argument>, <argument><expr><name>mid</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>sumRange</name><argument_list>(<argument><expr><name><name>root</name><operator>.</operator><name>left</name></name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>mid</name></expr></argument>)</argument_list></call></expr>;</return>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></function>
        }</block></class>
    }</block></class>
}</block></class>

</unit>
