<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\raw\solutions\_399.java"><package>package <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>solutions</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

<class><specifier>public</specifier> class <name>_399</name> <block>{

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution1</name> <block>{
        <comment type="block" format="javadoc">/**
         * Credit: https://medium.com/@null00/leetcode-evaluate-division-52a0158488c1
         */</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>root</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Double</name></argument>&gt;</argument_list></name></type> <name>rate</name></decl>;</decl_stmt>

        <function><type><specifier>public</specifier> <name><name>double</name><index>[]</index></name></type> <name>calcEquation</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>equations</name></decl></parameter>, <parameter><decl><type><name><name>double</name><index>[]</index></name></type> <name>values</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>queries</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name>root</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>rate</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name><name>equations</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>String</name></type> <name>X</name> <init>= <expr><call><name><name>equations</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>Y</name> <init>= <expr><call><name><name>equations</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>root</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>X</name></expr></argument>, <argument><expr><name>X</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>root</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>Y</name></expr></argument>, <argument><expr><name>Y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>rate</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>X</name></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>rate</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>Y</name></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>

            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>String</name></type> <name>X</name> <init>= <expr><call><name><name>equations</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>Y</name> <init>= <expr><call><name><name>equations</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>union</name><argument_list>(<argument><expr><name>X</name></expr></argument>, <argument><expr><name>Y</name></expr></argument>, <argument><expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>

            <decl_stmt><decl><type><name><name>double</name><index>[]</index></name></type> <name>result</name> <init>= <expr><operator>new</operator> <name><name>double</name><index>[<expr><call><name><name>queries</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>queries</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>String</name></type> <name>X</name> <init>= <expr><call><name><name>queries</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>Y</name> <init>= <expr><call><name><name>queries</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>root</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>X</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name><name>root</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>Y</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name><name>result</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>

                <decl_stmt><decl><type><name>String</name></type> <name>rootx</name> <init>= <expr><call><name>findRoot</name><argument_list>(<argument><expr><name>X</name></expr></argument>, <argument><expr><name>X</name></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>rooty</name> <init>= <expr><call><name>findRoot</name><argument_list>(<argument><expr><name>Y</name></expr></argument>, <argument><expr><name>Y</name></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name><name>result</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><call><name><name>rootx</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>rooty</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name><name>rate</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>X</name></expr></argument>)</argument_list></call> <operator>/</operator> <call><name><name>rate</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>Y</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>-</operator><literal type="number">1.0</literal></expr></else></ternary></expr>;</expr_stmt>
            </block_content>}</block></for>

            <return>return <expr><name>result</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>void</name></type> <name>union</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>X</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>Y</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>rootx</name> <init>= <expr><call><name>findRoot</name><argument_list>(<argument><expr><name>X</name></expr></argument>, <argument><expr><name>X</name></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>rooty</name> <init>= <expr><call><name>findRoot</name><argument_list>(<argument><expr><name>Y</name></expr></argument>, <argument><expr><name>Y</name></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>root</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>rootx</name></expr></argument>, <argument><expr><name>rooty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>r1</name> <init>= <expr><call><name><name>rate</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>X</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>r2</name> <init>= <expr><call><name><name>rate</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>Y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>rate</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>rootx</name></expr></argument>, <argument><expr><name>v</name> <operator>*</operator> <name>r2</name> <operator>/</operator> <name>r1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>String</name></type> <name>findRoot</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>originalX</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>X</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>root</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>X</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>X</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>root</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>originalX</name></expr></argument>, <argument><expr><name>X</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>rate</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>originalX</name></expr></argument>, <argument><expr><name>r</name> <operator>*</operator> <call><name><name>rate</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>X</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>X</name></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <return>return <expr><call><name>findRoot</name><argument_list>(<argument><expr><name>originalX</name></expr></argument>, <argument><expr><call><name><name>root</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>X</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>r</name> <operator>*</operator> <call><name><name>rate</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>X</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>
    }</block></class>
}</block></class>
</unit>
