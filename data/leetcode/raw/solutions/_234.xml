<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\raw\solutions\_234.java"><package>package <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>solutions</name></name>;</package>

<import>import <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>common</name><operator>.</operator><name>classes</name><operator>.</operator><name>ListNode</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<class><specifier>public</specifier> class <name>_234</name> <block>{
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution1</name> <block>{
        <comment type="block" format="javadoc">/**
         * O(n) time
         * O(1) space
         */</comment>
        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isPalindrome</name><parameter_list>(<parameter><decl><type><name>ListNode</name></type> <name>head</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>head</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <decl_stmt><decl><type><name>ListNode</name></type> <name>slow</name> <init>= <expr><name>head</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ListNode</name></type> <name>fast</name> <init>= <expr><name>head</name></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><name><name>fast</name><operator>.</operator><name>next</name></name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name><name>fast</name><operator>.</operator><name>next</name><operator>.</operator><name>next</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>fast</name> <operator>=</operator> <name><name>fast</name><operator>.</operator><name>next</name><operator>.</operator><name>next</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>slow</name> <operator>=</operator> <name><name>slow</name><operator>.</operator><name>next</name></name></expr>;</expr_stmt>
            </block_content>}</block></while>

            <decl_stmt><decl><type><name>ListNode</name></type> <name>secondHalfHead</name> <init>= <expr><call><name>reverse</name><argument_list>(<argument><expr><name><name>slow</name><operator>.</operator><name>next</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ListNode</name></type> <name>firstHalfHead</name> <init>= <expr><name>head</name></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><name>firstHalfHead</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>secondHalfHead</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>firstHalfHead</name><operator>.</operator><name>val</name></name> <operator>!=</operator> <name><name>secondHalfHead</name><operator>.</operator><name>val</name></name></expr>)</condition> <block>{<block_content>
                    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name>firstHalfHead</name> <operator>=</operator> <name><name>firstHalfHead</name><operator>.</operator><name>next</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>secondHalfHead</name> <operator>=</operator> <name><name>secondHalfHead</name><operator>.</operator><name>next</name></name></expr>;</expr_stmt>
            </block_content>}</block></while>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>ListNode</name></type> <name>reverse</name><parameter_list>(<parameter><decl><type><name>ListNode</name></type> <name>head</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>ListNode</name></type> <name>newHead</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><name>head</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>ListNode</name></type> <name>next</name> <init>= <expr><name><name>head</name><operator>.</operator><name>next</name></name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name><name>head</name><operator>.</operator><name>next</name></name> <operator>=</operator> <name>newHead</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>newHead</name> <operator>=</operator> <name>head</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>head</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
            </block_content>}</block></while>
            <return>return <expr><name>newHead</name></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution2</name> <block>{
        <comment type="block" format="javadoc">/**
         * O(n) time
         * O(n) space
         */</comment>
        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isPalindrome</name><parameter_list>(<parameter><decl><type><name>ListNode</name></type> <name>head</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ListNode</name></type> <name>fast</name> <init>= <expr><name>head</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ListNode</name></type> <name>slow</name> <init>= <expr><name>head</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>firstHalf</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><name>fast</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name><name>fast</name><operator>.</operator><name>next</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>fast</name> <operator>=</operator> <name><name>fast</name><operator>.</operator><name>next</name><operator>.</operator><name>next</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>firstHalf</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>slow</name><operator>.</operator><name>val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>slow</name> <operator>=</operator> <name><name>slow</name><operator>.</operator><name>next</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>len</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
            </block_content>}</block></while>
            <if_stmt><if>if <condition>(<expr><name>fast</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>len</name> <operator>%</operator> <literal type="number">2</literal> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>slow</name> <operator>=</operator> <name><name>slow</name><operator>.</operator><name>next</name></name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><call><name><name>firstHalf</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><name>slow</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>firstHalf</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name><operator>--</operator></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>slow</name><operator>.</operator><name>val</name></name></expr>)</condition> <block>{<block_content>
                    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name>slow</name> <operator>=</operator> <name><name>slow</name><operator>.</operator><name>next</name></name></expr>;</expr_stmt>
            </block_content>}</block></while>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

}</block></class>
</unit>
