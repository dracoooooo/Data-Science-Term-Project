<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\raw\solutions\_553.java"><package>package <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>solutions</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>StringJoiner</name></name>;</import>

<class><specifier>public</specifier> class <name>_553</name> <block>{
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution1</name> <block>{
        <comment type="block" format="javadoc">/**
         * Credit: https://github.com/lydxlx1/LeetCode/blob/master/src/_553.java
         */</comment>
        <function><type><specifier>public</specifier> <name>String</name></type> <name>optimalDivision</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>nums</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <comment type="block" format="javadoc">/**https://docs.oracle.com/javase/8/docs/api/java/util/StringJoiner.html:
             * StringJoiner is used to construct a sequence of characters separated by a delimiter and optionally starting with a supplied prefix and ending with a supplied suffix.
             * The String "[George:Sally:Fred]" may be constructed as follows:
             StringJoiner sj = new StringJoiner(":", "[", "]");
             sj.add("George").add("Sally").add("Fred");
             String desiredString = sj.toString();*/</comment>

            <if_stmt><if>if <condition>(<expr><name><name>nums</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="string">""</literal> <operator>+</operator> <name><name>nums</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>nums</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><name><name>nums</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="string">"/"</literal> <operator>+</operator> <name><name>nums</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <comment type="block" format="javadoc">/**Tricky one: the solution is fixed: always wrap the one from the second until the last.
             * Another important thing to note that such way could work is that:
             * the prerequisite is: Elements will be in range [2,1000], so no elements are smaller than 1.*/</comment>
            <decl_stmt><decl><type><name>StringJoiner</name></type> <name>stringJoiner</name> <init>= <expr><operator>new</operator> <call><name>StringJoiner</name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>nums</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <expr_stmt><expr><call><name><name>stringJoiner</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="string">""</literal> <operator>+</operator> <name><name>nums</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <return>return <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"%d/(%s)"</literal></expr></argument>, <argument><expr><name><name>nums</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name><name>stringJoiner</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

}</block></class>
</unit>
