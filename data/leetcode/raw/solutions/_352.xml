<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\raw\solutions\_352.java"><package>package <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>solutions</name></name>;</package>

<import>import <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>common</name><operator>.</operator><name>classes</name><operator>.</operator><name>Interval</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>TreeMap</name></name>;</import>

<class><specifier>public</specifier> class <name>_352</name> <block>{

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution1</name> <block>{
        <class><specifier>public</specifier> <specifier>static</specifier> class <name>SummaryRanges</name> <block>{

            <comment type="block" format="javadoc">/**
             * Use treemap, key is the start of the interval.
             */</comment>
            <decl_stmt><decl><type><name><name>TreeMap</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>, <argument><name>Interval</name></argument>&gt;</argument_list></name></type> <name>treeMap</name></decl>;</decl_stmt>

            <comment type="block" format="javadoc">/**
             * Initialize your data structure here.
             */</comment>
            <constructor><specifier>public</specifier> <name>SummaryRanges</name><parameter_list>()</parameter_list> <block>{<block_content>
                <expr_stmt><expr><name>treeMap</name> <operator>=</operator> <operator>new</operator> <call><name><name>TreeMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></constructor>

            <function><type><specifier>public</specifier> <name>void</name></type> <name>addNum</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>treeMap</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <return>return;</return>
                </block_content>}</block></if></if_stmt>
                <decl_stmt><decl><type><name>Integer</name></type> <name>lower</name> <init>= <expr><call><name><name>treeMap</name><operator>.</operator><name>lowerKey</name></name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Integer</name></type> <name>higher</name> <init>= <expr><call><name><name>treeMap</name><operator>.</operator><name>higherKey</name></name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>lower</name> <operator>!=</operator> <literal type="null">null</literal>
                        <operator>&amp;&amp;</operator> <name>higher</name> <operator>!=</operator> <literal type="null">null</literal>
                        <operator>&amp;&amp;</operator> <call><name><name>treeMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>lower</name></expr></argument>)</argument_list></call><operator>.</operator><name>end</name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <name>val</name>
                        <operator>&amp;&amp;</operator> <name>higher</name> <operator>==</operator> <name>val</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>treeMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>lower</name></expr></argument>)</argument_list></call><operator>.</operator><name>end</name> <operator>=</operator> <call><name><name>treeMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>higher</name></expr></argument>)</argument_list></call><operator>.</operator><name>end</name></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>treeMap</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>higher</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>lower</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>treeMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>lower</name></expr></argument>)</argument_list></call><operator>.</operator><name>end</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name>val</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>treeMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>lower</name></expr></argument>)</argument_list></call><operator>.</operator><name>end</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><call><name><name>treeMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>lower</name></expr></argument>)</argument_list></call><operator>.</operator><name>end</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>higher</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>higher</name> <operator>==</operator> <name>val</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>treeMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Interval</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><call><name><name>treeMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>higher</name></expr></argument>)</argument_list></call><operator>.</operator><name>end</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>treeMap</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>higher</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><call><name><name>treeMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Interval</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></function>

            <function><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Interval</name></argument>&gt;</argument_list></name></type> <name>getIntervals</name><parameter_list>()</parameter_list> <block>{<block_content>
                <return>return <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>treeMap</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></function>
        }</block></class>
    }</block></class>
}</block></class>
</unit>
