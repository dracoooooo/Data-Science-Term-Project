<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\raw\solutions\_19.java"><package>package <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>solutions</name></name>;</package>

<import>import <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>common</name><operator>.</operator><name>classes</name><operator>.</operator><name>ListNode</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>common</name><operator>.</operator><name>utils</name><operator>.</operator><name>CommonUtils</name></name>;</import>

<class><specifier>public</specifier> class <name>_19</name> <block>{

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution1</name> <block>{
        <comment type="block" format="javadoc">/**
         * Naive/most straightforward approach:
         * go through the list, find its total length, then go through the list a second time:
         * this time, pause at the delta point, then assign its next.next pointer to next.
         * This approach has to traverse the list twice, not one-pass.
         */</comment>
        <function><type><specifier>public</specifier> <name>ListNode</name></type> <name>removeNthFromEnd</name><parameter_list>(<parameter><decl><type><name>ListNode</name></type> <name>head</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>ListNode</name></type> <name>temp</name> <init>= <expr><name>head</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><name>temp</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>temp</name> <operator>=</operator> <name><name>temp</name><operator>.</operator><name>next</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt>
            </block_content>}</block></while>
            <if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <name>len</name></expr>)</condition> <block>{<block_content>
                <return>return <expr><name><name>head</name><operator>.</operator><name>next</name></name></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><name>temp</name> <operator>=</operator> <name>head</name></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>cut</name> <init>= <expr><name>len</name> <operator>-</operator> <name>n</name></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><name>cut</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>temp</name> <operator>=</operator> <name><name>temp</name><operator>.</operator><name>next</name></name></expr>;</expr_stmt>
            </block_content>}</block></while>
            <if_stmt><if>if <condition>(<expr><name><name>temp</name><operator>.</operator><name>next</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>temp</name><operator>.</operator><name>next</name></name> <operator>=</operator> <name><name>temp</name><operator>.</operator><name>next</name><operator>.</operator><name>next</name></name></expr>;</expr_stmt>
                <return>return <expr><name>head</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution2</name> <block>{
        <function><type><specifier>public</specifier> <name>ListNode</name></type> <name>removeNthFromEnd</name><parameter_list>(<parameter><decl><type><name>ListNode</name></type> <name>head</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <comment type="line">//this approach uses two pointers, fast moves first for n nodes, when fast reaches n, then we start to move slow</comment>
            <comment type="line">//then, when fast reaches null, slow reaches the point where the node should be deleted.</comment>
            <decl_stmt><decl><type><name>ListNode</name></type> <name>dummy</name> <init>= <expr><operator>new</operator> <call><name>ListNode</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>dummy</name><operator>.</operator><name>next</name></name> <operator>=</operator> <name>head</name></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>ListNode</name></type> <name>slow</name> <init>= <expr><name>head</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ListNode</name></type> <name>fast</name> <init>= <expr><name>head</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>tempN</name> <init>= <expr><name>n</name></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><name>tempN</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>fast</name> <operator>=</operator> <name><name>fast</name><operator>.</operator><name>next</name></name></expr>;</expr_stmt>
            </block_content>}</block></while>

            <if_stmt><if>if <condition>(<expr><name>fast</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <comment type="line">// this is for cases like this: [1,2] 2 or [1,2,3,4] 4, namely, remove the head of</comment>
                    <comment type="line">// the list and return the second node from the original list</comment>
                    <expr_stmt><expr><name><name>dummy</name><operator>.</operator><name>next</name></name> <operator>=</operator> <name><name>dummy</name><operator>.</operator><name>next</name><operator>.</operator><name>next</name></name></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <return>return <expr><name><name>dummy</name><operator>.</operator><name>next</name></name></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><name>fast</name> <operator>=</operator> <name><name>fast</name><operator>.</operator><name>next</name></name></expr>;</expr_stmt><comment type="line">//we'll have to move fast pointer one node forward before moving the two together, this way,</comment>
            <comment type="line">//when fast reaches null, slow will be at the previous node to the node that should be deleted, thus, we can change the next pointer easily</comment>

            <while>while <condition>(<expr><name>fast</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>fast</name> <operator>=</operator> <name><name>fast</name><operator>.</operator><name>next</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>slow</name> <operator>=</operator> <name><name>slow</name><operator>.</operator><name>next</name></name></expr>;</expr_stmt>
            </block_content>}</block></while>

            <if_stmt><if>if <condition>(<expr><name><name>slow</name><operator>.</operator><name>next</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>slow</name><operator>.</operator><name>next</name></name> <operator>=</operator> <name><name>slow</name><operator>.</operator><name>next</name><operator>.</operator><name>next</name></name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><name><name>dummy</name><operator>.</operator><name>next</name></name></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution3</name> <block>{
        <comment type="line">//a more concise version using the same idea</comment>
        <function><type><specifier>public</specifier> <name>ListNode</name></type> <name>removeNthFromEnd</name><parameter_list>(<parameter><decl><type><name>ListNode</name></type> <name>head</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>ListNode</name></type> <name>dummy</name> <init>= <expr><operator>new</operator> <call><name>ListNode</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>dummy</name><operator>.</operator><name>next</name></name> <operator>=</operator> <name>head</name></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>ListNode</name></type> <name>slow</name> <init>= <expr><name>dummy</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ListNode</name></type> <name>fast</name> <init>= <expr><name>dummy</name></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><name><name>fast</name><operator>.</operator><name>next</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>slow</name> <operator>=</operator> <name><name>slow</name><operator>.</operator><name>next</name></name></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name>fast</name> <operator>=</operator> <name><name>fast</name><operator>.</operator><name>next</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>n</name><operator>--</operator></expr>;</expr_stmt>
            </block_content>}</block></while>
            <if_stmt><if>if <condition>(<expr><name><name>slow</name><operator>.</operator><name>next</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>slow</name><operator>.</operator><name>next</name></name> <operator>=</operator> <name><name>slow</name><operator>.</operator><name>next</name><operator>.</operator><name>next</name></name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><name><name>dummy</name><operator>.</operator><name>next</name></name></expr>;</return>
        </block_content>}</block></function>
    }</block></class>
}</block></class>
</unit>
