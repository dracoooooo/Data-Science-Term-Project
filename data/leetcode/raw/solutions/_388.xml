<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\raw\solutions\_388.java"><package>package <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>solutions</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Stack</name></name>;</import>

<class><specifier>public</specifier> class <name>_388</name> <block>{
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution1</name> <block>{
        <function><type><specifier>public</specifier> <name>int</name></type> <name>lengthLongestPath</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>input</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name><name>Stack</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>stack</name> <init>= <expr><operator>new</operator> <call><name>Stack</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>longestLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>currDirLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>currLevel</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>nextLevel</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>isFile</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Character</name></type> <name>period</name> <init>= <expr><literal type="char">'.'</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Character</name></type> <name>space</name> <init>= <expr><literal type="char">' '</literal></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <call><name><name>input</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>currLevel</name> <operator>=</operator> <name>nextLevel</name></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>currStrLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                <while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <call><name><name>input</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><call><name><name>Character</name><operator>.</operator><name>isLetterOrDigit</name></name><argument_list>(<argument><expr><call><name><name>input</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                        <operator>||</operator> <call><name><name>period</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>input</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>space</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>input</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><call><name><name>period</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>input</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>isFile</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><name>currStrLen</name><operator>++</operator></expr>;</expr_stmt>
                </block_content>}</block></while>
                <if_stmt><if>if <condition>(<expr><name>isFile</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>longestLen</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name>longestLen</name></expr></argument>, <argument><expr><name>currDirLen</name> <operator>+</operator> <name>currStrLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><name>currDirLen</name> <operator>+=</operator> <name>currStrLen</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>stack</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><name>currStrLen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>

                <expr_stmt><expr><name>nextLevel</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>i</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt><comment type="line">//increment one to let it pass "\n" and start from "\t"</comment>
                <while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <call><name><name>input</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name><name>input</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><literal type="string">"\t"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>nextLevel</name><operator>++</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><name>i</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                </block_content>}</block></while>

                <if_stmt><if>if <condition>(<expr><name>nextLevel</name> <operator>&lt;</operator> <name>currLevel</name></expr>)</condition> <block>{<block_content>
                    <decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>isFile</name></expr>)</condition> <block>{<block_content>
                        <while>while <condition>(<expr><operator>!</operator><call><name><name>stack</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>j</name> <operator>&lt;</operator> <operator>(</operator><name>currLevel</name> <operator>-</operator> <name>nextLevel</name><operator>)</operator></expr>)</condition> <block>{<block_content>
                            <expr_stmt><expr><name>currDirLen</name> <operator>-=</operator> <call><name><name>stack</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
                        </block_content>}</block></while>
                    </block_content>}</block></if> <else>else <block>{<block_content>
                        <while>while <condition>(<expr><operator>!</operator><call><name><name>stack</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>j</name> <operator>&lt;=</operator> <operator>(</operator><name>currLevel</name> <operator>-</operator> <name>nextLevel</name><operator>)</operator></expr>)</condition> <block>{<block_content>
                            <expr_stmt><expr><name>currDirLen</name> <operator>-=</operator> <call><name><name>stack</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
                        </block_content>}</block></while>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>nextLevel</name> <operator>==</operator> <name>currLevel</name></expr>)</condition> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>isFile</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>stack</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>currDirLen</name> <operator>-=</operator> <call><name><name>stack</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if></if_stmt>

                <if_stmt><if>if <condition>(<expr><name>nextLevel</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>currDirLen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>stack</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <expr_stmt><expr><name>isFile</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
            </block_content>}</block></while>

            <return>return <expr><name>longestLen</name></expr>;</return>
        </block_content>}</block></function>
    }</block></class>
}</block></class>
</unit>
