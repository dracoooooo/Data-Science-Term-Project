<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\raw\solutions\_676.java"><package>package <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>solutions</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>

<class><specifier>public</specifier> class <name>_676</name> <block>{

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution1</name> <block>{
        <class><specifier>public</specifier> <specifier>static</specifier> class <name>MagicDictionary</name> <block>{

            <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>wordSet</name></decl>;</decl_stmt>

            <comment type="block" format="javadoc">/**
             * Initialize your data structure here.
             */</comment>
            <constructor><specifier>public</specifier> <name>MagicDictionary</name><parameter_list>()</parameter_list> <block>{<block_content>
                <expr_stmt><expr><name>wordSet</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></constructor>

            <comment type="block" format="javadoc">/**
             * Build a dictionary through a list of words
             */</comment>
            <function><type><specifier>public</specifier> <name>void</name></type> <name>buildDict</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>dict</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <for>for <control>(<init><decl><type><name>String</name></type> <name>word</name> <range>: <expr><name>dict</name></expr></range></decl></init>)</control> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>wordSet</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>word</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>
            </block_content>}</block></function>

            <comment type="block" format="javadoc">/**
             * Returns if there is any word in the trie that equals to the given word after modifying exactly one character
             */</comment>
            <function><type><specifier>public</specifier> <name>boolean</name></type> <name>search</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>word</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <for>for <control>(<init><decl><type><name>String</name></type> <name>candidate</name> <range>: <expr><name>wordSet</name></expr></range></decl></init>)</control> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><call><name>modifyOneChar</name><argument_list>(<argument><expr><name>word</name></expr></argument>, <argument><expr><name>candidate</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></for>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return>
            </block_content>}</block></function>

            <function><type><specifier>private</specifier> <name>boolean</name></type> <name>modifyOneChar</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>word</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>candidate</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>word</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <call><name><name>candidate</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
                </block_content>}</block></if></if_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>diff</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>word</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><call><name><name>word</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name><name>candidate</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>diff</name><operator>++</operator></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <if_stmt><if>if <condition>(<expr><name>diff</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></for>
                <return>return <expr><name>diff</name> <operator>==</operator> <literal type="number">1</literal></expr>;</return>
            </block_content>}</block></function>
        }</block></class>
    }</block></class>
}</block></class>
</unit>
