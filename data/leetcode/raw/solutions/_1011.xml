<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\raw\solutions\_1011.java"><package>package <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>solutions</name></name>;</package>

<class><specifier>public</specifier> class <name>_1011</name> <block>{
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution1</name> <block>{
        <function><type><specifier>public</specifier> <name>int</name></type> <name>daysToShip</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>weights</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>capacity</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>days</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>currentShip</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

            <for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <range>: <expr><name>weights</name></expr></range></decl></init>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>currentShip</name> <operator>+</operator> <name>k</name> <operator>&gt;</operator> <name>capacity</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>currentShip</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name>days</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name>currentShip</name> <operator>+=</operator> <name>k</name></expr>;</expr_stmt>
            </block_content>}</block></for>

            <return>return <expr><name>days</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>int</name></type> <name>shipWithinDays</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>weights</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>D</name></decl></parameter>)</parameter_list> <block>{<block_content>

            <decl_stmt><decl><type><name>int</name></type> <name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>max</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

            <for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <range>: <expr><name>weights</name></expr></range></decl></init>)</control> <block>{<block_content>
                <expr_stmt><expr><name>sum</name> <operator>+=</operator> <name>k</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>max</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name>max</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>

            <comment type="line">// Minimum possible capacity needs to be as much as the heaviest package</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>lower</name> <init>= <expr><name>max</name></expr></init></decl>;</decl_stmt>
            <comment type="line">// Maximum possible capacity is the total weight of all packages</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>upper</name> <init>= <expr><name>sum</name></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><call><name>daysToShip</name><argument_list>(<argument><expr><name>weights</name></expr></argument>, <argument><expr><name>lower</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>D</name></expr>)</condition> <block>{<block_content>
                <return>return <expr><name>lower</name></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <comment type="line">// Guess is for capacity</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>currentGuess</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>bestGuess</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

            <comment type="line">// Binary search</comment>
            <while>while <condition>(<expr><name>lower</name> <operator>&lt;=</operator> <name>upper</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>currentGuess</name> <operator>=</operator> <operator>(</operator><name>upper</name> <operator>+</operator> <name>lower</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><call><name>daysToShip</name><argument_list>(<argument><expr><name>weights</name></expr></argument>, <argument><expr><name>currentGuess</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>D</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>bestGuess</name> <operator>=</operator> <name>currentGuess</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>upper</name> <operator>=</operator> <name>currentGuess</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><name>lower</name> <operator>=</operator> <name>currentGuess</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></while>

            <return>return <expr><name>bestGuess</name></expr>;</return>
        </block_content>}</block></function>
    }</block></class>
}</block></class>
</unit>
