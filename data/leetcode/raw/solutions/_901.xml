<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\raw\solutions\_901.java"><package>package <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>solutions</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Stack</name></name>;</import>

<class><specifier>public</specifier> class <name>_901</name> <block>{
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution1</name> <block>{
        <class><specifier>public</specifier> <specifier>static</specifier> class <name>StockSpanner</name> <block>{
            <decl_stmt><decl><type><name><name>Stack</name><argument_list type="generic">&lt;<argument><name><name>int</name><index>[]</index></name></argument>&gt;</argument_list></name></type> <name>stack</name></decl>;</decl_stmt>

            <constructor><specifier>public</specifier> <name>StockSpanner</name><parameter_list>()</parameter_list> <block>{<block_content>
                <expr_stmt><expr><name>stack</name> <operator>=</operator> <operator>new</operator> <call><name><name>Stack</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></constructor>

            <function><type><specifier>public</specifier> <name>int</name></type> <name>next</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>price</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
                <while>while <condition>(<expr><operator>!</operator><call><name><name>stack</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>stack</name><operator>.</operator><name>peek</name></name><argument_list>()</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>&lt;=</operator> <name>price</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>result</name> <operator>+=</operator> <call><name><name>stack</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call><index>[<expr><literal type="number">1</literal></expr>]</index></expr>;</expr_stmt>
                </block_content>}</block></while>
                <expr_stmt><expr><call><name><name>stack</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>int</name><index>[]</index></name><block>{<expr><name>price</name></expr>, <expr><name>result</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>result</name></expr>;</return>
            </block_content>}</block></function>
        }</block></class>
    }</block></class>
}</block></class>
</unit>
