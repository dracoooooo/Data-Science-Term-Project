<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\raw\solutions\_208.java"><package>package <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>solutions</name></name>;</package>

<class><specifier>public</specifier> class <name>_208</name> <block>{
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution1</name> <block>{
        <class><specifier>public</specifier> <specifier>static</specifier> class <name>TrieNode</name> <block>{
            <decl_stmt><decl><type><name>boolean</name></type> <name>isWord</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>TrieNode</name><index>[]</index></name></type> <name>children</name> <init>= <expr><operator>new</operator> <name><name>TrieNode</name><index>[<expr><literal type="number">26</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        }</block></class>

        <class><specifier>public</specifier> <specifier>static</specifier> class <name>Trie</name> <block>{
            <decl_stmt><decl><type><specifier>private</specifier> <name>TrieNode</name></type> <name>root</name></decl>;</decl_stmt>

            <constructor><specifier>public</specifier> <name>Trie</name><parameter_list>()</parameter_list> <block>{<block_content>
                <expr_stmt><expr><name>root</name> <operator>=</operator> <operator>new</operator> <call><name>TrieNode</name><argument_list>()</argument_list></call></expr>;</expr_stmt><comment type="line">//initialize root to be an empty char, this is a common practice as how Wiki defines Trie data structure as well</comment>
            </block_content>}</block></constructor>

            <comment type="line">// Inserts a word into the trie.</comment>
            <function><type><specifier>public</specifier> <name>void</name></type> <name>insert</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>word</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <decl_stmt><decl><type><name>TrieNode</name></type> <name>node</name> <init>= <expr><name>root</name></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>word</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name><name>node</name><operator>.</operator><name>children</name><index>[<expr><call><name><name>word</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="char">'a'</literal></expr>]</index></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name><name>node</name><operator>.</operator><name>children</name><index>[<expr><call><name><name>word</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="char">'a'</literal></expr>]</index></name> <operator>=</operator> <operator>new</operator> <call><name>TrieNode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><name>node</name> <operator>=</operator> <name><name>node</name><operator>.</operator><name>children</name><index>[<expr><call><name><name>word</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="char">'a'</literal></expr>]</index></name></expr>;</expr_stmt>
                </block_content>}</block></for>
                <expr_stmt><expr><name><name>node</name><operator>.</operator><name>isWord</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            </block_content>}</block></function>

            <comment type="line">// Returns if the word is in the trie.</comment>
            <function><type><specifier>public</specifier> <name>boolean</name></type> <name>search</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>word</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <decl_stmt><decl><type><name>TrieNode</name></type> <name>node</name> <init>= <expr><name>root</name></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>word</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name><name>node</name><operator>.</operator><name>children</name><index>[<expr><call><name><name>word</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="char">'a'</literal></expr>]</index></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><name>node</name> <operator>=</operator> <name><name>node</name><operator>.</operator><name>children</name><index>[<expr><call><name><name>word</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="char">'a'</literal></expr>]</index></name></expr>;</expr_stmt>
                </block_content>}</block></for>
                <return>return <expr><name><name>node</name><operator>.</operator><name>isWord</name></name></expr>;</return>
            </block_content>}</block></function>

            <comment type="line">// Returns if there is any word in the trie</comment>
            <comment type="line">// that starts with the given prefix.</comment>
            <function><type><specifier>public</specifier> <name>boolean</name></type> <name>startsWith</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>prefix</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <decl_stmt><decl><type><name>TrieNode</name></type> <name>node</name> <init>= <expr><name>root</name></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>prefix</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name><name>node</name><operator>.</operator><name>children</name><index>[<expr><call><name><name>prefix</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="char">'a'</literal></expr>]</index></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><name>node</name> <operator>=</operator> <name><name>node</name><operator>.</operator><name>children</name><index>[<expr><call><name><name>prefix</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="char">'a'</literal></expr>]</index></name></expr>;</expr_stmt>
                </block_content>}</block></for>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            </block_content>}</block></function>
        }</block></class>

        <comment type="line">// Your Trie object will be instantiated and called as such:</comment>
        <comment type="line">// Trie trie = new Trie();</comment>
        <comment type="line">// trie.insert("somestring");</comment>
        <comment type="line">// trie.search("key");</comment>
    }</block></class>
}</block></class>
</unit>
