<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\raw\solutions\_1373.java"><package>package <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>solutions</name></name>;</package>

<import>import <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>common</name><operator>.</operator><name>classes</name><operator>.</operator><name>TreeNode</name></name>;</import>

<class><specifier>public</specifier> class <name>_1373</name> <block>{
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution1</name> <block>{
        <comment type="block" format="javadoc">/**
         * credit: https://leetcode.com/problems/maximum-sum-bst-in-binary-tree/discuss/532021/Java-Post-Order
         */</comment>
        <function><type><specifier>public</specifier> <name>int</name></type> <name>maxSumBST</name><parameter_list>(<parameter><decl><type><name>TreeNode</name></type> <name>root</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <return>return <expr><call><name>postOrder</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">4</literal></expr>]</index></expr>;</return>
        </block_content>}</block></function>

        <comment type="block" format="javadoc">/**
         * result[0] means this tree is a BST
         * result[1] means the sum of this tree
         * result[2] means the left boundary
         * result[3] means the right boundary
         * result[4] means the global max sum
         */</comment>
        <function><type><specifier>private</specifier> <name><name>int</name><index>[]</index></name></type> <name>postOrder</name><parameter_list>(<parameter><decl><type><name>TreeNode</name></type> <name>root</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>root</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><operator>new</operator> <name><name>int</name><index>[]</index></name><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr>, <expr><name><name>Integer</name><operator>.</operator><name>MIN_VALUE</name></name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>leftSide</name> <init>= <expr><call><name>postOrder</name><argument_list>(<argument><expr><name><name>root</name><operator>.</operator><name>left</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>rightSide</name> <init>= <expr><call><name>postOrder</name><argument_list>(<argument><expr><name><name>root</name><operator>.</operator><name>right</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>localMax</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name><name>leftSide</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>rightSide</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>leftSide</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>rightSide</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>root</name><operator>.</operator><name>val</name></name> <operator>&gt;</operator> <name><name>leftSide</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>root</name><operator>.</operator><name>val</name></name> <operator>&lt;</operator> <name><name>rightSide</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>sum</name> <init>= <expr><name><name>root</name><operator>.</operator><name>val</name></name> <operator>+</operator> <name><name>leftSide</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>rightSide</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <return>return <expr><operator>new</operator> <name><name>int</name><index>[]</index></name><block>{<expr><literal type="number">1</literal></expr>, <expr><name>sum</name></expr>, <expr><ternary><condition><expr><name><name>leftSide</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr> ?</condition><then> <expr><name><name>root</name><operator>.</operator><name>val</name></name></expr> </then><else>: <expr><name><name>leftSide</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></else></ternary></expr>, <expr><ternary><condition><expr><name><name>rightSide</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <name><name>Integer</name><operator>.</operator><name>MIN_VALUE</name></name></expr> ?</condition><then> <expr><name><name>root</name><operator>.</operator><name>val</name></name></expr> </then><else>: <expr><name><name>rightSide</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></else></ternary></expr>, <expr><call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name>localMax</name></expr></argument>, <argument><expr><name>sum</name></expr></argument>)</argument_list></call></expr>}</block></expr>;</return>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <return>return <expr><operator>new</operator> <name><name>int</name><index>[]</index></name><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>localMax</name></expr>}</block></expr>;</return>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></function>
    }</block></class>
}</block></class>
</unit>
