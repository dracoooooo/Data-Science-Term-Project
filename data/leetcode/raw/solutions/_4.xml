<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\raw\solutions\_4.java"><package>package <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>solutions</name></name>;</package>

<import>import static <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>Math</name><operator>.</operator><name>max</name></name>;</import>
<import>import static <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>Math</name><operator>.</operator><name>min</name></name>;</import>

<class><specifier>public</specifier> class <name>_4</name> <block>{

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution1</name> <block>{
        <comment type="block" format="javadoc">/**credit: https://discuss.leetcode.com/topic/28602/concise-java-solution-based-on-binary-search
         *
         * The key point of this problem is to ignore half part of A and B each step recursively by comparing the median of remaining A and B:

         if (aMid &lt; bMid) Keep [aRight + bLeft]
         else Keep [bRight + aLeft]

         As the following: time=O(log(m + n))
         */</comment>
        <function><type><specifier>public</specifier> <name>double</name></type> <name>findMedianSortedArrays</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>A</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>B</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>m</name> <init>= <expr><name><name>A</name><operator>.</operator><name>length</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><name><name>B</name><operator>.</operator><name>length</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><operator>(</operator><name>m</name> <operator>+</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><operator>(</operator><name>m</name> <operator>+</operator> <name>n</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
            <return>return <expr><operator>(</operator><call><name>getkth</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>getkth</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>/</operator> <literal type="number">2.0</literal></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>double</name></type> <name>getkth</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>A</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>aStart</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>B</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bStart</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>aStart</name> <operator>&gt;</operator> <name><name>A</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><name><name>B</name><index>[<expr><name>bStart</name> <operator>+</operator> <name>k</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>bStart</name> <operator>&gt;</operator> <name><name>B</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><name><name>A</name><index>[<expr><name>aStart</name> <operator>+</operator> <name>k</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>k</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><name><name>A</name><index>[<expr><name>aStart</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>B</name><index>[<expr><name>bStart</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <decl_stmt><decl><type><name>int</name></type> <name>aMid</name> <init>= <expr><name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>bMid</name> <init>= <expr><name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>aStart</name> <operator>+</operator> <name>k</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name><name>A</name><operator>.</operator><name>length</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>aMid</name> <operator>=</operator> <name><name>A</name><index>[<expr><name>aStart</name> <operator>+</operator> <name>k</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>bStart</name> <operator>+</operator> <name>k</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name><name>B</name><operator>.</operator><name>length</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>bMid</name> <operator>=</operator> <name><name>B</name><index>[<expr><name>bStart</name> <operator>+</operator> <name>k</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name>aMid</name> <operator>&lt;</operator> <name>bMid</name></expr>)</condition> <block>{<block_content>
                <return>return <expr><call><name>getkth</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>aStart</name> <operator>+</operator> <name>k</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>bStart</name></expr></argument>, <argument><expr><name>k</name> <operator>-</operator> <name>k</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return><comment type="line">// Check: aRight + bLeft</comment>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <return>return <expr><call><name>getkth</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>aStart</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>bStart</name> <operator>+</operator> <name>k</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>k</name> <operator>-</operator> <name>k</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return><comment type="line">// Check: bRight + aLeft</comment>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></function>
    }</block></class>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution2</name> <block>{
        <comment type="block" format="javadoc">/**
         * Reference: https://leetcode.com/discuss/28843/my-accepted-java-solution:
         * Basic Idea is very similar to K-selection. it's easier to understand if you imagine this to be chopping off the last K elements from a total of len(A) + len(B) elements,
         * where K = (len(A) + len(B))/2.
         * we want to remove K, but each time we can remove only at most K/2 elements,
         * because we can only be sure that these elements are not within the first (len(A) + len(B)) -K elements.
         */</comment>
        <function><type><specifier>public</specifier> <name>double</name></type> <name>findMedianSortedArrays</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>nums1</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>nums2</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>K</name> <init>= <expr><name><name>nums1</name><operator>.</operator><name>length</name></name> <operator>+</operator> <name><name>nums2</name><operator>.</operator><name>length</name></name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>K</name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><operator>(</operator><call><name>findMedianSortedArrays</name><argument_list>(<argument><expr><name>nums1</name></expr></argument>, <argument><expr><name>nums2</name></expr></argument>, <argument><expr><operator>(</operator><name>K</name> <operator>-</operator> <name>K</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>findMedianSortedArrays</name><argument_list>(<argument><expr><name>nums1</name></expr></argument>, <argument><expr><name>nums2</name></expr></argument>, <argument><expr><operator>(</operator><name>K</name> <operator>-</operator> <operator>(</operator><name>K</name> <operator>/</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</return>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <return>return <expr><call><name>findMedianSortedArrays</name><argument_list>(<argument><expr><name>nums1</name></expr></argument>, <argument><expr><name>nums2</name></expr></argument>, <argument><expr><name>K</name> <operator>-</operator> <operator>(</operator><name>K</name> <operator>/</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></function>

        <comment type="line">// k is the number of elements to REMOVE, or "Chop off"</comment>
        <function><type><specifier>public</specifier> <name>double</name></type> <name>findMedianSortedArrays</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>A</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>B</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>K</name></decl></parameter>)</parameter_list> <block>{<block_content>

            <decl_stmt><decl><type><name>int</name></type> <name>lowA</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>lowB</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>highA</name> <init>= <expr><name><name>A</name><operator>.</operator><name>length</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>highB</name> <init>= <expr><name><name>B</name><operator>.</operator><name>length</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>midA</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>midB</name></decl>;</decl_stmt>
            <while>while <condition>(<expr><name>K</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>highA</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>highB</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>chopA</name> <init>= <expr><call><name>max</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>min</name><argument_list>(<argument><expr><name>K</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator><name>highA</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>chopB</name> <init>= <expr><call><name>max</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>min</name><argument_list>(<argument><expr><name>K</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator><name>highB</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><name>midA</name> <operator>=</operator> <name>highA</name> <operator>-</operator> <name>chopA</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>midB</name> <operator>=</operator> <name>highB</name> <operator>-</operator> <name>chopB</name></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>A</name><index>[<expr><name>midA</name></expr>]</index></name> <operator>&lt;</operator> <name><name>B</name><index>[<expr><name>midB</name></expr>]</index></name></expr>)</condition> <block>{<block_content> <comment type="line">// here A[0 .. midA] &lt; B[midB], and we know that B[0 .. midB-1] &lt; B[midB], so B[midB..highB] can not possibly be within the first (len(A) + len(B) - K) elements, and can be safely removed.</comment>
                    <expr_stmt><expr><name>highB</name> <operator>=</operator> <name>midB</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>K</name> <operator>=</operator> <name>K</name> <operator>-</operator> <name>chopB</name></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><name>highA</name> <operator>=</operator> <name>midA</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>K</name> <operator>=</operator> <name>K</name> <operator>-</operator> <name>chopA</name></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></while>

            <if_stmt><if>if <condition>(<expr><name>highA</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>highB</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="number">0</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>highA</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><name><name>B</name><index>[<expr><name>highB</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>K</name></expr>]</index></name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>highB</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><name><name>A</name><index>[<expr><name>highA</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>K</name></expr>]</index></name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><call><name>max</name><argument_list>(<argument><expr><name><name>A</name><index>[<expr><name>highA</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>B</name><index>[<expr><name>highB</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>
    }</block></class>
}</block></class>
</unit>
