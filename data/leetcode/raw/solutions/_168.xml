<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\raw\solutions\_168.java"><package>package <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>solutions</name></name>;</package>
<comment type="block" format="javadoc">/**
 *
 * 168. Excel Sheet Column Title

 Given a positive integer, return its corresponding column title as appear in an Excel sheet.

 For example:

 1 -&gt; A
 2 -&gt; B
 3 -&gt; C
 ...
 26 -&gt; Z
 27 -&gt; AA
 28 -&gt; AB
 ...

 Example 1:

 Input: 1
 Output: "A"

 Example 2:

 Input: 28
 Output: "AB"

 Example 3:

 Input: 701
 Output: "ZY"

 */</comment>
<class><specifier>public</specifier> class <name>_168</name> <block>{
  <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution1</name> <block>{
    <function><type><specifier>public</specifier> <name>String</name></type> <name>convertToTitle</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <comment type="block" format="javadoc">/**Get the right most digit first, move to the left, e.g. when n = 28, we get 'B' first, then we get 'A'.*/</comment>
      <decl_stmt><decl><type><name>StringBuilder</name></type> <name>sb</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <while>while <condition>(<expr><name>n</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>temp</name> <init>= <expr><operator>(</operator><name>n</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">26</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>)</operator> <operator>(</operator><name>temp</name> <operator>+</operator> <literal type="number">65</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>n</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">26</literal></expr>;</expr_stmt>
      </block_content>}</block></while>
      <return>return <expr><call><name><name>sb</name><operator>.</operator><name>reverse</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>
  }</block></class>
}</block></class>
</unit>
