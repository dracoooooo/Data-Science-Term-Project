<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\raw\solutions\_689.java"><package>package <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>solutions</name></name>;</package>

<class><specifier>public</specifier> class <name>_689</name> <block>{
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution1</name> <block>{
        <comment type="block" format="javadoc">/**
         * we basically need to find the interval (i, i+k-1) as the middle interval, where k &lt;= i &lt;= n-2k
         * then this interval (0, i-1) will be the left interval
         * the interval (i+k, n-1) will be the right interval.
         * &lt;p&gt;
         * Please pay special attention to the variable name I use here: this `k` is not a random one, it's the `k`
         * from the passed in parameter.
         * &lt;p&gt;
         * Credit: https://discuss.leetcode.com/topic/105577/c-java-dp-with-explanation-o-n/
         */</comment>
        <function><type><specifier>public</specifier> <name><name>int</name><index>[]</index></name></type> <name>maxSumOfThreeSubarrays</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>nums</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>nums</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name><name>nums</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><operator>new</operator> <name><name>int</name><index>[]</index></name><block>{}</block></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><name><name>nums</name><operator>.</operator><name>length</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>sums</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[<expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <expr_stmt><expr><name><name>sums</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>sums</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>nums</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
            </block_content>}</block></for>

            <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>leftMax</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[<expr><name>n</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>k</name></expr></init></decl>, <decl><type ref="prev"/><name>total</name> <init>= <expr><name><name>sums</name><index>[<expr><name>k</name></expr>]</index></name> <operator>-</operator> <name><name>sums</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>sums</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>sums</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>k</name></expr>]</index></name> <operator>&gt;</operator> <name>total</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name><name>leftMax</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>k</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>total</name> <operator>=</operator> <name><name>sums</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>sums</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>k</name></expr>]</index></name></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><name><name>leftMax</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>leftMax</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></for>

            <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>rightMax</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[<expr><name>n</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>rightMax</name><index>[<expr><name>n</name> <operator>-</operator> <name>k</name></expr>]</index></name> <operator>=</operator> <name>n</name> <operator>-</operator> <name>k</name></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>n</name> <operator>-</operator> <name>k</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>total</name> <init>= <expr><name><name>sums</name><index>[<expr><name>n</name></expr>]</index></name> <operator>-</operator> <name><name>sums</name><index>[<expr><name>n</name> <operator>-</operator> <name>k</name></expr>]</index></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>sums</name><index>[<expr><name>i</name> <operator>+</operator> <name>k</name></expr>]</index></name> <operator>-</operator> <name><name>sums</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;=</operator> <name>total</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name><name>rightMax</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>total</name> <operator>=</operator> <name><name>sums</name><index>[<expr><name>i</name> <operator>+</operator> <name>k</name></expr>]</index></name> <operator>-</operator> <name><name>sums</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><name><name>rightMax</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>rightMax</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></for>

            <comment type="line">//try to find all possible middle intervals</comment>
            <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>result</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>max</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>k</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name>k</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>left</name> <init>= <expr><name><name>leftMax</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>right</name> <init>= <expr><name><name>rightMax</name><index>[<expr><name>i</name> <operator>+</operator> <name>k</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>total</name> <init>= <expr><operator>(</operator><name><name>sums</name><index>[<expr><name>i</name> <operator>+</operator> <name>k</name></expr>]</index></name> <operator>-</operator> <name><name>sums</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>sums</name><index>[<expr><name>left</name> <operator>+</operator> <name>k</name></expr>]</index></name> <operator>-</operator> <name><name>sums</name><index>[<expr><name>left</name></expr>]</index></name><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>sums</name><index>[<expr><name>right</name> <operator>+</operator> <name>k</name></expr>]</index></name> <operator>-</operator> <name><name>sums</name><index>[<expr><name>right</name></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>total</name> <operator>&gt;</operator> <name>max</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>max</name> <operator>=</operator> <name>total</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>left</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>result</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>result</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>right</name></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
            <return>return <expr><name>result</name></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution2</name> <block>{
        <comment type="block" format="javadoc">/**reference: https://leetcode.com/articles/maximum-sum-of-3-non-overlapping-intervals*/</comment>
    }</block></class>
}</block></class>
</unit>
