<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\raw\solutions\_640.java"><package>package <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>solutions</name></name>;</package>

<class><specifier>public</specifier> class <name>_640</name> <block>{
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution1</name> <block>{
        <comment type="block" format="javadoc">/**
         * Reference: https://discuss.leetcode.com/topic/95203/concise-java-solution/7
         */</comment>
        <function><type><specifier>public</specifier> <name>String</name></type> <name>solveEquation</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>equation</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>parts</name> <init>= <expr><call><name><name>equation</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">"="</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>left</name> <init>= <expr><call><name>evaluate</name><argument_list>(<argument><expr><name><name>parts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>right</name> <init>= <expr><call><name>evaluate</name><argument_list>(<argument><expr><name><name>parts</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>left</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>right</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>left</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name><name>right</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="string">"Infinite solutions"</literal></expr>;</return>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>left</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>right</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="string">"No solution"</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><literal type="string">"x="</literal> <operator>+</operator> <operator>(</operator><name><name>right</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>left</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>/</operator> <operator>(</operator><name><name>left</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>right</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name><name>int</name><index>[]</index></name></type> <name>evaluate</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>part</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>result</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt><comment type="line">//result[0] is the coefficient for x, result[1] is the coefficient for constants</comment>
            <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>tokens</name> <init>= <expr><call><name><name>part</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">"(?=[+-])"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="line">// ()for match group; ?= for match and include in res; [+-] means + or -;</comment>
            <for>for <control>(<init><decl><type><name>String</name></type> <name>token</name> <range>: <expr><name>tokens</name></expr></range></decl></init>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>token</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"+x"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>token</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name><name>result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>token</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"-x"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name><name>result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>--</operator></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>token</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name><name>result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><call><name><name>token</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>token</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><name><name>result</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></for>
            <return>return <expr><name>result</name></expr>;</return>
        </block_content>}</block></function>
    }</block></class>
}</block></class>
</unit>
