<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\raw\solutions\_1033.java"><package>package <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>solutions</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>

<class><specifier>public</specifier> class <name>_1033</name> <block>{
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution1</name> <block>{
        <function><type><specifier>private</specifier> <name>int</name></type> <name>minMoves</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <comment type="line">// already consecutive integers, nothing to be done</comment>
            <if_stmt><if>if <condition>(<expr><name>x</name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <name>y</name> <operator>&amp;&amp;</operator> <name>y</name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <name>z</name></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="number">0</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <comment type="line">// one of the following (sample) cases:</comment>
            <comment type="line">// 1, 2, 8 (8 -&gt; 3)</comment>
            <comment type="line">// 1, 7, 8 (1 -&gt; 6)</comment>
            <comment type="line">// 1, 3, 8 (8 -&gt; 2)</comment>
            <comment type="line">// 1, 6, 8 (1 -&gt; 7)</comment>
            <if_stmt><if>if <condition>(<expr><name>y</name> <operator>-</operator> <name>x</name> <operator>&lt;=</operator> <literal type="number">2</literal> <operator>||</operator> <name>z</name> <operator>-</operator> <name>y</name> <operator>&lt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="number">1</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <comment type="line">// move z to y + 1, x to y - 1</comment>
            <return>return <expr><literal type="number">2</literal></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>int</name></type> <name>maxMoves</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <return>return <expr><name>z</name> <operator>-</operator> <name>x</name> <operator>-</operator> <literal type="number">2</literal></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name><name>int</name><index>[]</index></name></type> <name>numMovesStones</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>t</name> <init>= <expr><block>{<expr><name>a</name></expr>, <expr><name>b</name></expr>, <expr><name>c</name></expr>}</block></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>Arrays</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>int</name></type> <name>min</name> <init>= <expr><call><name>minMoves</name><argument_list>(<argument><expr><name><name>t</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>t</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>t</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>max</name> <init>= <expr><call><name>maxMoves</name><argument_list>(<argument><expr><name><name>t</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>t</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>t</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <return>return <expr><operator>new</operator> <name><name>int</name><index>[]</index></name><block>{<expr><name>min</name></expr>, <expr><name>max</name></expr>}</block></expr>;</return>
        </block_content>}</block></function>
    }</block></class>
}</block></class>
</unit>
