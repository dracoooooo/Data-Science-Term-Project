<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\raw\solutions\_481.java"><package>package <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>solutions</name></name>;</package>

<class><specifier>public</specifier> class <name>_481</name> <block>{

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution1</name> <block>{
        <comment type="block" format="javadoc">/**
         * credit: https://discuss.leetcode.com/topic/74917/simple-java-solution-using-one-array-and-two-pointers
         * Algorithm:
         * &lt;p&gt;
         * 1. Create an int array a and initialize the first 3 elements with 1, 2, 2.
         * 2. Create two pointers head and tail. head points to the number which will be used to generate new numbers.
         * tail points to the next empty position to put the new number. Then keep generating new numbers until tail &gt;= n.
         * 3. Need to create the array 1 element more than n to avoid overflow because the last round head might points to a number 2.
         * 4. A trick to flip number back and forth between 1 and 2: num = num ^ 3
         */</comment>
        <function><type><specifier>public</specifier> <name>int</name></type> <name>magicalString</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="number">0</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;=</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="number">1</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>a</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[<expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>int</name></type> <name>head</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>tail</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>num</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

            <while>while <condition>(<expr><name>tail</name> <operator>&lt;</operator> <name>n</name></expr>)</condition> <block>{<block_content>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>a</name><index>[<expr><name>head</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                    <expr_stmt><expr><name><name>a</name><index>[<expr><name>tail</name></expr>]</index></name> <operator>=</operator> <name>num</name></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>num</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>tail</name> <operator>&lt;</operator> <name>n</name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>result</name><operator>++</operator></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><name>tail</name><operator>++</operator></expr>;</expr_stmt>
                </block_content>}</block></for>
                <expr_stmt><expr><name>num</name> <operator>=</operator> <name>num</name> <operator>^</operator> <literal type="number">3</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>head</name><operator>++</operator></expr>;</expr_stmt>
            </block_content>}</block></while>

            <return>return <expr><name>result</name></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

}</block></class>
</unit>
