<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\raw\solutions\_342.java"><package>package <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>solutions</name></name>;</package>

<class><specifier>public</specifier> class <name>_342</name> <block>{
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution1</name> <block>{
        <comment type="line">//Just dive a little bit deeper, you can realize that another important feature of a number</comment>
        <comment type="line">//that is power of four is that its only single one bit must appear on the odd position, and power of two won't meet this requirement</comment>
        <comment type="line">//decimal number 8 has binary format: 0000-0000-0000-0000-0000-0000-0000-1000</comment>
        <comment type="line">//decimal number 16 has binary format: 0000-0000-0000-0000-0000-0000-0001-0000</comment>
        <comment type="line">//hex number 0x55555555 has binary format: 1010-1010-1010-1010-1010-1010-1010-1010</comment>
        <comment type="line">//thus, doing AND with 0x55555 will check if the only one bit is located on the odd position, thus ruling out those that are power of 2 but not power of 4</comment>
        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isPowerOfFour</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <return>return <expr><operator>(</operator><name>num</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <literal type="number">1073741824</literal> <operator>%</operator> <name>num</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>num</name> <operator>&amp;</operator> <literal type="number">0x55555555</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution2</name> <block>{
        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isPowerOfFour</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <comment type="line">//^ means to match the beginning of a line</comment>
            <comment type="line">//$ means to match the end of a line</comment>
            <comment type="line">//* means zero or more of the preceding character</comment>
            <return>return <expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>matches</name><argument_list>(<argument><expr><literal type="string">"^10*$"</literal></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution3</name> <block>{
        <comment type="line">//a regular loop method to make it AC'ed</comment>
        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isPowerOfFour</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>num</name> <operator>&lt;</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name>num</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <while>while <condition>(<expr><name>num</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>num</name> <operator>%</operator> <literal type="number">4</literal> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name>num</name> <operator>/=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
            </block_content>}</block></while>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

}</block></class>
</unit>
