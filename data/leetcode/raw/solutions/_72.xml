<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\raw\solutions\_72.java"><package>package <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>solutions</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>

<class><specifier>public</specifier> class <name>_72</name> <block>{

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution1</name> <block>{
        <function><type><specifier>public</specifier> <name>int</name></type> <name>minDistance</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>word1</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>word2</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>m</name> <init>= <expr><call><name><name>word1</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name><name>word2</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>m</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><name>n</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><name>m</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name><name>char</name><index>[]</index></name></type> <name>str1</name> <init>= <expr><call><name><name>word1</name><operator>.</operator><name>toCharArray</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>char</name><index>[]</index></name></type> <name>str2</name> <init>= <expr><call><name><name>word2</name><operator>.</operator><name>toCharArray</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name><name>int</name><index>[]</index><index>[]</index></name></type> <name>table</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[<expr><name>m</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>m</name> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <expr_stmt><expr><name><name>table</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
            </block_content>}</block></for>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <expr_stmt><expr><name><name>table</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
            </block_content>}</block></for>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>m</name> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                    <decl_stmt><decl><type><name>int</name></type> <name>cost</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name><name>str1</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name><name>str2</name><index>[<expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>cost</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><name><name>table</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><name><name>table</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>table</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,
                            <argument><expr><name><name>table</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>cost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>
            </block_content>}</block></for>
            <return>return <expr><name><name>table</name><index>[<expr><name>m</name></expr>]</index><index>[<expr><name>n</name></expr>]</index></name></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution2</name> <block>{
        <function><type><specifier>public</specifier> <name>int</name></type> <name>minDistance</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>word1</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>word2</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <comment type="line">// using levenshtein Distance to find minimum transformation operations required from word 1 to word 2</comment>
            <decl_stmt><decl><type><name><name>int</name><index>[]</index><index>[]</index></name></type> <name>dp</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[<expr><call><name><name>word1</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>]</index><index>[<expr><call><name><name>word2</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <comment type="line">// fill the dp array with -1 value</comment>
            <for>for <control>(<init><decl><type><name><name>int</name><index>[]</index></name></type> <name>rows</name> <range>: <expr><name>dp</name></expr></range></decl></init>)</control> <block>{<block_content>
                <expr_stmt><expr><call><name><name>Arrays</name><operator>.</operator><name>fill</name></name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <return>return <expr><call><name>levenshteinDistance</name><argument_list>(<argument><expr><name>word1</name></expr></argument>, <argument><expr><call><name><name>word1</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>word2</name></expr></argument>, <argument><expr><call><name><name>word2</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>dp</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>int</name></type> <name>levenshteinDistance</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>s1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>s1Index</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>s2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>s2Index</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index><index>[]</index></name></type> <name>dp</name></decl></parameter>)</parameter_list> <block>{<block_content>

            <if_stmt><if>if <condition>(<expr><name>s1Index</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <comment type="line">// when s1 is "" perform all insertions to get s1 to s2</comment>
                <return>return <expr><name>s2Index</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>s2Index</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <comment type="line">// when s2 is "" perform all deletions from s1</comment>
                <return>return <expr><name>s1Index</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <comment type="line">// base condition when dp array is filled, return the distance</comment>
            <if_stmt><if>if <condition>(<expr><name><name>dp</name><index>[<expr><name>s1Index</name></expr>]</index><index>[<expr><name>s2Index</name></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><name><name>dp</name><index>[<expr><name>s1Index</name></expr>]</index><index>[<expr><name>s2Index</name></expr>]</index></name></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><call><name><name>s1</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>s1Index</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name><name>s2</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>s2Index</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <comment type="line">// Characters match, no edit distance to be calculated</comment>
                <expr_stmt><expr><name><name>dp</name><index>[<expr><name>s1Index</name></expr>]</index><index>[<expr><name>s2Index</name></expr>]</index></name> <operator>=</operator> <call><name>levenshteinDistance</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><name>s1Index</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>s2</name></expr></argument>, <argument><expr><name>s2Index</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <comment type="line">// When there is a character mismatch, perform operations</comment>

                <comment type="line">// Insertion</comment>
                <decl_stmt><decl><type><name>int</name></type> <name>insertValue</name> <init>= <expr><call><name>levenshteinDistance</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><name>s1Index</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>, <argument><expr><name>s2Index</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>dp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>deleteValue</name> <init>= <expr><call><name>levenshteinDistance</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><name>s1Index</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>s2</name></expr></argument>, <argument><expr><name>s2Index</name></expr></argument>, <argument><expr><name>dp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>substituteValue</name> <init>= <expr><call><name>levenshteinDistance</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><name>s1Index</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>s2</name></expr></argument>, <argument><expr><name>s2Index</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>dp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <comment type="block">/* Now we need to take the minimum of the 3 operations to find the edit distance and add 1 to the min cost action denoting that an action is performed */</comment>
                <expr_stmt><expr><name><name>dp</name><index>[<expr><name>s1Index</name></expr>]</index><index>[<expr><name>s2Index</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><name>insertValue</name></expr></argument>, <argument><expr><call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><name>deleteValue</name></expr></argument>, <argument><expr><name>substituteValue</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <return>return <expr><name><name>dp</name><index>[<expr><name>s1Index</name></expr>]</index><index>[<expr><name>s2Index</name></expr>]</index></name></expr>;</return>
        </block_content>}</block></function>
    }</block></class>
}</block></class>
</unit>
