<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\raw\solutions\_483.java"><package>package <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>solutions</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>math</name><operator>.</operator><name>BigInteger</name></name>;</import>

<class><specifier>public</specifier> class <name>_483</name> <block>{

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution1</name> <block>{
        <comment type="block" format="javadoc">/**
         * credit: https://discuss.leetcode.com/topic/82130/java-solution-with-hand-writing-explain
         */</comment>
        <function><type><specifier>public</specifier> <name>String</name></type> <name>smallestGoodBase</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>long</name></type> <name>nn</name> <init>= <expr><call><name><name>Long</name><operator>.</operator><name>parseLong</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>long</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">60</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>k</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>long</name></type> <name>start</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>long</name></type> <name>end</name> <init>= <expr><name>nn</name></expr></init></decl>;</decl_stmt>
                <while>while <condition>(<expr><name>start</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
                    <decl_stmt><decl><type><name>long</name></type> <name>m</name> <init>= <expr><name>start</name> <operator>+</operator> <operator>(</operator><name>end</name> <operator>-</operator> <name>start</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

                    <decl_stmt><decl><type><name>BigInteger</name></type> <name>left</name> <init>= <expr><call><name><name>BigInteger</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name>left</name> <operator>=</operator> <call><name><name>left</name><operator>.</operator><name>pow</name></name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>subtract</name><argument_list>(<argument><expr><name><name>BigInteger</name><operator>.</operator><name>ONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>BigInteger</name></type> <name>right</name> <init>= <expr><call><name><name>BigInteger</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>nn</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>multiply</name><argument_list>(<argument><expr><call><name><name>BigInteger</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>subtract</name><argument_list>(<argument><expr><name><name>BigInteger</name><operator>.</operator><name>ONE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>cmr</name> <init>= <expr><call><name><name>left</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name>right</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>cmr</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>res</name> <operator>=</operator> <name>m</name></expr>;</expr_stmt>
                        <break>break;</break>
                    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>cmr</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>start</name> <operator>=</operator> <name>m</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                    </block_content>}</block></if> <else>else <block>{<block_content>
                        <expr_stmt><expr><name>end</name> <operator>=</operator> <name>m</name></expr>;</expr_stmt>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></while>

                <if_stmt><if>if <condition>(<expr><name>res</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
            <return>return <expr><literal type="string">""</literal> <operator>+</operator> <name>res</name></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

}</block></class>
</unit>
