<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\raw\solutions\_84.java"><package>package <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>solutions</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Stack</name></name>;</import>

<class><specifier>public</specifier> class <name>_84</name> <block>{

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution1</name> <block>{

        <comment type="block" format="javadoc">/**
         * credit: https://leetcode.com/articles/largest-rectangle-histogram/#approach-5-using-stack-accepted
         * and https://discuss.leetcode.com/topic/7599/o-n-stack-based-java-solution
         */</comment>
        <function><type><specifier>public</specifier> <name>int</name></type> <name>largestRectangleArea</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>heights</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><name><name>heights</name><operator>.</operator><name>length</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>Stack</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>s</name> <init>= <expr><operator>new</operator> <call><name><name>Stack</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>maxArea</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>h</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>i</name> <operator>==</operator> <name>len</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>heights</name><index>[<expr><name>i</name></expr>]</index></name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>s</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call> <operator>||</operator> <name>h</name> <operator>&gt;=</operator> <name><name>heights</name><index>[<expr><call><name><name>s</name><operator>.</operator><name>peek</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <decl_stmt><decl><type><name>int</name></type> <name>tp</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name>maxArea</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name>maxArea</name></expr></argument>, <argument><expr><name><name>heights</name><index>[<expr><name>tp</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><ternary><condition><expr><call><name><name>s</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name>i</name></expr> </then><else>: <expr><name>i</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <call><name><name>s</name><operator>.</operator><name>peek</name></name><argument_list>()</argument_list></call></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></for>
            <return>return <expr><name>maxArea</name></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

}</block></class>
</unit>
