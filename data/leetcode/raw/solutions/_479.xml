<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\raw\solutions\_479.java"><package>package <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>solutions</name></name>;</package>

<class><specifier>public</specifier> class <name>_479</name> <block>{
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution1</name> <block>{
        <comment type="block" format="javadoc">/**
         * credit: https://discuss.leetcode.com/topic/74125/java-solution-using-assumed-max-palindrom
         */</comment>
        <function><type><specifier>public</specifier> <name>int</name></type> <name>largestPalindrome</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <comment type="line">// if input is 1 then max is 9</comment>
            <if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="number">9</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <comment type="line">// if n = 3 then upperBound = 999 and lowerBound = 99</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>upperBound</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name><name>Math</name><operator>.</operator><name>pow</name></name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>lowerBound</name> <init>= <expr><name>upperBound</name> <operator>/</operator> <literal type="number">10</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>long</name></type> <name>maxNumber</name> <init>= <expr><operator>(</operator><name>long</name><operator>)</operator> <name>upperBound</name> <operator>*</operator> <operator>(</operator><name>long</name><operator>)</operator> <name>upperBound</name></expr></init></decl>;</decl_stmt>

            <comment type="line">// represents the first half of the maximum assumed palindrom.</comment>
            <comment type="line">// e.g. if n = 3 then maxNumber = 999 x 999 = 998001 so firstHalf = 998</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>firstHalf</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>maxNumber</name> <operator>/</operator> <operator>(</operator><name>long</name><operator>)</operator> <call><name><name>Math</name><operator>.</operator><name>pow</name></name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>boolean</name></type> <name>palindromFound</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>long</name></type> <name>palindrom</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

            <while>while <condition>(<expr><operator>!</operator><name>palindromFound</name></expr>)</condition> <block>{<block_content>
                <comment type="line">// creates maximum assumed palindrom</comment>
                <comment type="line">// e.g. if n = 3 first time the maximum assumed palindrom will be 998 899</comment>
                <expr_stmt><expr><name>palindrom</name> <operator>=</operator> <call><name>createPalindrom</name><argument_list>(<argument><expr><name>firstHalf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// here i and palindrom/i forms the two factor of assumed palindrom</comment>
                <for>for <control>(<init><decl><type><name>long</name></type> <name>i</name> <init>= <expr><name>upperBound</name></expr></init></decl>;</init> <condition><expr><name>upperBound</name> <operator>&gt;</operator> <name>lowerBound</name></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
                    <comment type="line">// if n= 3 none of the factor of palindrom  can be more than 999 or less than square root of assumed palindrom</comment>
                    <if_stmt><if>if <condition>(<expr><name>palindrom</name> <operator>/</operator> <name>i</name> <operator>&gt;</operator> <name>maxNumber</name> <operator>||</operator> <name>i</name> <operator>*</operator> <name>i</name> <operator>&lt;</operator> <name>palindrom</name></expr>)</condition> <block>{<block_content>
                        <break>break;</break>
                    </block_content>}</block></if></if_stmt>

                    <comment type="line">// if two factors found, where both of them are n-digits,</comment>
                    <if_stmt><if>if <condition>(<expr><name>palindrom</name> <operator>%</operator> <name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>palindromFound</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                        <break>break;</break>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></for>

                <expr_stmt><expr><name>firstHalf</name><operator>--</operator></expr>;</expr_stmt>
            </block_content>}</block></while>
            <return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>palindrom</name> <operator>%</operator> <literal type="number">1337</literal><operator>)</operator></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>long</name></type> <name>createPalindrom</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>num</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>str</name> <init>= <expr><name>num</name> <operator>+</operator> <operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>reverse</name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><call><name><name>Long</name><operator>.</operator><name>parseLong</name></name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>
    }</block></class>
}</block></class>
</unit>
