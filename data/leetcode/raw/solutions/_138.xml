<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\raw\solutions\_138.java"><package>package <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>solutions</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

<comment type="block" format="javadoc">/**
 * 138. Copy List with Random Pointer
 *
 * A linked list is given such that each node contains an additional random
 * pointer which could point to any node in the list or null.
 * Return a deep copy of the list.
 */</comment>

<class><specifier>public</specifier> class <name>_138</name> <block>{
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution1</name> <block>{
        <function><type><specifier>public</specifier> <name>Node</name></type> <name>copyRandomList</name><parameter_list>(<parameter><decl><type><name>Node</name></type> <name>head</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <comment type="block" format="javadoc">/**Key is the original nodes, value is the new nodes we're deep copying to.*/</comment>
            <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>Node</name></argument>, <argument><name>Node</name></argument>&gt;</argument_list></name></type> <name>map</name> <init>= <expr><operator>new</operator> <call><name>HashMap</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Node</name></type> <name>node</name> <init>= <expr><name>head</name></expr></init></decl>;</decl_stmt>

            <comment type="line">//loop for the first time: copy the node themselves with only labels</comment>
            <while>while <condition>(<expr><name>node</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Node</name><argument_list>(<argument><expr><name><name>node</name><operator>.</operator><name>val</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>node</name> <operator>=</operator> <name><name>node</name><operator>.</operator><name>next</name></name></expr>;</expr_stmt>
            </block_content>}</block></while>

            <comment type="line">//loop for the second time: copy random and next pointers</comment>
            <expr_stmt><expr><name>node</name> <operator>=</operator> <name>head</name></expr>;</expr_stmt>
            <while>while <condition>(<expr><name>node</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call><operator>.</operator><name>next</name> <operator>=</operator> <call><name><name>map</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>node</name><operator>.</operator><name>next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call><operator>.</operator><name>random</name> <operator>=</operator> <call><name><name>map</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>node</name><operator>.</operator><name>random</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>node</name> <operator>=</operator> <name><name>node</name><operator>.</operator><name>next</name></name></expr>;</expr_stmt>
            </block_content>}</block></while>

            <return>return <expr><call><name><name>map</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>head</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <comment type="line">// Definition for singly-linked list with a random pointer.</comment>
        <class>class <name>Node</name> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>val</name></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>Node</name></type> <name>next</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Node</name></type> <name>random</name></decl>;</decl_stmt>

            <constructor><name>Node</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <expr_stmt><expr><name><name>this</name><operator>.</operator><name>val</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
            </block_content>}</block></constructor>
        }</block></class>
    }</block></class>
}</block></class>
</unit>
