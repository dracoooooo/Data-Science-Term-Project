<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\raw\solutions\_402.java"><package>package <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>solutions</name></name>;</package>

<class><specifier>public</specifier> class <name>_402</name> <block>{
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution1</name> <block>{

        <comment type="block" format="javadoc">/**
         * credit: https://discuss.leetcode.com/topic/59412/a-greedy-method-using-stack-o-n-time-and-o-n-space
         */</comment>
        <function><type><specifier>public</specifier> <name>String</name></type> <name>removeKdigits</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>digits</name> <init>= <expr><call><name><name>num</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>k</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>char</name><index>[]</index></name></type> <name>stack</name> <init>= <expr><operator>new</operator> <name><name>char</name><index>[<expr><call><name><name>num</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>top</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>num</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><call><name><name>num</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <while>while <condition>(<expr><name>top</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>stack</name><index>[<expr><name>top</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&gt;</operator> <name>c</name> <operator>&amp;&amp;</operator> <name>k</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>top</name><operator>--</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><name>k</name><operator>--</operator></expr>;</expr_stmt>
                </block_content>}</block></while>
                <expr_stmt><expr><name><name>stack</name><index>[<expr><name>top</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
            </block_content>}</block></for>

            <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><name>index</name> <operator>&lt;</operator> <name>digits</name> <operator>&amp;&amp;</operator> <name><name>stack</name><index>[<expr><name>index</name></expr>]</index></name> <operator>==</operator> <literal type="char">'0'</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>index</name><operator>++</operator></expr>;</expr_stmt>
            </block_content>}</block></while>
            <return>return <expr><ternary><condition><expr><name>index</name> <operator>==</operator> <name>digits</name></expr> ?</condition><then> <expr><literal type="string">"0"</literal></expr> </then><else>: <expr><operator>new</operator> <call><name>String</name><argument_list>(<argument><expr><name>stack</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>digits</name> <operator>-</operator> <name>index</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
        </block_content>}</block></function>
    }</block></class>
}</block></class>
</unit>
