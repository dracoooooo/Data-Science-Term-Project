<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\raw\solutions\_1357.java"><package>package <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>solutions</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

<class><specifier>public</specifier> class <name>_1357</name> <block>{
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution1</name> <block>{
        <class><specifier>public</specifier> <specifier>static</specifier> class <name>Cashier</name> <block>{

            <decl_stmt><decl><type><name>int</name></type> <name>customerCount</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>productsToPrices</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>discount</name></decl>;</decl_stmt>

            <constructor><specifier>public</specifier> <name>Cashier</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>discount</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>products</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>prices</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <expr_stmt><expr><name><name>this</name><operator>.</operator><name>n</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>this</name><operator>.</operator><name>customerCount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>this</name><operator>.</operator><name>discount</name></name> <operator>=</operator> <name>discount</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>this</name><operator>.</operator><name>productsToPrices</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>products</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>productsToPrices</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>products</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>prices</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>
            </block_content>}</block></constructor>

            <function><type><specifier>public</specifier> <name>double</name></type> <name>getBill</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>product</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>amount</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <decl_stmt><decl><type><name>double</name></type> <name>totalPrice</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>product</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                    <expr_stmt><expr><name>totalPrice</name> <operator>+=</operator> <call><name><name>productsToPrices</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>product</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>*</operator> <name><name>amount</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
                </block_content>}</block></for>
                <if_stmt><if>if <condition>(<expr><name>customerCount</name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <name>n</name></expr>)</condition> <block>{<block_content>
                    <comment type="line">//apply discount</comment>
                    <expr_stmt><expr><name>totalPrice</name> <operator>*=</operator> <operator>(</operator><name>double</name><operator>)</operator> <operator>(</operator><literal type="number">100</literal> <operator>-</operator> <name>discount</name><operator>)</operator> <operator>/</operator> <literal type="number">100</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name>customerCount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><name>customerCount</name><operator>++</operator></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
                <return>return <expr><name>totalPrice</name></expr>;</return>
            </block_content>}</block></function>
        }</block></class>
    }</block></class>
}</block></class>
</unit>
