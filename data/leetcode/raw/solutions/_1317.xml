<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\raw\solutions\_1317.java"><package>package <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>solutions</name></name>;</package>

<comment type="block" format="javadoc">/**
 * 1317. Convert Integer to the Sum of Two No-Zero Integers
 *
 * Given an integer n. No-Zero integer is a positive integer which doesn't contain any 0 in its decimal representation.
 *
 * Return a list of two integers [A, B] where:
 * A and B are No-Zero integers.
 * A + B = n
 * It's guarateed that there is at least one valid solution. If there are many valid solutions you can return any of them.
 *
 * Example 1:
 * Input: n = 2
 * Output: [1,1]
 * Explanation: A = 1, B = 1. A + B = n and both A and B don't contain any 0 in their decimal representation.
 *
 * Example 2:
 * Input: n = 11
 * Output: [2,9]
 *
 * Example 3:
 * Input: n = 10000
 * Output: [1,9999]
 *
 * Example 4:
 * Input: n = 69
 * Output: [1,68]
 *
 * Example 5:
 * Input: n = 1010
 * Output: [11,999]
 *
 * Constraints:
 * 2 &lt;= n &lt;= 10^4
 * */</comment>
<class><specifier>public</specifier> class <name>_1317</name> <block>{
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution1</name> <block>{
        <function><type><specifier>public</specifier> <name><name>int</name><index>[]</index></name></type> <name>getNoZeroIntegers</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>left</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>right</name> <init>= <expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><name>left</name> <operator>&lt;=</operator> <name>right</name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name>noZero</name><argument_list>(<argument><expr><name>left</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>noZero</name><argument_list>(<argument><expr><name>right</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <return>return <expr><operator>new</operator> <name><name>int</name><index>[]</index></name><block>{<expr><name>left</name></expr>, <expr><name>right</name></expr>}</block></expr>;</return>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><name>left</name><operator>++</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><name>right</name><operator>--</operator></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></while>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>boolean</name></type> <name>noZero</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <while>while <condition>(<expr><name>num</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>num</name> <operator>%</operator> <literal type="number">10</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><name>num</name> <operator>/=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></while>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block></function>
    }</block></class>
}</block></class>
</unit>
