<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\raw\solutions\_411.java"><package>package <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>solutions</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<class><specifier>public</specifier> class <name>_411</name> <block>{
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution1</name> <block>{
        <comment type="block" format="javadoc">/**
         * Credit: https://discuss.leetcode.com/topic/61346/trie-bruteforce
         */</comment>
        <class>class <name>Trie</name> <block>{
            <decl_stmt><decl><type><name><name>Trie</name><index>[]</index></name></type> <name>children</name> <init>= <expr><operator>new</operator> <name><name>Trie</name><index>[<expr><literal type="number">26</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>isWord</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
        }</block></class>

        <decl_stmt><decl><type><name>Trie</name></type> <name>root</name> <init>= <expr><operator>new</operator> <call><name>Trie</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>abbrs</name></decl>;</decl_stmt>

        <function><type><specifier>public</specifier> <name>String</name></type> <name>minAbbreviation</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>dictionary</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>String</name></type> <name>s</name> <range>: <expr><name>dictionary</name></expr></range></decl></init>)</control> <block>{<block_content>
                <expr_stmt><expr><call><name>addTrie</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>

            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>target</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <expr_stmt><expr><name>abbrs</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>abbrGenerator</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <for>for <control>(<init><decl><type><name>String</name></type> <name>s</name> <range>: <expr><name>abbrs</name></expr></range></decl></init>)</control> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><call><name>search</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="boolean">false</literal></expr>)</condition> <block>{<block_content>
                        <return>return <expr><name>s</name></expr>;</return>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></for>
            </block_content>}</block></for>
            <return>return <expr><literal type="string">""</literal></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>addTrie</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>Trie</name></type> <name>cur</name> <init>= <expr><name>root</name></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>s</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>.</operator><name>children</name><index>[<expr><name>c</name> <operator>-</operator> <literal type="char">'a'</literal></expr>]</index></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name><name>cur</name><operator>.</operator><name>children</name><index>[<expr><name>c</name> <operator>-</operator> <literal type="char">'a'</literal></expr>]</index></name> <operator>=</operator> <operator>new</operator> <call><name>Trie</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>cur</name><operator>.</operator><name>children</name><index>[<expr><name>c</name> <operator>-</operator> <literal type="char">'a'</literal></expr>]</index></name></expr>;</expr_stmt>
            </block_content>}</block></for>
            <expr_stmt><expr><name><name>cur</name><operator>.</operator><name>isWord</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>search</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>Trie</name></type> <name>root</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>loop</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>root</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name>loop</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>a</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>a</name> <operator>&lt;</operator> <literal type="number">26</literal></expr>;</condition> <incr><expr><name>a</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><call><name>search</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name><name>root</name><operator>.</operator><name>children</name><index>[<expr><name>a</name></expr>]</index></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>loop</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></for>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <call><name><name>target</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>root</name><operator>.</operator><name>isWord</name></name></expr>)</condition> <block>{<block_content>
                    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
                </block_content>}</block></if></if_stmt>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>Character</name><operator>.</operator><name>isDigit</name></name><argument_list>(<argument><expr><call><name><name>target</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>tmp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                <while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <call><name><name>target</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>Character</name><operator>.</operator><name>isDigit</name></name><argument_list>(<argument><expr><call><name><name>target</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>tmp</name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <call><name><name>target</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
                </block_content>}</block></while>
                <return>return <expr><call><name>search</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <return>return <expr><call><name>search</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name><name>root</name><operator>.</operator><name>children</name><index>[<expr><call><name><name>target</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="char">'a'</literal></expr>]</index></name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>abbrGenerator</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>tmp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>abbr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <call><name><name>target</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>num</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>abbr</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>abbrs</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><name>num</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>abbr</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>abbrs</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>tmp</name> <operator>+</operator> <name>abbr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <return>return;</return>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>num</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <return>return;</return>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>char</name></type> <name>cur</name> <init>= <expr><call><name><name>target</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>abbrGenerator</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>abbr</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>tmp</name> <operator>+</operator> <name>cur</name></expr> </then><else>: <expr><name>tmp</name> <operator>+</operator> <name>abbr</name> <operator>+</operator> <name>cur</name></expr></else></ternary></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
                    <argument><expr><ternary><condition><expr><name>abbr</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>num</name> <operator>-</operator> <literal type="number">1</literal></expr> </then><else>: <expr><name>num</name> <operator>-</operator> <literal type="number">2</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>abbrGenerator</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>abbr</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>
    }</block></class>

}</block></class>
</unit>
