<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\raw\solutions\_681.java"><package>package <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>solutions</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>

<class><specifier>public</specifier> class <name>_681</name> <block>{
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution1</name> <block>{
        <function><type><specifier>public</specifier> <name>String</name></type> <name>nextClosestTime</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>time</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>cur</name> <init>= <expr><literal type="number">60</literal> <operator>*</operator> <call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><call><name><name>time</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>cur</name> <operator>+=</operator> <call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><call><name><name>time</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>allowed</name> <init>= <expr><operator>new</operator> <call><name>HashSet</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>char</name></type> <name>c</name> <range>: <expr><call><name><name>time</name><operator>.</operator><name>toCharArray</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <literal type="char">':'</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>allowed</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>c</name> <operator>-</operator> <literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>

            <while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>cur</name> <operator>=</operator> <operator>(</operator><name>cur</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <operator>(</operator><literal type="number">24</literal> <operator>*</operator> <literal type="number">60</literal><operator>)</operator></expr>;</expr_stmt>
                <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>digits</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[]</index></name><block>{<expr><name>cur</name> <operator>/</operator> <literal type="number">60</literal> <operator>/</operator> <literal type="number">10</literal></expr>, <expr><name>cur</name> <operator>/</operator> <literal type="number">60</literal> <operator>%</operator> <literal type="number">10</literal></expr>, <expr><name>cur</name> <operator>%</operator> <literal type="number">60</literal> <operator>/</operator> <literal type="number">10</literal></expr>, <expr><name>cur</name> <operator>%</operator> <literal type="number">60</literal> <operator>%</operator> <literal type="number">10</literal></expr>}</block></expr></init></decl>;</decl_stmt>
                <label><name>search</name>:</label>
                <block>{<block_content>
                    <for>for <control>(<init><decl><type><name>int</name></type> <name>d</name> <range>: <expr><name>digits</name></expr></range></decl></init>)</control> <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>allowed</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                            <break>break <name>search</name>;</break>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></for>
                    <return>return <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"%02d:%02d"</literal></expr></argument>, <argument><expr><name>cur</name> <operator>/</operator> <literal type="number">60</literal></expr></argument>, <argument><expr><name>cur</name> <operator>%</operator> <literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</return>
                </block_content>}</block>
            </block_content>}</block></while>
        </block_content>}</block></function>
    }</block></class>
}</block></class>
</unit>
