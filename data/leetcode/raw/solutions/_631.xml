<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\raw\solutions\_631.java"><package>package <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>solutions</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Stack</name></name>;</import>

<class><specifier>public</specifier> class <name>_631</name> <block>{

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution1</name> <block>{
        <comment type="block" format="javadoc">/**
         * Credit: https://leetcode.com/articles/design-excel-sum-formula/#approach-1-using-topological-sortaccepted
         */</comment>
        <class><specifier>public</specifier> <specifier>static</specifier> class <name>Excel</name> <block>{

            <decl_stmt><decl><type><name><name>Formula</name><index>[]</index><index>[]</index></name></type> <name>formulas</name></decl>;</decl_stmt>

            <class>class <name>Formula</name> <block>{
                <constructor><name>Formula</name><parameter_list>(<parameter><decl><type><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
                    <expr_stmt><expr><name>val</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>cells</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
                </block_content>}</block></constructor>

                <decl_stmt><decl><type><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>cells</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>val</name></decl>;</decl_stmt>
            }</block></class>

            <decl_stmt><decl><type><name><name>Stack</name><argument_list type="generic">&lt;<argument><name><name>int</name><index>[]</index></name></argument>&gt;</argument_list></name></type> <name>stack</name> <init>= <expr><operator>new</operator> <call><name><name>Stack</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <constructor><specifier>public</specifier> <name>Excel</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>H</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>W</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <expr_stmt><expr><name>formulas</name> <operator>=</operator> <operator>new</operator> <name><name>Formula</name><index>[<expr><name>H</name></expr>]</index><index>[<expr><operator>(</operator><name>W</name> <operator>-</operator> <literal type="char">'A'</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
            </block_content>}</block></constructor>

            <function><type><specifier>public</specifier> <name>int</name></type> <name>get</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>formulas</name><index>[<expr><name>r</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>c</name> <operator>-</operator> <literal type="char">'A'</literal></expr>]</index></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <return>return <expr><literal type="number">0</literal></expr>;</return>
                </block_content>}</block></if></if_stmt>
                <return>return <expr><name><name>formulas</name><index>[<expr><name>r</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>c</name> <operator>-</operator> <literal type="char">'A'</literal></expr>]</index></name><operator>.</operator><name>val</name></expr>;</return>
            </block_content>}</block></function>

            <function><type><specifier>public</specifier> <name>void</name></type> <name>set</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <expr_stmt><expr><name><name>formulas</name><index>[<expr><name>r</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>c</name> <operator>-</operator> <literal type="char">'A'</literal></expr>]</index></name> <operator>=</operator> <operator>new</operator> <call><name>Formula</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>topologicalSort</name><argument_list>(<argument><expr><name>r</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>c</name> <operator>-</operator> <literal type="char">'A'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>execute_stack</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></function>

            <function><type><specifier>public</specifier> <name>int</name></type> <name>sum</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>strs</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <decl_stmt><decl><type><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>cells</name> <init>= <expr><call><name>convert</name><argument_list>(<argument><expr><name>strs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>summ</name> <init>= <expr><call><name>calculate_sum</name><argument_list>(<argument><expr><name>r</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>c</name> <operator>-</operator> <literal type="char">'A'</literal></expr></argument>, <argument><expr><name>cells</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>set</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>summ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>formulas</name><index>[<expr><name>r</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>c</name> <operator>-</operator> <literal type="char">'A'</literal></expr>]</index></name> <operator>=</operator> <operator>new</operator> <call><name>Formula</name><argument_list>(<argument><expr><name>cells</name></expr></argument>, <argument><expr><name>summ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>summ</name></expr>;</return>
            </block_content>}</block></function>

            <function><type><specifier>public</specifier> <name>void</name></type> <name>topologicalSort</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>formulas</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                    <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>formulas</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>length</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><name><name>formulas</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name><name>formulas</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name><name>cells</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><literal type="string">""</literal> <operator>+</operator> <operator>(</operator><name>char</name><operator>)</operator> <operator>(</operator><literal type="char">'A'</literal> <operator>+</operator> <name>c</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>r</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                            <expr_stmt><expr><call><name>topologicalSort</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></for>
                </block_content>}</block></for>
                <expr_stmt><expr><call><name><name>stack</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>int</name><index>[]</index></name><block>{<expr><name>r</name></expr>, <expr><name>c</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></function>

            <function><type><specifier>public</specifier> <name>void</name></type> <name>execute_stack</name><parameter_list>()</parameter_list> <block>{<block_content>
                <while>while <condition>(<expr><operator>!</operator><call><name><name>stack</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>top</name> <init>= <expr><call><name><name>stack</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name><name>formulas</name><index>[<expr><name><name>top</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index><index>[<expr><name><name>top</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name><operator>.</operator><call><name><name>cells</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name>calculate_sum</name><argument_list>(<argument><expr><name><name>top</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>top</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>formulas</name><index>[<expr><name><name>top</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index><index>[<expr><name><name>top</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name><operator>.</operator><name>cells</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></while>
            </block_content>}</block></function>

            <function><type><specifier>public</specifier> <name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>convert</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>strs</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <decl_stmt><decl><type><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>res</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name>String</name></type> <name>st</name> <range>: <expr><name>strs</name></expr></range></decl></init>)</control> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><call><name><name>st</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>res</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><call><name><name>res</name><operator>.</operator><name>getOrDefault</name></name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if> <else>else <block>{<block_content>
                        <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>cells</name> <init>= <expr><call><name><name>st</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>int</name></type> <name>si</name> <init>= <expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><name><name>cells</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>substring</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>int</name></type> <name>ei</name> <init>= <expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><name><name>cells</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>substring</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>char</name></type> <name>sj</name> <init>= <expr><name><name>cells</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>charAt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>char</name></type> <name>ej</name> <init>= <expr><name><name>cells</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>charAt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>si</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>ei</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                            <for>for <control>(<init><decl><type><name>char</name></type> <name>j</name> <init>= <expr><name>sj</name></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>ej</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                                <expr_stmt><expr><call><name><name>res</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">""</literal> <operator>+</operator> <name>j</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><call><name><name>res</name><operator>.</operator><name>getOrDefault</name></name><argument_list>(<argument><expr><literal type="string">""</literal> <operator>+</operator> <name>j</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            </block_content>}</block></for>
                        </block_content>}</block></for>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></for>
                <return>return <expr><name>res</name></expr>;</return>
            </block_content>}</block></function>

            <function><type><specifier>public</specifier> <name>int</name></type> <name>calculate_sum</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>cells</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name>String</name></type> <name>s</name> <range>: <expr><call><name><name>cells</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                    <decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="char">'A'</literal></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name>sum</name> <operator>+=</operator> <operator>(</operator><ternary><condition><expr><name><name>formulas</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name></expr>]</index></name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name><name>formulas</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><name>val</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>*</operator> <call><name><name>cells</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>
                <expr_stmt><expr><name><name>formulas</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><name>c</name></expr>]</index></name> <operator>=</operator> <operator>new</operator> <call><name>Formula</name><argument_list>(<argument><expr><name>cells</name></expr></argument>, <argument><expr><name>sum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>sum</name></expr>;</return>
            </block_content>}</block></function>
        }</block></class>
    }</block></class>

    <comment type="block" format="javadoc">/**
     * Your Excel object will be instantiated and called as such:
     * Excel obj = new Excel(H, W);
     * obj.set(r,c,v);
     * int param_2 = obj.get(r,c);
     * int param_3 = obj.sum(r,c,strs);
     */</comment>

}</block></class>
</unit>
