<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\raw\solutions\_338.java"><package>package <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>solutions</name></name>;</package>

<class><specifier>public</specifier> class <name>_338</name> <block>{
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution1</name> <block>{
        <comment type="line">//use the most regular method to get it AC'ed first</comment>
        <function><type><specifier>public</specifier> <name><name>int</name><index>[]</index></name></type> <name>countBits</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>ones</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[<expr><name>num</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>num</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <expr_stmt><expr><name><name>ones</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>countOnes</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <return>return <expr><name>ones</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>int</name></type> <name>countOnes</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>ones</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><name>i</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>ones</name><operator>++</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>i</name> <operator>&amp;=</operator> <operator>(</operator><name>i</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
            </block_content>}</block></while>
            <return>return <expr><name>ones</name></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <class><specifier>private</specifier> class <name>Solution2</name> <block>{
        <comment type="block" format="javadoc">/**
         * lixx2100's post is cool:https://discuss.leetcode.com/topic/40162/three-line-java-solution
         * An easy recurrence for this problem is f[i] = f[i / 2] + i % 2
         * and then we'll use bit manipulation to express the above recursion function
         * right shift by 1 means to divide by 2
         * AND with 1 means to modulo 2
         * this is so cool!
         */</comment>
        <function><type><specifier>public</specifier> <name><name>int</name><index>[]</index></name></type> <name>countBits</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>ones</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[<expr><name>num</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>num</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <expr_stmt><expr><name><name>ones</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>ones</name><index>[<expr><name>i</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
            </block_content>}</block></for>
            <return>return <expr><name>ones</name></expr>;</return>
        </block_content>}</block></function>
    }</block></class>
}</block></class>
</unit>
