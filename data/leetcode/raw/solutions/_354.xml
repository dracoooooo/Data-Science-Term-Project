<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\raw\solutions\_354.java"><package>package <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>solutions</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>

<class><specifier>public</specifier> class <name>_354</name> <block>{
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution1</name> <block>{
        <comment type="block" format="javadoc">/**
         * reference: https://discuss.leetcode.com/topic/47469/java-nlogn-solution-with-explanation
         */</comment>
        <function><type><specifier>public</specifier> <name>int</name></type> <name>maxEnvelopes</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index><index>[]</index></name></type> <name>envelopes</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>envelopes</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name><name>envelopes</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">0</literal>
                    <operator>||</operator> <name><name>envelopes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>envelopes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="number">0</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name><name>Arrays</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><name>envelopes</name></expr></argument>, <argument><expr><lambda><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>b</name></decl></parameter>)</parameter_list> -&gt; <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
                            <return>return <expr><name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</return>
                        </block_content>}</block></if> <else>else <block>{<block_content>
                            <return>return <expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>
                        </block_content>}</block></else></if_stmt>
                    </block_content>}</block></lambda></expr></argument>
            )</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>dp</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[<expr><name><name>envelopes</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name><name>int</name><index>[]</index></name></type> <name>envelope</name> <range>: <expr><name>envelopes</name></expr></range></decl></init>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><call><name><name>Arrays</name><operator>.</operator><name>binarySearch</name></name><argument_list>(<argument><expr><name>dp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>envelope</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>index</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>index</name> <operator>=</operator> <operator>-</operator><operator>(</operator><name>index</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name><name>dp</name><index>[<expr><name>index</name></expr>]</index></name> <operator>=</operator> <name><name>envelope</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>index</name> <operator>==</operator> <name>len</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
            <return>return <expr><name>len</name></expr>;</return>
        </block_content>}</block></function>
    }</block></class>
}</block></class>
</unit>
