<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\raw\solutions\_432.java"><package>package <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>solutions</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>

<class><specifier>public</specifier> class <name>_432</name> <block>{

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution1</name> <block>{

        <comment type="block" format="javadoc">/**
         * credit: https://discuss.leetcode.com/topic/65634/java-ac-all-strict-o-1-not-average-o-1-easy-to-read/2
         */</comment>
        <class>class <name>AllOne</name> <block>{
            <comment type="line">// maintain a doubly linked list of Buckets</comment>
            <decl_stmt><decl><type><specifier>private</specifier> <name>Bucket</name></type> <name>head</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>private</specifier> <name>Bucket</name></type> <name>tail</name></decl>;</decl_stmt>
            <comment type="line">// for accessing a specific Bucket among the Bucket list in O(1) time</comment>
            <decl_stmt><decl><type><specifier>private</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>, <argument><name>Bucket</name></argument>&gt;</argument_list></name></type> <name>countBucketMap</name></decl>;</decl_stmt>
            <comment type="line">// keep track of count of keys</comment>
            <decl_stmt><decl><type><specifier>private</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>keyCountMap</name></decl>;</decl_stmt>

            <comment type="line">// each Bucket contains all the keys with the same count</comment>
            <class><specifier>private</specifier> class <name>Bucket</name> <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>keySet</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Bucket</name></type> <name>next</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Bucket</name></type> <name>pre</name></decl>;</decl_stmt>

                <constructor><specifier>public</specifier> <name>Bucket</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>cnt</name></decl></parameter>)</parameter_list> <block>{<block_content>
                    <expr_stmt><expr><name>count</name> <operator>=</operator> <name>cnt</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>keySet</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></constructor>
            }</block></class>

            <comment type="block" format="javadoc">/**
             * Initialize your data structure here.
             */</comment>
            <constructor><specifier>public</specifier> <name>AllOne</name><parameter_list>()</parameter_list> <block>{<block_content>
                <expr_stmt><expr><name>head</name> <operator>=</operator> <operator>new</operator> <call><name>Bucket</name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>MIN_VALUE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>tail</name> <operator>=</operator> <operator>new</operator> <call><name>Bucket</name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>head</name><operator>.</operator><name>next</name></name> <operator>=</operator> <name>tail</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>tail</name><operator>.</operator><name>pre</name></name> <operator>=</operator> <name>head</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>countBucketMap</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>keyCountMap</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></constructor>

            <comment type="block" format="javadoc">/**
             * Inserts a new key &lt;Key&gt; with value 1. Or increments an existing key by 1.
             */</comment>
            <function><type><specifier>public</specifier> <name>void</name></type> <name>inc</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>keyCountMap</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>changeKey</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><call><name><name>keyCountMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name><name>head</name><operator>.</operator><name>next</name><operator>.</operator><name>count</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name>addBucketAfter</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Bucket</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>head</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><call><name><name>head</name><operator>.</operator><name>next</name><operator>.</operator><name>keySet</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>countBucketMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>head</name><operator>.</operator><name>next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></function>

            <comment type="block" format="javadoc">/**
             * Decrements an existing key by 1. If Key's value is 1, remove it from the data structure.
             */</comment>
            <function><type><specifier>public</specifier> <name>void</name></type> <name>dec</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>keyCountMap</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><call><name><name>keyCountMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>keyCountMap</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>removeKeyFromBucket</name><argument_list>(<argument><expr><call><name><name>countBucketMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>count</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if> <else>else <block>{<block_content>
                        <expr_stmt><expr><call><name>changeKey</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></function>

            <comment type="block" format="javadoc">/**
             * Returns one of the keys with maximal value.
             */</comment>
            <function><type><specifier>public</specifier> <name>String</name></type> <name>getMaxKey</name><parameter_list>()</parameter_list> <block>{<block_content>
                <return>return <expr><ternary><condition><expr><name><name>tail</name><operator>.</operator><name>pre</name></name> <operator>==</operator> <name>head</name></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><operator>(</operator><name>String</name><operator>)</operator> <call><name><name>tail</name><operator>.</operator><name>pre</name><operator>.</operator><name>keySet</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>next</name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</return>
            </block_content>}</block></function>

            <comment type="block" format="javadoc">/**
             * Returns one of the keys with Minimal value.
             */</comment>
            <function><type><specifier>public</specifier> <name>String</name></type> <name>getMinKey</name><parameter_list>()</parameter_list> <block>{<block_content>
                <return>return <expr><ternary><condition><expr><name><name>head</name><operator>.</operator><name>next</name></name> <operator>==</operator> <name>tail</name></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><operator>(</operator><name>String</name><operator>)</operator> <call><name><name>head</name><operator>.</operator><name>next</name><operator>.</operator><name>keySet</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>next</name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</return>
            </block_content>}</block></function>

            <comment type="line">// helper function to make change on given key according to offset</comment>
            <function><type><specifier>private</specifier> <name>void</name></type> <name>changeKey</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><call><name><name>keyCountMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>keyCountMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>count</name> <operator>+</operator> <name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>Bucket</name></type> <name>curBucket</name> <init>= <expr><call><name><name>countBucketMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Bucket</name></type> <name>newBucket</name></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>countBucketMap</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>count</name> <operator>+</operator> <name>offset</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <comment type="line">// target Bucket already exists</comment>
                    <expr_stmt><expr><name>newBucket</name> <operator>=</operator> <call><name><name>countBucketMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>count</name> <operator>+</operator> <name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <comment type="line">// add new Bucket</comment>
                    <expr_stmt><expr><name>newBucket</name> <operator>=</operator> <operator>new</operator> <call><name>Bucket</name><argument_list>(<argument><expr><name>count</name> <operator>+</operator> <name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>countBucketMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>count</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>newBucket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>addBucketAfter</name><argument_list>(<argument><expr><name>newBucket</name></expr></argument>, <argument><expr><ternary><condition><expr><name>offset</name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>curBucket</name></expr> </then><else>: <expr><name><name>curBucket</name><operator>.</operator><name>pre</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
                <expr_stmt><expr><call><name><name>newBucket</name><operator>.</operator><name>keySet</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>removeKeyFromBucket</name><argument_list>(<argument><expr><name>curBucket</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></function>

            <function><type><specifier>private</specifier> <name>void</name></type> <name>removeKeyFromBucket</name><parameter_list>(<parameter><decl><type><name>Bucket</name></type> <name>bucket</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <expr_stmt><expr><call><name><name>bucket</name><operator>.</operator><name>keySet</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>bucket</name><operator>.</operator><name>keySet</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>removeBucketFromList</name><argument_list>(<argument><expr><name>bucket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>countBucketMap</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name><name>bucket</name><operator>.</operator><name>count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></function>

            <function><type><specifier>private</specifier> <name>void</name></type> <name>removeBucketFromList</name><parameter_list>(<parameter><decl><type><name>Bucket</name></type> <name>bucket</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <expr_stmt><expr><name><name>bucket</name><operator>.</operator><name>pre</name><operator>.</operator><name>next</name></name> <operator>=</operator> <name><name>bucket</name><operator>.</operator><name>next</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>bucket</name><operator>.</operator><name>next</name><operator>.</operator><name>pre</name></name> <operator>=</operator> <name><name>bucket</name><operator>.</operator><name>pre</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>bucket</name><operator>.</operator><name>next</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>bucket</name><operator>.</operator><name>pre</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
            </block_content>}</block></function>

            <comment type="line">// add newBucket after preBucket</comment>
            <function><type><specifier>private</specifier> <name>void</name></type> <name>addBucketAfter</name><parameter_list>(<parameter><decl><type><name>Bucket</name></type> <name>newBucket</name></decl></parameter>, <parameter><decl><type><name>Bucket</name></type> <name>preBucket</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <expr_stmt><expr><name><name>newBucket</name><operator>.</operator><name>pre</name></name> <operator>=</operator> <name>preBucket</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>newBucket</name><operator>.</operator><name>next</name></name> <operator>=</operator> <name><name>preBucket</name><operator>.</operator><name>next</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>preBucket</name><operator>.</operator><name>next</name><operator>.</operator><name>pre</name></name> <operator>=</operator> <name>newBucket</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>preBucket</name><operator>.</operator><name>next</name></name> <operator>=</operator> <name>newBucket</name></expr>;</expr_stmt>
            </block_content>}</block></function>
        }</block></class>
    }</block></class>
}</block></class>

<comment type="block" format="javadoc">/**
 * Your AllOne object will be instantiated and called as such:
 * AllOne obj = new AllOne();
 * obj.inc(key);
 * obj.dec(key);
 * String param_3 = obj.getMaxKey();
 * String param_4 = obj.getMinKey();
 */</comment>
</unit>
