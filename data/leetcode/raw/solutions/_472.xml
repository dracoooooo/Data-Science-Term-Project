<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\raw\solutions\_472.java"><package>package <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>solutions</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>

<class><specifier>public</specifier> class <name>_472</name> <block>{

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution1</name> <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <name>TrieNode</name></type> <name>root</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>maxWordLen</name></decl>;</decl_stmt>

        <function><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>findAllConcatenatedWordsInADict</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>words</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>ResultType</name></type> <name>result</name> <init>= <expr><call><name>buildTrie</name><argument_list>(<argument><expr><name>words</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>root</name> <operator>=</operator> <name><name>result</name><operator>.</operator><name>root</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>maxWordLen</name> <operator>=</operator> <name><name>result</name><operator>.</operator><name>maxWordLen</name></name></expr>;</expr_stmt>

            <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>validConcatenatedWords</name> <init>= <expr><operator>new</operator> <call><name>ArrayList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>String</name></type> <name>word</name> <range>: <expr><name>words</name></expr></range></decl></init>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>word</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>word</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name>remove</name><argument_list>(<argument><expr><name>word</name></expr></argument>, <argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="block" format="javadoc">/** every word is comprised of every word itself, thus this word itself needs to be removed first for checking it*/</comment>
                <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name><name>word</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name><name>boolean</name><index>[]</index></name></type> <name>dp</name> <init>= <expr><operator>new</operator> <name><name>boolean</name><index>[<expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name><name>dp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>

                <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                    <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>i</name> <operator>&amp;&amp;</operator> <name>j</name> <operator>&lt;=</operator> <name>maxWordLen</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dp</name><index>[<expr><name>i</name> <operator>-</operator> <name>j</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
                            <continue>continue;</continue>
                        </block_content>}</block></if></if_stmt>

                        <decl_stmt><decl><type><name>String</name></type> <name>subWord</name> <init>= <expr><call><name><name>word</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><name>i</name> <operator>-</operator> <name>j</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if_stmt><if>if <condition>(<expr><call><name>contains</name><argument_list>(<argument><expr><name>subWord</name></expr></argument>, <argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                            <expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                            <break>break;</break>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></for>
                </block_content>}</block></for>

                <if_stmt><if>if <condition>(<expr><name><name>dp</name><index>[<expr><name>n</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>validConcatenatedWords</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>word</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name>undoRemove</name><argument_list>(<argument><expr><name>word</name></expr></argument>, <argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <return>return <expr><name>validConcatenatedWords</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>ResultType</name></type> <name>buildTrie</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>words</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>ResultType</name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name>ResultType</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>TrieNode</name></type> <name>root</name> <init>= <expr><operator>new</operator> <call><name>TrieNode</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>maxWordLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

            <for>for <control>(<init><decl><type><name>String</name></type> <name>word</name> <range>: <expr><name>words</name></expr></range></decl></init>)</control> <block>{<block_content>
                <expr_stmt><expr><name>maxWordLen</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name>maxWordLen</name></expr></argument>, <argument><expr><call><name><name>word</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name><name>char</name><index>[]</index></name></type> <name>chars</name> <init>= <expr><call><name><name>word</name><operator>.</operator><name>toCharArray</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>TrieNode</name></type> <name>node</name> <init>= <expr><name>root</name></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>chars</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                    <decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><name><name>chars</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name><name>node</name><operator>.</operator><name>children</name><index>[<expr><name>c</name> <operator>-</operator> <literal type="char">'a'</literal></expr>]</index></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name><name>node</name><operator>.</operator><name>children</name><index>[<expr><name>c</name> <operator>-</operator> <literal type="char">'a'</literal></expr>]</index></name> <operator>=</operator> <operator>new</operator> <call><name>TrieNode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><name>node</name> <operator>=</operator> <name><name>node</name><operator>.</operator><name>children</name><index>[<expr><name>c</name> <operator>-</operator> <literal type="char">'a'</literal></expr>]</index></name></expr>;</expr_stmt>
                </block_content>}</block></for>
                <expr_stmt><expr><name><name>node</name><operator>.</operator><name>isWord</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            </block_content>}</block></for>

            <expr_stmt><expr><name><name>result</name><operator>.</operator><name>root</name></name> <operator>=</operator> <name>root</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>result</name><operator>.</operator><name>maxWordLen</name></name> <operator>=</operator> <name>maxWordLen</name></expr>;</expr_stmt>
            <return>return <expr><name>result</name></expr>;</return>
        </block_content>}</block></function>

        <class><specifier>public</specifier> class <name>ResultType</name> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>maxWordLen</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>TrieNode</name></type> <name>root</name></decl>;</decl_stmt>
        }</block></class>

        <comment type="line">// Returns true if the word is in the trie.</comment>
        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>contains</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>word</name></decl></parameter>, <parameter><decl><type><name>TrieNode</name></type> <name>root</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>TrieNode</name></type> <name>node</name> <init>= <expr><name>root</name></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>word</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>node</name><operator>.</operator><name>children</name><index>[<expr><call><name><name>word</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="char">'a'</literal></expr>]</index></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name>node</name> <operator>=</operator> <name><name>node</name><operator>.</operator><name>children</name><index>[<expr><call><name><name>word</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="char">'a'</literal></expr>]</index></name></expr>;</expr_stmt>
            </block_content>}</block></for>
            <return>return <expr><name><name>node</name><operator>.</operator><name>isWord</name></name></expr>;</return>
        </block_content>}</block></function>

        <comment type="line">// mark that word on</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>undoRemove</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>word</name></decl></parameter>, <parameter><decl><type><name>TrieNode</name></type> <name>root</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>TrieNode</name></type> <name>node</name> <init>= <expr><name>root</name></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>word</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <expr_stmt><expr><name>node</name> <operator>=</operator> <name><name>node</name><operator>.</operator><name>children</name><index>[<expr><call><name><name>word</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="char">'a'</literal></expr>]</index></name></expr>;</expr_stmt>
            </block_content>}</block></for>
            <expr_stmt><expr><name><name>node</name><operator>.</operator><name>isWord</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        </block_content>}</block></function>

        <comment type="line">// mark that word off, we are not really deleting that word</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>remove</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>word</name></decl></parameter>, <parameter><decl><type><name>TrieNode</name></type> <name>root</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>TrieNode</name></type> <name>node</name> <init>= <expr><name>root</name></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>word</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <expr_stmt><expr><name>node</name> <operator>=</operator> <name><name>node</name><operator>.</operator><name>children</name><index>[<expr><call><name><name>word</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="char">'a'</literal></expr>]</index></name></expr>;</expr_stmt>
            </block_content>}</block></for>
            <expr_stmt><expr><name><name>node</name><operator>.</operator><name>isWord</name></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        </block_content>}</block></function>

        <class>class <name>TrieNode</name> <block>{
            <decl_stmt><decl><type><name>boolean</name></type> <name>isWord</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>TrieNode</name><index>[]</index></name></type> <name>children</name> <init>= <expr><operator>new</operator> <name><name>TrieNode</name><index>[<expr><literal type="number">26</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <constructor><specifier>public</specifier> <name>TrieNode</name><parameter_list>()</parameter_list> <block>{<block_content>
            </block_content>}</block></constructor>
        }</block></class>
    }</block></class>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution2</name> <block>{
        <function><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>findAllConcatenatedWordsInADict</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>words</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>preWords</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="block" format="javadoc">/**Words could only be formed by other words that are shorter than itself, so we sort them based on their lengths first.*/</comment>
            <expr_stmt><expr><call><name><name>Arrays</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><name>words</name></expr></argument>, <argument><expr><lambda><parameter_list>(<parameter><decl><name>s1</name></decl></parameter>, <parameter><decl><name>s2</name></decl></parameter>)</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>s1</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>-</operator> <call><name><name>s2</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>words</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name>canForm</name><argument_list>(<argument><expr><name><name>words</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>preWords</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>words</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name><name>preWords</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>words</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>

            <return>return <expr><name>result</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><name>boolean</name></type> <name>canForm</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>word</name></decl></parameter>, <parameter><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>dict</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>dict</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name><name>boolean</name><index>[]</index></name></type> <name>dp</name> <init>= <expr><operator>new</operator> <name><name>boolean</name><index>[<expr><call><name><name>word</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>dp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <call><name><name>word</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>i</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name><name>dp</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&amp;&amp;</operator> <call><name><name>dict</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><call><name><name>word</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                        <break>break;</break>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></for>
            </block_content>}</block></for>
            <return>return <expr><name><name>dp</name><index>[<expr><call><name><name>word</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr>;</return>
        </block_content>}</block></function>
    }</block></class>
}</block></class>
</unit>
