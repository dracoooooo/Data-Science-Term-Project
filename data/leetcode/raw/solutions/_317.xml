<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\raw\solutions\_317.java"><package>package <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>solutions</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>LinkedList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Queue</name></name>;</import>

<class><specifier>public</specifier> class <name>_317</name> <block>{
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution1</name> <block>{
        <function><type><specifier>public</specifier> <name>int</name></type> <name>shortestDistance</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index><index>[]</index></name></type> <name>grid</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>m</name> <init>= <expr><name><name>grid</name><operator>.</operator><name>length</name></name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>m</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><name><name>grid</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>length</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>int</name><index>[]</index><index>[]</index></name></type> <name>reach</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[<expr><name>m</name></expr>]</index><index>[<expr><name>n</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>int</name><index>[]</index><index>[]</index></name></type> <name>distance</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[<expr><name>m</name></expr>]</index><index>[<expr><name>n</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>shift</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[]</index></name><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
                    <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt><comment type="line">//how these five elements is ordered is important since it denotes the neighbor of the current node</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>numBuilding</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>m</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name><name>grid</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>numBuilding</name><operator>++</operator></expr>;</expr_stmt>
                        <decl_stmt><decl><type><name>int</name></type> <name>dist</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name><name>boolean</name><index>[]</index><index>[]</index></name></type> <name>visited</name> <init>= <expr><operator>new</operator> <name><name>boolean</name><index>[<expr><name>m</name></expr>]</index><index>[<expr><name>n</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

                        <decl_stmt><decl><type><name><name>Queue</name><argument_list type="generic">&lt;<argument><name><name>int</name><index>[]</index></name></argument>&gt;</argument_list></name></type> <name>q</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;<argument><name><name>int</name><index>[]</index></name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>offer</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>int</name><index>[]</index></name><block>{<expr><name>i</name></expr>, <expr><name>j</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <while>while <condition>(<expr><operator>!</operator><call><name><name>q</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                            <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name><name>q</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                            <for>for <control>(<init><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>l</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>l</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                                <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>current</name> <init>= <expr><call><name><name>q</name><operator>.</operator><name>poll</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                                <for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                                    <decl_stmt><decl><type><name>int</name></type> <name>nextRow</name> <init>= <expr><name><name>current</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>shift</name><index>[<expr><name>k</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                                    <decl_stmt><decl><type><name>int</name></type> <name>nextCol</name> <init>= <expr><name><name>current</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>shift</name><index>[<expr><name>k</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
                                    <if_stmt><if>if <condition>(<expr><name>nextRow</name> <operator>&gt;=</operator> <literal type="number">0</literal>
                                            <operator>&amp;&amp;</operator> <name>nextRow</name> <operator>&lt;</operator> <name>m</name>
                                            <operator>&amp;&amp;</operator> <name>nextCol</name> <operator>&gt;=</operator> <literal type="number">0</literal>
                                            <operator>&amp;&amp;</operator> <name>nextCol</name> <operator>&lt;</operator> <name>n</name>
                                            <operator>&amp;&amp;</operator> <operator>!</operator><name><name>visited</name><index>[<expr><name>nextRow</name></expr>]</index><index>[<expr><name>nextCol</name></expr>]</index></name>
                                            <operator>&amp;&amp;</operator> <name><name>grid</name><index>[<expr><name>nextRow</name></expr>]</index><index>[<expr><name>nextCol</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                                        <expr_stmt><expr><name><name>distance</name><index>[<expr><name>nextRow</name></expr>]</index><index>[<expr><name>nextCol</name></expr>]</index></name> <operator>+=</operator> <name>dist</name></expr>;</expr_stmt>
                                        <expr_stmt><expr><name><name>visited</name><index>[<expr><name>nextRow</name></expr>]</index><index>[<expr><name>nextCol</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                                        <expr_stmt><expr><name><name>reach</name><index>[<expr><name>nextRow</name></expr>]</index><index>[<expr><name>nextCol</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
                                        <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>offer</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>int</name><index>[]</index></name><block>{<expr><name>nextRow</name></expr>, <expr><name>nextCol</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                    </block_content>}</block></if></if_stmt>
                                </block_content>}</block></for>
                            </block_content>}</block></for>
                            <expr_stmt><expr><name>dist</name><operator>++</operator></expr>;</expr_stmt>
                        </block_content>}</block></while>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></for>
            </block_content>}</block></for>

            <decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>m</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name><name>grid</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>reach</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name>numBuilding</name> <operator>&amp;&amp;</operator> <name><name>distance</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>&lt;</operator> <name>result</name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>result</name> <operator>=</operator> <name><name>distance</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></for>
            </block_content>}</block></for>
            <return>return <expr><ternary><condition><expr><name>result</name> <operator>==</operator> <name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><name>result</name></expr></else></ternary></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

}</block></class>
</unit>
