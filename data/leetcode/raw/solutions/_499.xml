<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\raw\solutions\_499.java"><package>package <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>solutions</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>PriorityQueue</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Queue</name></name>;</import>

<class><specifier>public</specifier> class <name>_499</name> <block>{
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solutoin1</name> <block>{
        <comment type="block" format="javadoc">/**
         * credit: https://discuss.leetcode.com/topic/77474/similar-to-the-maze-ii-easy-understanding-java-bfs-solution
         */</comment>

        <function><type><specifier>public</specifier> <name>String</name></type> <name>findShortestWay</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index><index>[]</index></name></type> <name>maze</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>ball</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>hole</name></decl></parameter>)</parameter_list> <block>{<block_content>

            <decl_stmt><decl><type><specifier>final</specifier> <name><name>int</name><index>[]</index></name></type> <name>directions</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[]</index></name><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>Queue</name><argument_list type="generic">&lt;<argument><name>Point</name></argument>&gt;</argument_list></name></type> <name>heap</name> <init>= <expr><operator>new</operator> <call><name><name>PriorityQueue</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>heap</name><operator>.</operator><name>offer</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Point</name><argument_list>(<argument><expr><name><name>ball</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ball</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>m</name> <init>= <expr><name><name>maze</name><operator>.</operator><name>length</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><name><name>maze</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>length</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>Point</name><index>[]</index><index>[]</index></name></type> <name>points</name> <init>= <expr><operator>new</operator> <name><name>Point</name><index>[<expr><name>m</name></expr>]</index><index>[<expr><name>n</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>m</name> <operator>*</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <expr_stmt><expr><name><name>points</name><index>[<expr><name>i</name> <operator>/</operator> <name>n</name></expr>]</index><index>[<expr><name>i</name> <operator>%</operator> <name>n</name></expr>]</index></name> <operator>=</operator> <operator>new</operator> <call><name>Point</name><argument_list>(<argument><expr><name>i</name> <operator>/</operator> <name>n</name></expr></argument>, <argument><expr><name>i</name> <operator>%</operator> <name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line">//initialize the length array</comment>
            </block_content>}</block></for>
            <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>ds</name> <init>= <expr><operator>new</operator> <name><name>String</name><index>[]</index></name><block>{<expr><literal type="string">"u"</literal></expr>, <expr><literal type="string">"r"</literal></expr>, <expr><literal type="string">"d"</literal></expr>, <expr><literal type="string">"l"</literal></expr>}</block></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><operator>!</operator><call><name><name>heap</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>Point</name></type> <name>curr</name> <init>= <expr><call><name><name>heap</name><operator>.</operator><name>poll</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>points</name><index>[<expr><name><name>curr</name><operator>.</operator><name>x</name></name></expr>]</index><index>[<expr><name><name>curr</name><operator>.</operator><name>y</name></name></expr>]</index></name><operator>.</operator><call><name>compareTo</name><argument_list>(<argument><expr><name>curr</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <continue>continue;</continue><comment type="line">//if we have already found a shorter route</comment>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name><name>points</name><index>[<expr><name><name>curr</name><operator>.</operator><name>x</name></name></expr>]</index><index>[<expr><name><name>curr</name><operator>.</operator><name>y</name></name></expr>]</index></name> <operator>=</operator> <name>curr</name></expr>;</expr_stmt>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>directions</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                    <decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name><name>curr</name><operator>.</operator><name>x</name></name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><name><name>curr</name><operator>.</operator><name>y</name></name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>distance</name> <init>= <expr><name><name>curr</name><operator>.</operator><name>distance</name></name></expr></init></decl>;</decl_stmt><comment type="line">//use temp variables to move</comment>
                    <comment type="line">//we need below while loop to find only "stop" points that could be put into the queue</comment>
                    <while>while <condition>(<expr><name>x</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>y</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>x</name> <operator>&lt;</operator> <name>m</name> <operator>&amp;&amp;</operator> <name>y</name> <operator>&lt;</operator> <name>n</name> <operator>&amp;&amp;</operator> <name><name>maze</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>x</name> <operator>!=</operator> <name><name>hole</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>||</operator> <name>y</name> <operator>!=</operator> <name><name>hole</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>x</name> <operator>+=</operator> <name><name>directions</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
                        <expr_stmt><expr><name>y</name> <operator>+=</operator> <name><name>directions</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
                        <expr_stmt><expr><name>distance</name><operator>++</operator></expr>;</expr_stmt>
                    </block_content>}</block></while>
                    <if_stmt><if>if <condition>(<expr><name>x</name> <operator>!=</operator> <name><name>hole</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>||</operator> <name>y</name> <operator>!=</operator> <name><name>hole</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>x</name> <operator>-=</operator> <name><name>directions</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
                        <expr_stmt><expr><name>y</name> <operator>-=</operator> <name><name>directions</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
                        <expr_stmt><expr><name>distance</name><operator>--</operator></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><call><name><name>heap</name><operator>.</operator><name>offer</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Point</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>distance</name></expr></argument>, <argument><expr><name><name>curr</name><operator>.</operator><name>path</name></name> <operator>+</operator> <name><name>ds</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>
            </block_content>}</block></while>
            <return>return <expr><ternary><condition><expr><name><name>points</name><index>[<expr><name><name>hole</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index><index>[<expr><name><name>hole</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name><operator>.</operator><name>distance</name> <operator>==</operator> <name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr> ?</condition><then> <expr><literal type="string">"impossible"</literal></expr> </then><else>: <expr><name><name>points</name><index>[<expr><name><name>hole</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index><index>[<expr><name><name>hole</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name><operator>.</operator><name>path</name></expr></else></ternary></expr>;</return>
        </block_content>}</block></function>

        <class>class <name>Point</name> <super_list><implements>implements <super><name><name>Comparable</name><argument_list type="generic">&lt;<argument><name>Point</name></argument>&gt;</argument_list></name></super></implements></super_list> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>distance</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>path</name></decl>;</decl_stmt>

            <constructor><specifier>public</specifier> <name>Point</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <expr_stmt><expr><name><name>this</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>this</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>this</name><operator>.</operator><name>distance</name></name> <operator>=</operator> <name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>this</name><operator>.</operator><name>path</name></name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
            </block_content>}</block></constructor>

            <constructor><specifier>public</specifier> <name>Point</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>distance</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>path</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <expr_stmt><expr><name><name>this</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>this</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>this</name><operator>.</operator><name>distance</name></name> <operator>=</operator> <name>distance</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>this</name><operator>.</operator><name>path</name></name> <operator>=</operator> <name>path</name></expr>;</expr_stmt>
            </block_content>}</block></constructor>

            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>public</specifier> <name>int</name></type> <name>compareTo</name><parameter_list>(<parameter><decl><type><name>Point</name></type> <name>o</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <return>return <expr><ternary><condition><expr><operator>(</operator><name><name>this</name><operator>.</operator><name>distance</name></name> <operator>==</operator> <name><name>o</name><operator>.</operator><name>distance</name></name><operator>)</operator></expr> ?</condition><then> <expr><call><name><name>this</name><operator>.</operator><name>path</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name><name>o</name><operator>.</operator><name>path</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name><name>this</name><operator>.</operator><name>distance</name></name> <operator>-</operator> <name><name>o</name><operator>.</operator><name>distance</name></name></expr></else></ternary></expr>;</return>
            </block_content>}</block></function>
        }</block></class>
    }</block></class>
}</block></class>
</unit>
