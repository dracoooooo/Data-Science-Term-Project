<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\raw\solutions\_333.java"><package>package <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>solutions</name></name>;</package>

<import>import <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>common</name><operator>.</operator><name>classes</name><operator>.</operator><name>TreeNode</name></name>;</import>

<class><specifier>public</specifier> class <name>_333</name> <block>{
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution1</name> <block>{
        <comment type="block" format="javadoc">/**
         * credit: https://discuss.leetcode.com/topic/36995/share-my-o-n-java-code-with-brief-explanation-and-comments
         */</comment>
        <class>class <name>Result</name> <block>{  <comment type="line">// (size, rangeLower, rangeUpper) -- size of current tree, range of current tree [rangeLower, rangeUpper]</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>lower</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>upper</name></decl>;</decl_stmt>

            <constructor><name>Result</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lower</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>upper</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <expr_stmt><expr><name><name>this</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>this</name><operator>.</operator><name>lower</name></name> <operator>=</operator> <name>lower</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>this</name><operator>.</operator><name>upper</name></name> <operator>=</operator> <name>upper</name></expr>;</expr_stmt>
            </block_content>}</block></constructor>
        }</block></class>

        <decl_stmt><decl><type><name>int</name></type> <name>max</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <function><type><specifier>public</specifier> <name>int</name></type> <name>largestBSTSubtree</name><parameter_list>(<parameter><decl><type><name>TreeNode</name></type> <name>root</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>root</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="number">0</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>traverse</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>max</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>Result</name></type> <name>traverse</name><parameter_list>(<parameter><decl><type><name>TreeNode</name></type> <name>root</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>root</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><operator>new</operator> <call><name>Result</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr></argument>, <argument><expr><name><name>Integer</name><operator>.</operator><name>MIN_VALUE</name></name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>Result</name></type> <name>left</name> <init>= <expr><call><name>traverse</name><argument_list>(<argument><expr><name><name>root</name><operator>.</operator><name>left</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Result</name></type> <name>right</name> <init>= <expr><call><name>traverse</name><argument_list>(<argument><expr><name><name>root</name><operator>.</operator><name>right</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>left</name><operator>.</operator><name>size</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name><name>right</name><operator>.</operator><name>size</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name><name>root</name><operator>.</operator><name>val</name></name> <operator>&lt;=</operator> <name><name>left</name><operator>.</operator><name>upper</name></name> <operator>||</operator> <name><name>root</name><operator>.</operator><name>val</name></name> <operator>&gt;=</operator> <name><name>right</name><operator>.</operator><name>lower</name></name></expr>)</condition> <block>{<block_content>
                <return>return <expr><operator>new</operator> <call><name>Result</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><name><name>left</name><operator>.</operator><name>size</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name><name>right</name><operator>.</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>max</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><operator>new</operator> <call><name>Result</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><name><name>left</name><operator>.</operator><name>lower</name></name></expr></argument>, <argument><expr><name><name>root</name><operator>.</operator><name>val</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name><name>right</name><operator>.</operator><name>upper</name></name></expr></argument>, <argument><expr><name><name>root</name><operator>.</operator><name>val</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>largestBSTSubtree</name><parameter_list>(<parameter><decl><type><name>TreeNode</name></type> <name>root</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>root</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>isBST</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name>getNodes</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><call><name>find</name><argument_list>(<argument><expr><name><name>root</name><operator>.</operator><name>left</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>find</name><argument_list>(<argument><expr><name><name>root</name><operator>.</operator><name>right</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>int</name></type> <name>find</name><parameter_list>(<parameter><decl><type><name>TreeNode</name></type> <name>root</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>isBST</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name>getNodes</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><call><name>find</name><argument_list>(<argument><expr><name><name>root</name><operator>.</operator><name>left</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>find</name><argument_list>(<argument><expr><name><name>root</name><operator>.</operator><name>right</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>int</name></type> <name>getNodes</name><parameter_list>(<parameter><decl><type><name>TreeNode</name></type> <name>root</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>root</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name>dfsCount</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>int</name></type> <name>dfsCount</name><parameter_list>(<parameter><decl><type><name>TreeNode</name></type> <name>root</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>root</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name>dfsCount</name><argument_list>(<argument><expr><name><name>root</name><operator>.</operator><name>left</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>dfsCount</name><argument_list>(<argument><expr><name><name>root</name><operator>.</operator><name>right</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>boolean</name></type> <name>isBST</name><parameter_list>(<parameter><decl><type><name>TreeNode</name></type> <name>root</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>root</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name>dfs</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name><name>Long</name><operator>.</operator><name>MIN_VALUE</name></name></expr></argument>, <argument><expr><name><name>Long</name><operator>.</operator><name>MAX_VALUE</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>boolean</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>TreeNode</name></type> <name>root</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>min</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>max</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>root</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>root</name><operator>.</operator><name>val</name></name> <operator>&lt;=</operator> <name>min</name> <operator>||</operator> <name><name>root</name><operator>.</operator><name>val</name></name> <operator>&gt;=</operator> <name>max</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><call><name>dfs</name><argument_list>(<argument><expr><name><name>root</name><operator>.</operator><name>left</name></name></expr></argument>, <argument><expr><name>min</name></expr></argument>, <argument><expr><name><name>root</name><operator>.</operator><name>val</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>dfs</name><argument_list>(<argument><expr><name><name>root</name><operator>.</operator><name>right</name></name></expr></argument>, <argument><expr><name><name>root</name><operator>.</operator><name>val</name></name></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

}</block></class>
</unit>
