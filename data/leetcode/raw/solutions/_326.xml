<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\raw\solutions\_326.java"><package>package <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>solutions</name></name>;</package>

<class><specifier>public</specifier> class <name>_326</name> <block>{
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution1</name> <block>{
        <comment type="line">//regular method that has a loop</comment>
        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isPowerOfThree</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name>n</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <while>while <condition>(<expr><name>n</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>n</name> <operator>%</operator> <literal type="number">3</literal> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name>n</name> <operator>/=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
            </block_content>}</block></while>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution2</name> <block>{
        <comment type="line">//find the max possible integer that is a power of 3, then do modulor with this number</comment>
        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isPowerOfThree</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <return>return <expr><operator>(</operator><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <literal type="number">1162261467</literal> <operator>%</operator> <name>n</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution3</name> <block>{
        <comment type="line">//Editorial solution: it's pretty elegant to use base conversion which can be easily extended to any radix k</comment>
        <comment type="line">//Idea: for a number in base 10, if it's power of 10, then it must be in this format: 10, 100, 1000... with a leading one and all trailing zeros</comment>
        <comment type="line">//similarly, if a number is power of 3, then in its base 3 format, it must be in this format as well: 10, 100, 1000, 1000...</comment>
        <comment type="line">//some Java built-in function could help us along the way:</comment>
        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isPowerOfThree</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <return>return <expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>matches</name><argument_list>(<argument><expr><literal type="string">"^10*$"</literal></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

}</block></class></unit>
