<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\raw\solutions\_211.java"><package>package <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>solutions</name></name>;</package>

<class><specifier>public</specifier> class <name>_211</name> <block>{
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution1</name> <block>{
        <class><specifier>public</specifier> <specifier>static</specifier> class <name>WordDictionary</name> <block>{
            <decl_stmt><decl><type><name>WordNode</name></type> <name>root</name></decl>;</decl_stmt>

            <comment type="block" format="javadoc">/**
             * Initialize your data structure here.
             */</comment>
            <constructor><specifier>public</specifier> <name>WordDictionary</name><parameter_list>()</parameter_list> <block>{<block_content>
                <expr_stmt><expr><name>root</name> <operator>=</operator> <operator>new</operator> <call><name>WordNode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></constructor>

            <function><type><specifier>public</specifier> <name>void</name></type> <name>addWord</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>word</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <decl_stmt><decl><type><name><name>char</name><index>[]</index></name></type> <name>chars</name> <init>= <expr><call><name><name>word</name><operator>.</operator><name>toCharArray</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>addWord</name><argument_list>(<argument><expr><name>chars</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></function>

            <function><type><specifier>private</specifier> <name>void</name></type> <name>addWord</name><parameter_list>(<parameter><decl><type><name><name>char</name><index>[]</index></name></type> <name>chars</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>WordNode</name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><name><name>chars</name><index>[<expr><name>index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><name>c</name> <operator>-</operator> <literal type="char">'a'</literal></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>WordNode</name></type> <name>node</name> <init>= <expr><name><name>parent</name><operator>.</operator><name>children</name><index>[<expr><name>idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>node</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>node</name> <operator>=</operator> <operator>new</operator> <call><name>WordNode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>parent</name><operator>.</operator><name>children</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>chars</name><operator>.</operator><name>length</name></name> <operator>==</operator> <name>index</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name><name>node</name><operator>.</operator><name>isLeaf</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                    <return>return;</return>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name>addWord</name><argument_list>(<argument><expr><name>chars</name></expr></argument>, <argument><expr><operator>++</operator><name>index</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></function>

            <function><type><specifier>public</specifier> <name>boolean</name></type> <name>search</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>word</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <return>return <expr><call><name>search</name><argument_list>(<argument><expr><call><name><name>word</name><operator>.</operator><name>toCharArray</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></function>

            <comment type="block" format="javadoc">/**
             * This is also a beautifully designed recursive function.
             */</comment>
            <function><type><specifier>private</specifier> <name>boolean</name></type> <name>search</name><parameter_list>(<parameter><decl><type><name><name>char</name><index>[]</index></name></type> <name>chars</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>WordNode</name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>index</name> <operator>==</operator> <name><name>chars</name><operator>.</operator><name>length</name></name></expr>)</condition> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name><name>parent</name><operator>.</operator><name>isLeaf</name></name></expr>)</condition> <block>{<block_content>
                        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
                    </block_content>}</block></if></if_stmt>
                    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
                </block_content>}</block></if></if_stmt>
                <decl_stmt><decl><type><name><name>WordNode</name><index>[]</index></name></type> <name>childNodes</name> <init>= <expr><name><name>parent</name><operator>.</operator><name>children</name></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><name><name>chars</name><index>[<expr><name>index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>
                    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>childNodes</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                        <decl_stmt><decl><type><name>WordNode</name></type> <name>n</name> <init>= <expr><name><name>childNodes</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                        <if_stmt><if>if <condition>(<expr><name>n</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                            <decl_stmt><decl><type><name>boolean</name></type> <name>b</name> <init>= <expr><call><name>search</name><argument_list>(<argument><expr><name>chars</name></expr></argument>, <argument><expr><name>index</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                            <if_stmt><if>if <condition>(<expr><name>b</name></expr>)</condition> <block>{<block_content>
                                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
                            </block_content>}</block></if></if_stmt>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></for>
                    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
                </block_content>}</block></if></if_stmt>
                <decl_stmt><decl><type><name>WordNode</name></type> <name>node</name> <init>= <expr><name><name>childNodes</name><index>[<expr><name>c</name> <operator>-</operator> <literal type="char">'a'</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>node</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
                </block_content>}</block></if></if_stmt>
                <return>return <expr><call><name>search</name><argument_list>(<argument><expr><name>chars</name></expr></argument>, <argument><expr><operator>++</operator><name>index</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></function>

            <comment type="block" format="javadoc">/**
             * This is a cool/standard design for a Trie node class.
             */</comment>
            <class><specifier>private</specifier> class <name>WordNode</name> <block>{
                <decl_stmt><decl><type><name>boolean</name></type> <name>isLeaf</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name><name>WordNode</name><index>[]</index></name></type> <name>children</name> <init>= <expr><operator>new</operator> <name><name>WordNode</name><index>[<expr><literal type="number">26</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
            }</block></class>
        }</block></class>

        <comment type="block" format="javadoc">/**
         * Your WordDictionary object will be instantiated and called as such:
         * WordDictionary obj = new WordDictionary();
         * obj.addWord(word);
         * boolean param_2 = obj.search(word);
         */</comment>
    }</block></class>
}</block></class>
</unit>
