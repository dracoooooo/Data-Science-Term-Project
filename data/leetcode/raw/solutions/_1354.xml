<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\raw\solutions\_1354.java"><package>package <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>solutions</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>PriorityQueue</name></name>;</import>

<class><specifier>public</specifier> class <name>_1354</name> <block>{
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution1</name> <block>{
        <comment type="block" format="javadoc">/**
         * 1. A good idea/trick to calculate the previous value of the largest number max: (2 * max - total).
         * 2. Use a PriorityQueue to store the elements in reverse order to help us get the largest element in O(1) time
         * 3. Also keep a variable of total sum
         * &lt;p&gt;
         * reference: https://leetcode.com/problems/construct-target-array-with-multiple-sums/discuss/510214/C%2B%2B-Reaching-Points-Work-Backwards
         */</comment>
        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isPossible</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>target</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name><name>PriorityQueue</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>pq</name> <init>= <expr><operator>new</operator> <call><name><name>PriorityQueue</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>Collections</name><operator>.</operator><name>reverseOrder</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>long</name></type> <name>sum</name> <init>= <expr><literal type="number">0L</literal></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>v</name> <range>: <expr><name>target</name></expr></range></decl></init>)</control> <block>{<block_content>
                <expr_stmt><expr><name>sum</name> <operator>+=</operator> <name>v</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>pq</name><operator>.</operator><name>offer</name></name><argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator> <name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <while>while <condition>(<expr><name>sum</name> <operator>&gt;</operator> <call><name><name>pq</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>long</name></type> <name>max</name> <init>= <expr><call><name><name>pq</name><operator>.</operator><name>poll</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Long</name></type> <name>prev</name> <init>= <expr><literal type="number">2</literal> <operator>*</operator> <name>max</name> <operator>-</operator> <name>sum</name></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>prev</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name><name>pq</name><operator>.</operator><name>offer</name></name><argument_list>(<argument><expr><name>prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>sum</name> <operator>-=</operator> <name>max</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>sum</name> <operator>+=</operator> <name>prev</name></expr>;</expr_stmt>
            </block_content>}</block></while>
            <return>return <expr><name>sum</name> <operator>==</operator> <call><name><name>pq</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>
    }</block></class>
}</block></class></unit>
