<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\raw\solutions\_25.java"><package>package <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>solutions</name></name>;</package>

<import>import <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>common</name><operator>.</operator><name>classes</name><operator>.</operator><name>ListNode</name></name>;</import>

<class><specifier>public</specifier> class <name>_25</name> <block>{

    <comment type="block" format="javadoc">/**We use recursion to go all the way until the end: when the number of nodes are smaller than k;
     * then we start to reverse each group of k nodes from the end towards the start.*/</comment>
    <function><type><specifier>public</specifier> <name>ListNode</name></type> <name>reverseKGroup</name><parameter_list>(<parameter><decl><type><name>ListNode</name></type> <name>head</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>ListNode</name></type> <name>curr</name> <init>= <expr><name>head</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><name>curr</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>count</name> <operator>!=</operator> <name>k</name></expr>)</condition> <block>{<block_content>
            <comment type="line">//find the k+1 node</comment>
            <expr_stmt><expr><name>curr</name> <operator>=</operator> <name><name>curr</name><operator>.</operator><name>next</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></while>

        <if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <name>k</name></expr>)</condition> <block>{<block_content>
            <comment type="block" format="javadoc">/**after this below recursive call finishes, it'll return head;
             * then this returned "head" will become "curr", while the head
             * in its previous callstack is the real head after this call.
             * Setting up a break point will make all of this crystal clear.*/</comment>
            <expr_stmt><expr><name>curr</name> <operator>=</operator> <call><name>reverseKGroup</name><argument_list>(<argument><expr><name>curr</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <while>while <condition>(<expr><name>count</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>ListNode</name></type> <name>temp</name> <init>= <expr><name><name>head</name><operator>.</operator><name>next</name></name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name><name>head</name><operator>.</operator><name>next</name></name> <operator>=</operator> <name>curr</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>curr</name> <operator>=</operator> <name>head</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>head</name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>
            </block_content>}</block></while>
            <expr_stmt><expr><name>head</name> <operator>=</operator> <name>curr</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>head</name></expr>;</return><comment type="line">//we run out of nodes before we hit count == k, so we'll just directly return head in this case as well</comment>
    </block_content>}</block></function>

}</block></class>
</unit>
