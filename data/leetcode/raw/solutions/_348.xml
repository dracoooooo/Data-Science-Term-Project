<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\raw\solutions\_348.java"><package>package <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>solutions</name></name>;</package>

<class><specifier>public</specifier> class <name>_348</name> <block>{
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution1</name> <block>{
        <comment type="block" format="javadoc">/**
         * credit: https://discuss.leetcode.com/topic/44548/java-o-1-solution-easy-to-understand
         * &lt;p&gt;
         * Key: in order to win a TicTacToe, you must have the entire row or column, thus, we don't need
         * to keep track of the entire n^2 board. We only need to keep a count for each row and column.
         * If at any time, a row or column matches the size of the board, then that player has won.
         */</comment>
        <class><specifier>public</specifier> <specifier>static</specifier> class <name>TicTacToe</name> <block>{

            <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>diagonal</name></decl>;</decl_stmt>
            <comment type="block" format="javadoc">/**
             * This is diagonal: |X| | | | |X| | | | |X| So, its condition is always like this: if (row ==
             * col)
             */</comment>

            <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>antidiagonal</name></decl>;</decl_stmt>
            <comment type="block" format="javadoc">/**
             * This is antidiagonal: | | |X| | |X| | |X| | | So, its condition is always like this: if
             * (col == size - row - 1)
             */</comment>
            <decl_stmt><decl><type><specifier>private</specifier> <name><name>int</name><index>[]</index></name></type> <name>rows</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>private</specifier> <name><name>int</name><index>[]</index></name></type> <name>cols</name></decl>;</decl_stmt>

            <comment type="block" format="javadoc">/**
             * Initialize your data structure here.
             */</comment>
            <constructor><specifier>public</specifier> <name>TicTacToe</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <expr_stmt><expr><name>rows</name> <operator>=</operator> <operator>new</operator> <name><name>int</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>cols</name> <operator>=</operator> <operator>new</operator> <name><name>int</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>
            </block_content>}</block></constructor>

            <comment type="block" format="javadoc">/**
             * Player {player} makes a move at ({row}, {col}).
             *
             * @param row    The row of the board.
             * @param col    The column of the board.
             * @param player The player, can be either 1 or 2.
             * @return The current winning condition, can be either: 0: No one wins. 1: Player 1 wins. 2:
             * Player 2 wins.
             */</comment>
            <function><type><specifier>public</specifier> <name>int</name></type> <name>move</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>player</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>toAdd</name> <init>= <expr><ternary><condition><expr><name>player</name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><name><name>rows</name><index>[<expr><name>row</name></expr>]</index></name> <operator>+=</operator> <name>toAdd</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>cols</name><index>[<expr><name>col</name></expr>]</index></name> <operator>+=</operator> <name>toAdd</name></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><name><name>rows</name><operator>.</operator><name>length</name></name></expr></init></decl>;</decl_stmt>

                <if_stmt><if>if <condition>(<expr><name>row</name> <operator>==</operator> <name>col</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>diagonal</name> <operator>+=</operator> <name>toAdd</name></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><name>col</name> <operator>==</operator> <operator>(</operator><name>size</name> <operator>-</operator> <name>row</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>antidiagonal</name> <operator>+=</operator> <name>toAdd</name></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <if_stmt><if>if <condition>(<expr><call><name><name>Math</name><operator>.</operator><name>abs</name></name><argument_list>(<argument><expr><name><name>rows</name><index>[<expr><name>row</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>size</name>
                        <operator>||</operator> <call><name><name>Math</name><operator>.</operator><name>abs</name></name><argument_list>(<argument><expr><name><name>cols</name><index>[<expr><name>col</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>size</name>
                        <operator>||</operator> <call><name><name>Math</name><operator>.</operator><name>abs</name></name><argument_list>(<argument><expr><name>antidiagonal</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>size</name>
                        <operator>||</operator> <call><name><name>Math</name><operator>.</operator><name>abs</name></name><argument_list>(<argument><expr><name>diagonal</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>size</name></expr>)</condition> <block>{<block_content>
                    <return>return <expr><name>player</name></expr>;</return>
                </block_content>}</block></if></if_stmt>

                <return>return <expr><literal type="number">0</literal></expr>;</return>
            </block_content>}</block></function>
        }</block></class>
    }</block></class>
}</block></class>
</unit>
