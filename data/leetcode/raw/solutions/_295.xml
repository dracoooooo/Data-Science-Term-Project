<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\raw\solutions\_295.java"><package>package <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>solutions</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>PriorityQueue</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Queue</name></name>;</import>

<class><specifier>public</specifier> class <name>_295</name> <block>{
    <comment type="block" format="javadoc">/**
     * A few key points for both following solutions:
     * &lt;p&gt;
     * 1. always keep one queue one element more than the other if the number is odd, offer into that one
     * first, then poll from that queue and offer into the other queue, then check whether that queue is smaller
     * in size than the other, if so, poll one from the other queue and offer it into this queue
     * &lt;p&gt;
     * 2. only need to check whether this bigger queue size is greater than the other queue when returning.
     */</comment>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution1</name> <block>{
        <class><specifier>public</specifier> <specifier>static</specifier> class <name>MedianFinder</name> <block>{
            <decl_stmt><decl><type><specifier>private</specifier> <name><name>Queue</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>large</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>private</specifier> <name><name>Queue</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>small</name></decl>;</decl_stmt>

            <constructor><specifier>public</specifier> <name>MedianFinder</name><parameter_list>()</parameter_list> <block>{<block_content>
                <expr_stmt><expr><name>large</name> <operator>=</operator> <operator>new</operator> <call><name><name>PriorityQueue</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>small</name> <operator>=</operator> <operator>new</operator> <call><name><name>PriorityQueue</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>Collections</name><operator>.</operator><name>reverseOrder</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></constructor>

            <comment type="line">// Adds a number into the data structure.</comment>
            <function><type><specifier>public</specifier> <name>void</name></type> <name>addNum</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <expr_stmt><expr><call><name><name>large</name><operator>.</operator><name>offer</name></name><argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator> <name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>small</name><operator>.</operator><name>offer</name></name><argument_list>(<argument><expr><call><name><name>large</name><operator>.</operator><name>poll</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>large</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>small</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>large</name><operator>.</operator><name>offer</name></name><argument_list>(<argument><expr><call><name><name>small</name><operator>.</operator><name>poll</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></function>

            <comment type="line">// Returns the median of current data stream</comment>
            <function><type><specifier>public</specifier> <name>double</name></type> <name>findMedian</name><parameter_list>()</parameter_list> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>large</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <call><name><name>small</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <return>return <expr><call><name><name>large</name><operator>.</operator><name>peek</name></name><argument_list>()</argument_list></call></expr>;</return>
                </block_content>}</block></if></if_stmt>
                <return>return <expr><operator>(</operator><call><name><name>large</name><operator>.</operator><name>peek</name></name><argument_list>()</argument_list></call> <operator>+</operator> <call><name><name>small</name><operator>.</operator><name>peek</name></name><argument_list>()</argument_list></call><operator>)</operator> <operator>/</operator> <literal type="number">2.0</literal></expr>;</return>
            </block_content>}</block></function>
        }</block></class>
    }</block></class>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution2</name> <block>{
        <class><specifier>public</specifier> <specifier>static</specifier> class <name>MedianFinder</name> <block>{
            <comment type="block" format="javadoc">/**
             * credit: https://discuss.leetcode.com/topic/27521/short-simple-java-c-python-o-log-n-o-1
             * The idea is for sure to use two heaps, one is max heap, one is min heap, we always let the max heap be one element
             * bigger than min heap if the total number of elements is not even.
             * we could always get the median in O(1) time.
             * 1. use Long type to avoid overflow
             * 2. negate the numbers for small heap to save the effort for writing a reverse comparator, brilliant!
             */</comment>

            <decl_stmt><decl><type><specifier>private</specifier> <name><name>Queue</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>large</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>private</specifier> <name><name>Queue</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>small</name></decl>;</decl_stmt>

            <comment type="block" format="javadoc">/**
             * initialize your data structure here.
             */</comment>
            <constructor><specifier>public</specifier> <name>MedianFinder</name><parameter_list>()</parameter_list> <block>{<block_content>
                <expr_stmt><expr><name>large</name> <operator>=</operator> <operator>new</operator> <call><name><name>PriorityQueue</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>small</name> <operator>=</operator> <operator>new</operator> <call><name><name>PriorityQueue</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></constructor>

            <comment type="line">// Adds a number into the data structure.</comment>
            <function><type><specifier>public</specifier> <name>void</name></type> <name>addNum</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <expr_stmt><expr><call><name><name>large</name><operator>.</operator><name>offer</name></name><argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator> <name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>small</name><operator>.</operator><name>offer</name></name><argument_list>(<argument><expr><operator>-</operator><call><name><name>large</name><operator>.</operator><name>poll</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>large</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>small</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>large</name><operator>.</operator><name>offer</name></name><argument_list>(<argument><expr><operator>-</operator><call><name><name>small</name><operator>.</operator><name>poll</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></function>

            <comment type="line">// Returns the median of current data stream</comment>
            <function><type><specifier>public</specifier> <name>double</name></type> <name>findMedian</name><parameter_list>()</parameter_list> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>large</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <call><name><name>small</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <return>return <expr><call><name><name>large</name><operator>.</operator><name>peek</name></name><argument_list>()</argument_list></call></expr>;</return>
                </block_content>}</block></if></if_stmt>
                <return>return <expr><operator>(</operator><call><name><name>large</name><operator>.</operator><name>peek</name></name><argument_list>()</argument_list></call> <operator>-</operator> <call><name><name>small</name><operator>.</operator><name>peek</name></name><argument_list>()</argument_list></call><operator>)</operator> <operator>/</operator> <literal type="number">2.0</literal></expr>;</return>
            </block_content>}</block></function>

        }</block></class>
    }</block></class>
}</block></class></unit>
