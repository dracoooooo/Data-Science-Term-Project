<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\raw\solutions\_146.java"><package>package <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>solutions</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>LinkedHashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

<comment type="block" format="javadoc">/**
 * 146. LRU Cache
 *
 * Design and implement a data structure for Least Recently Used (LRU) cache. It should support the following operations: get and put.

 get(key) - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1.
 put(key, value) - Set or insert the value if the key is not already present.
 When the cache reached its capacity, it should invalidate the least recently used item before inserting a new item.

 Follow up:
 Could you do both operations in O(1) time complexity?

 Example:

 LRUCache cache = new LRUCache(2);//capacity

        cache.put(1, 1);
        cache.put(2, 2);
        cache.get(1);       // returns 1
        cache.put(3, 3);    // evicts key 2
        cache.get(2);       // returns -1 (not found)
        cache.put(4, 4);    // evicts key 1
        cache.get(1);       // returns -1 (not found)
        cache.get(3);       // returns 3
        cache.get(4);       // returns 4
        */</comment>

<class><specifier>public</specifier> class <name>_146</name> <block>{

    <class><specifier>public</specifier> class <name>Solution1</name> <block>{
        <class><specifier>public</specifier> class <name>LRUCache</name> <block>{
            <comment type="block" format="javadoc">/**
             * The shortest implementation is to use LinkedHashMap:
             * specify a size of the LinkedHashMap;
             * override the removeEldestEntry method when its size exceeds max size:
             * https://docs.oracle.com/javase/8/docs/api/java/util/LinkedHashMap.html#removeEldestEntry-java.util.Map.Entry-
             * in the constructor, set the last boolean variable to be true: it means the ordering mode,
             * if we set it to be true, it means in access order, false, means it's in insertion order:
             * https://docs.oracle.com/javase/8/docs/api/java/util/LinkedHashMap.html#LinkedHashMap-int-float-boolean-
             */</comment>

            <decl_stmt><decl><type><specifier>private</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>cache</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>int</name></type> <name>max</name></decl>;</decl_stmt>

            <constructor><specifier>public</specifier> <name>LRUCache</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>capacity</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <expr_stmt><expr><name>max</name> <operator>=</operator> <name>capacity</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>cache</name> <operator>=</operator> <operator>new</operator> <class><super><name><name>LinkedHashMap</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></super><argument_list>(<argument><expr><name>capacity</name></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list> <block>{
                    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>removeEldestEntry</name><parameter_list>(<parameter><decl><type><name><name>Map</name><operator>.</operator><name>Entry</name></name></type> <name>eldest</name></decl></parameter>)</parameter_list> <block>{<block_content>
                        <return>return <expr><call><name><name>cache</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <name>max</name></expr>;</return>
                    </block_content>}</block></function>
                }</block></class></expr>;</expr_stmt>
            </block_content>}</block></constructor>

            <function><type><specifier>public</specifier> <name>int</name></type> <name>get</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <return>return <expr><call><name><name>cache</name><operator>.</operator><name>getOrDefault</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></function>

            <function><type><specifier>public</specifier> <name>void</name></type> <name>put</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <expr_stmt><expr><call><name><name>cache</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></function>
        }</block></class>
    }</block></class>

    <class><specifier>public</specifier> class <name>Solution2</name> <block>{
        <class><specifier>public</specifier> class <name>LRUCache</name> <block>{
            <comment type="block" format="javadoc">/**
             * The more verbose solution is to write a doubly linked list plus a map.
             */</comment>
            <class><specifier>private</specifier> class <name>Node</name> <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>key</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>value</name></decl>;</decl_stmt>

                <decl_stmt><decl><type><name><name>LRUCache</name><operator>.</operator><name>Node</name></name></type> <name>prev</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name><name>LRUCache</name><operator>.</operator><name>Node</name></name></type> <name>next</name></decl>;</decl_stmt>

                <constructor><name>Node</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>key</name></name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>value</name></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
                </block_content>}</block></constructor>

                <constructor><name>Node</name><parameter_list>()</parameter_list> <block>{<block_content>
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>key</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>value</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                </block_content>}</block></constructor>
            }</block></class>

            <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>capacity</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>count</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>private</specifier> <name><name>LRUCache</name><operator>.</operator><name>Node</name></name></type> <name>head</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>private</specifier> <name><name>LRUCache</name><operator>.</operator><name>Node</name></name></type> <name>tail</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>private</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>, <argument><name><name>LRUCache</name><operator>.</operator><name>Node</name></name></argument>&gt;</argument_list></name></type> <name>map</name></decl>;</decl_stmt>
            <comment type="line">// ATTN: the value should be Node type! This is the whole point of having a class called Node!</comment>

            <constructor><specifier>public</specifier> <name>LRUCache</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>capacity</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <expr_stmt><expr><name><name>this</name><operator>.</operator><name>capacity</name></name> <operator>=</operator> <name>capacity</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>this</name><operator>.</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt><comment type="line">// we need a count to keep track of the number of elements in the cache so</comment>
                <comment type="line">// that we know when to evict the LRU one from the cache</comment>
                <expr_stmt><expr><name><name>this</name><operator>.</operator><name>map</name></name> <operator>=</operator> <operator>new</operator> <call><name>HashMap</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>head</name> <operator>=</operator> <operator>new</operator> <call><name><name>LRUCache</name><operator>.</operator><name>Node</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>tail</name> <operator>=</operator> <operator>new</operator> <call><name><name>LRUCache</name><operator>.</operator><name>Node</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>head</name><operator>.</operator><name>next</name></name> <operator>=</operator> <name>tail</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>tail</name><operator>.</operator><name>prev</name></name> <operator>=</operator> <name>head</name></expr>;</expr_stmt>
            </block_content>}</block></constructor>

            <function><type><specifier>public</specifier> <name>int</name></type> <name>get</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <decl_stmt><decl><type><name><name>LRUCache</name><operator>.</operator><name>Node</name></name></type> <name>node</name> <init>= <expr><call><name><name>map</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <comment type="line">// HashMap allows value to be null, this is superior than HashTable!</comment>
                <if_stmt><if>if <condition>(<expr><name>node</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
                </block_content>}</block></if> <else>else <block>{<block_content>

                    <comment type="block" format="javadoc">/**Do two operations: this makes the process more clear:
                     * remove the old node first, and then
                     * just add the node again.
                     * This will guarantee that this node will be at the latest position:
                     * the most recently used position.*/</comment>
                    <expr_stmt><expr><call><name>remove</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return>return <expr><name><name>node</name><operator>.</operator><name>value</name></name></expr>;</return>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></function>

            <function><type><specifier>public</specifier> <name>void</name></type> <name>put</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <decl_stmt><decl><type><name><name>LRUCache</name><operator>.</operator><name>Node</name></name></type> <name>node</name> <init>= <expr><call><name><name>map</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>node</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>node</name> <operator>=</operator> <operator>new</operator> <call><name><name>LRUCache</name><operator>.</operator><name>Node</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>

                    <if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;</operator> <name>capacity</name></expr>)</condition> <block>{<block_content>
                        <comment type="block" format="javadoc">/** ATTN: It's tail.prev, not tail, because tail is always an invalid node, it
                         doesn't contain anything, it's always the tail.prev that is the last node in the
                         cache*/</comment>
                        <decl_stmt><decl><type><name><name>LRUCache</name><operator>.</operator><name>Node</name></name></type> <name>toDelete</name> <init>= <expr><name><name>tail</name><operator>.</operator><name>prev</name></name></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name><name>toDelete</name><operator>.</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>remove</name><argument_list>(<argument><expr><name>toDelete</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>count</name><operator>--</operator></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><call><name>remove</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>node</name><operator>.</operator><name>value</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></function>

            <function><type><specifier>private</specifier> <name>void</name></type> <name>remove</name><parameter_list>(<parameter><decl><type><name><name>LRUCache</name><operator>.</operator><name>Node</name></name></type> <name>node</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <decl_stmt><decl><type><name><name>LRUCache</name><operator>.</operator><name>Node</name></name></type> <name>next</name> <init>= <expr><name><name>node</name><operator>.</operator><name>next</name></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name><name>LRUCache</name><operator>.</operator><name>Node</name></name></type> <name>prev</name> <init>= <expr><name><name>node</name><operator>.</operator><name>prev</name></name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name><name>prev</name><operator>.</operator><name>next</name></name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>next</name><operator>.</operator><name>prev</name></name> <operator>=</operator> <name>prev</name></expr>;</expr_stmt>
            </block_content>}</block></function>

            <function><type><specifier>private</specifier> <name>void</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name><name>LRUCache</name><operator>.</operator><name>Node</name></name></type> <name>node</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <comment type="line">// ATTN: we'll always add the node into the first position: head.next!!!!</comment>
                <decl_stmt><decl><type><name><name>LRUCache</name><operator>.</operator><name>Node</name></name></type> <name>next</name> <init>= <expr><name><name>head</name><operator>.</operator><name>next</name></name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name><name>head</name><operator>.</operator><name>next</name></name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>node</name><operator>.</operator><name>next</name></name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>node</name><operator>.</operator><name>prev</name></name> <operator>=</operator> <name>head</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>next</name><operator>.</operator><name>prev</name></name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>
            </block_content>}</block></function>
        }</block></class>
    }</block></class>
}</block></class></unit>
