<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\raw\solutions\_537.java"><package>package <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>solutions</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>stream</name><operator>.</operator><name>Stream</name></name>;</import>

<class><specifier>public</specifier> class <name>_537</name> <block>{

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution1</name> <block>{
        <function><type><specifier>public</specifier> <name>String</name></type> <name>complexNumberMultiply</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>part1And2</name> <init>= <expr><call><name><name>a</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">"\\+"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>part3And4</name> <init>= <expr><call><name><name>b</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">"\\+"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>product1</name> <init>= <expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><name><name>part1And2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><name><name>part3And4</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line">//this is real number multiplication</comment>
            <decl_stmt><decl><type><name>String</name></type> <name>product2</name> <init>= <expr><call><name>multiply</name><argument_list>(<argument><expr><name><name>part1And2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>part3And4</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>product3</name> <init>= <expr><call><name>multiply</name><argument_list>(<argument><expr><name><name>part3And4</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>part1And2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>product4</name> <init>= <expr><call><name>multiplyTwoIs</name><argument_list>(<argument><expr><name><name>part3And4</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>part1And2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>twoISum</name> <init>= <expr><call><name>sumTwoI</name><argument_list>(<argument><expr><name>product2</name></expr></argument>, <argument><expr><name>product3</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>numberValue</name> <init>= <expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>Integer</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>product1</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name><name>Integer</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>product4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><name>numberValue</name> <operator>+</operator> <literal type="string">"+"</literal> <operator>+</operator> <name>twoISum</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>String</name></type> <name>sumTwoI</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>product2</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>product3</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>number2</name> <init>= <expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><call><name><name>product2</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>product2</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>number3</name> <init>= <expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><call><name><name>product3</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>product3</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>number2</name> <operator>+</operator> <name>number3</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"i"</literal></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>String</name></type> <name>multiplyTwoIs</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>q</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>number1</name> <init>= <expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><call><name><name>p</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>p</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>number2</name> <init>= <expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><call><name><name>q</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>q</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>numberProduct</name> <init>= <expr><name>number1</name> <operator>*</operator> <name>number2</name></expr></init></decl>;</decl_stmt>
            <return>return <expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><operator>-</operator><name>numberProduct</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>String</name></type> <name>multiply</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>withI</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>numberPart</name> <init>= <expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><call><name><name>withI</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>withI</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>numberPart</name> <operator>*</operator> <call><name><name>Integer</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"i"</literal></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution2</name> <block>{
        <comment type="block" format="javadoc">/**
         * (a + bi) * (c + di) could become (ac - bd) + (ad + bc)*i
         * Thus, we have the following function
         */</comment>
        <function><type><specifier>public</specifier> <name>String</name></type> <name>complexNumberMultiply</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>coefficients1</name> <init>= <expr><call><name><name>Stream</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><call><name><name>a</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">"\\+|i"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>mapToInt</name><argument_list>(<argument><expr><name>Integer</name><operator>::</operator><name>parseInt</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toArray</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>coefficients2</name> <init>= <expr><call><name><name>Stream</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><call><name><name>b</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">"\\+|i"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>mapToInt</name><argument_list>(<argument><expr><name>Integer</name><operator>::</operator><name>parseInt</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toArray</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><operator>(</operator><name><name>coefficients1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>coefficients2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>coefficients1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>coefficients2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>+</operator> <literal type="string">"+"</literal>
                    <operator>+</operator> <operator>(</operator><name><name>coefficients1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>coefficients2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>coefficients1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>coefficients2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="string">"i"</literal><operator>)</operator></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

}</block></class>
</unit>
