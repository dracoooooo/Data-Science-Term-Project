<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\raw\solutions\_546.java"><package>package <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>solutions</name></name>;</package>

<class><specifier>public</specifier> class <name>_546</name> <block>{
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution1</name> <block>{
        <comment type="block" format="javadoc">/**
         * credit: https://leetcode.com/articles/remove-boxes/#approach-2-using-dp-with-memorizationaccepted
         * &lt;p&gt;
         * For an entry in dp[l][r][k], l represents the starting index of the subarray,
         * r represents the ending index of the subarray
         * and k represents the number of elements similar to the râth element
         * following it which can be combined to obtain the point information to be stored in dp[l][r][k].
         */</comment>
        <function><type><specifier>public</specifier> <name>int</name></type> <name>removeBoxes</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>boxes</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name><name>int</name><index>[]</index><index>[]</index><index>[]</index></name></type> <name>dp</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[<expr><literal type="number">100</literal></expr>]</index><index>[<expr><literal type="number">100</literal></expr>]</index><index>[<expr><literal type="number">100</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <return>return <expr><call><name>calculatePoints</name><argument_list>(<argument><expr><name>boxes</name></expr></argument>, <argument><expr><name>dp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>boxes</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>int</name></type> <name>calculatePoints</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>boxes</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index><index>[]</index><index>[]</index></name></type> <name>dp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>l</name> <operator>&gt;</operator> <name>r</name></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="number">0</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>dp</name><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>r</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><name><name>dp</name><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>r</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <while>while <condition>(<expr><name>r</name> <operator>&gt;</operator> <name>l</name> <operator>&amp;&amp;</operator> <name><name>boxes</name><index>[<expr><name>r</name></expr>]</index></name> <operator>==</operator> <name><name>boxes</name><index>[<expr><name>r</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>r</name><operator>--</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>k</name><operator>++</operator></expr>;</expr_stmt>
            </block_content>}</block></while>
            <expr_stmt><expr><name><name>dp</name><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>r</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <call><name>calculatePoints</name><argument_list>(<argument><expr><name>boxes</name></expr></argument>, <argument><expr><name>dp</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>r</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><name>k</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name>k</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>l</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>r</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>boxes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>boxes</name><index>[<expr><name>r</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name><name>dp</name><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>r</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name><name>dp</name><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>r</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name></expr></argument>,
                            <argument><expr><call><name>calculatePoints</name><argument_list>(<argument><expr><name>boxes</name></expr></argument>, <argument><expr><name>dp</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>k</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>calculatePoints</name><argument_list>(<argument><expr><name>boxes</name></expr></argument>, <argument><expr><name>dp</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>r</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
            <return>return <expr><name><name>dp</name><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>r</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name></expr>;</return>
        </block_content>}</block></function>
    }</block></class>
}</block></class>
</unit>
