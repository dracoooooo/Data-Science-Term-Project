<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\raw\solutions\_725.java"><package>package <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>solutions</name></name>;</package>

<import>import <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>common</name><operator>.</operator><name>classes</name><operator>.</operator><name>ListNode</name></name>;</import>

<class><specifier>public</specifier> class <name>_725</name> <block>{
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution1</name> <block>{
        <comment type="block" format="javadoc">/**
         * My very original solution, but verbose.
         */</comment>
        <function><type><specifier>public</specifier> <name><name>ListNode</name><index>[]</index></name></type> <name>splitListToParts</name><parameter_list>(<parameter><decl><type><name>ListNode</name></type> <name>root</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>getLength</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>aveSize</name> <init>= <expr><name>len</name> <operator>/</operator> <name>k</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>extra</name> <init>= <expr><name>len</name> <operator>%</operator> <name>k</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>ListNode</name><index>[]</index></name></type> <name>result</name> <init>= <expr><operator>new</operator> <name><name>ListNode</name><index>[<expr><name>k</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>k</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <expr_stmt><expr><name><name>result</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>root</name></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>aveSizeTmp</name> <init>= <expr><name>aveSize</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>aveSizeTmp</name> <operator>+=</operator> <ternary><condition><expr><name>extra</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>aveSizeTmp2</name> <init>= <expr><name>aveSizeTmp</name></expr></init></decl>;</decl_stmt>
                <while>while <condition>(<expr><name>aveSizeTmp</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>root</name> <operator>=</operator> <name><name>root</name><operator>.</operator><name>next</name></name></expr>;</expr_stmt>
                </block_content>}</block></while>
                <if_stmt><if>if <condition>(<expr><name><name>result</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <decl_stmt><decl><type><name>ListNode</name></type> <name>tmp</name> <init>= <expr><name><name>result</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                    <while>while <condition>(<expr><name><name>tmp</name><operator>.</operator><name>next</name></name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>aveSizeTmp2</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>tmp</name><operator>.</operator><name>next</name></name></expr>;</expr_stmt>
                    </block_content>}</block></while>
                    <expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>next</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
            <return>return <expr><name>result</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>int</name></type> <name>getLength</name><parameter_list>(<parameter><decl><type><name>ListNode</name></type> <name>root</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ListNode</name></type> <name>tmp</name> <init>= <expr><name>root</name></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><name>tmp</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>tmp</name><operator>.</operator><name>next</name></name></expr>;</expr_stmt>
            </block_content>}</block></while>
            <return>return <expr><name>len</name></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution2</name> <block>{
        <comment type="block" format="javadoc">/**
         * More concise version
         */</comment>
        <function><type><specifier>public</specifier> <name><name>ListNode</name><index>[]</index></name></type> <name>splitListToParts</name><parameter_list>(<parameter><decl><type><name>ListNode</name></type> <name>root</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>getLength</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>aveSize</name> <init>= <expr><name>len</name> <operator>/</operator> <name>k</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>extra</name> <init>= <expr><name>len</name> <operator>%</operator> <name>k</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>ListNode</name><index>[]</index></name></type> <name>result</name> <init>= <expr><operator>new</operator> <name><name>ListNode</name><index>[<expr><name>k</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ListNode</name></type> <name>prev</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>k</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>extra</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
                <expr_stmt><expr><name><name>result</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>root</name></expr>;</expr_stmt>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>aveSize</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>extra</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                    <expr_stmt><expr><name>prev</name> <operator>=</operator> <name>root</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>root</name> <operator>=</operator> <name><name>root</name><operator>.</operator><name>next</name></name></expr>;</expr_stmt>
                </block_content>}</block></for>
                <if_stmt><if>if <condition>(<expr><name>prev</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name><name>prev</name><operator>.</operator><name>next</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
            <return>return <expr><name>result</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>int</name></type> <name>getLength</name><parameter_list>(<parameter><decl><type><name>ListNode</name></type> <name>root</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ListNode</name></type> <name>tmp</name> <init>= <expr><name>root</name></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><name>tmp</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>tmp</name><operator>.</operator><name>next</name></name></expr>;</expr_stmt>
            </block_content>}</block></while>
            <return>return <expr><name>len</name></expr>;</return>
        </block_content>}</block></function>
    }</block></class>
}</block></class>
</unit>
