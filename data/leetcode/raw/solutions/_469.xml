<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\raw\solutions\_469.java"><package>package <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>solutions</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<class><specifier>public</specifier> class <name>_469</name> <block>{

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution1</name> <block>{
        <comment type="block" format="javadoc">/**
         * credit: https://discuss.leetcode.com/topic/70706/beyond-my-knowledge-java-solution-with-in-line-explanation
         */</comment>
        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isConvex</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>points</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <comment type="line">// For each set of three adjacent points A, B, C, find the cross product AB Â· BC. If the sign of</comment>
            <comment type="line">// all the cross products is the same, the angles are all positive or negative (depending on the</comment>
            <comment type="line">// order in which we visit them) so the polygon is convex.</comment>
            <decl_stmt><decl><type><name>boolean</name></type> <name>gotNegative</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>gotPositive</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>numPoints</name> <init>= <expr><call><name><name>points</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>B</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>C</name></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>A</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>A</name> <operator>&lt;</operator> <name>numPoints</name></expr>;</condition> <incr><expr><name>A</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <comment type="line">// Trick to calc the last 3 points: n - 1, 0 and 1.</comment>
                <expr_stmt><expr><name>B</name> <operator>=</operator> <operator>(</operator><name>A</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name>numPoints</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>C</name> <operator>=</operator> <operator>(</operator><name>B</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name>numPoints</name></expr>;</expr_stmt>

                <decl_stmt><decl><type><name>int</name></type> <name>crossProduct</name> <init>=
                        <expr><call><name>crossProductLength</name><argument_list>(
                                <argument><expr><call><name><name>points</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>points</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,
                                <argument><expr><call><name><name>points</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>points</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,
                                <argument><expr><call><name><name>points</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>points</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>crossProduct</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>gotNegative</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>crossProduct</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>gotPositive</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><name>gotNegative</name> <operator>&amp;&amp;</operator> <name>gotPositive</name></expr>)</condition> <block>{<block_content>
                    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>

            <comment type="line">// If we got this far, the polygon is convex.</comment>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block></function>

        <comment type="line">// Return the cross product AB x BC.</comment>
        <comment type="line">// The cross product is a vector perpendicular to AB and BC having length |AB| * |BC| * Sin(theta) and</comment>
        <comment type="line">// with direction given by the right-hand rule. For two vectors in the X-Y plane, the result is a</comment>
        <comment type="line">// vector with X and Y components 0 so the Z component gives the vector's length and direction.</comment>
        <function><type><specifier>private</specifier> <name>int</name></type> <name>crossProductLength</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>Ax</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>Ay</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>Bx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>By</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>Cx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>Cy</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <comment type="line">// Get the vectors' coordinates.</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>BAx</name> <init>= <expr><name>Ax</name> <operator>-</operator> <name>Bx</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>BAy</name> <init>= <expr><name>Ay</name> <operator>-</operator> <name>By</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>BCx</name> <init>= <expr><name>Cx</name> <operator>-</operator> <name>Bx</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>BCy</name> <init>= <expr><name>Cy</name> <operator>-</operator> <name>By</name></expr></init></decl>;</decl_stmt>

            <comment type="line">// Calculate the Z coordinate of the cross product.</comment>
            <return>return <expr><operator>(</operator><name>BAx</name> <operator>*</operator> <name>BCy</name> <operator>-</operator> <name>BAy</name> <operator>*</operator> <name>BCx</name><operator>)</operator></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

}</block></class>
</unit>
