<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\raw\solutions\_706.java"><package>package <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>solutions</name></name>;</package>

<class><specifier>public</specifier> class <name>_706</name> <block>{
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution1</name> <block>{
        <comment type="block" format="javadoc">/**
         * credit: https://leetcode.com/problems/design-hashmap/discuss/152746/Java-Solution
         */</comment>
        <class>class <name>MyHashMap</name> <block>{

            <decl_stmt><decl><type><specifier>final</specifier> <name><name>ListNode</name><index>[]</index></name></type> <name>nodes</name> <init>= <expr><operator>new</operator> <name><name>ListNode</name><index>[<expr><literal type="number">10000</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <function><type><specifier>public</specifier> <name>void</name></type> <name>put</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><call><name>idx</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>nodes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name><name>nodes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>new</operator> <call><name>ListNode</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <decl_stmt><decl><type><name>ListNode</name></type> <name>prev</name> <init>= <expr><call><name>find</name><argument_list>(<argument><expr><name><name>nodes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>prev</name><operator>.</operator><name>next</name></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name><name>prev</name><operator>.</operator><name>next</name></name> <operator>=</operator> <operator>new</operator> <call><name>ListNode</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><name><name>prev</name><operator>.</operator><name>next</name><operator>.</operator><name>val</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></function>

            <function><type><specifier>public</specifier> <name>int</name></type> <name>get</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><call><name>idx</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>nodes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
                </block_content>}</block></if></if_stmt>
                <decl_stmt><decl><type><name>ListNode</name></type> <name>node</name> <init>= <expr><call><name>find</name><argument_list>(<argument><expr><name><name>nodes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <return>return <expr><ternary><condition><expr><name><name>node</name><operator>.</operator><name>next</name></name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><name><name>node</name><operator>.</operator><name>next</name><operator>.</operator><name>val</name></name></expr></else></ternary></expr>;</return>
            </block_content>}</block></function>

            <function><type><specifier>public</specifier> <name>void</name></type> <name>remove</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><call><name>idx</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>nodes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <return>return;</return>
                </block_content>}</block></if></if_stmt>
                <decl_stmt><decl><type><name>ListNode</name></type> <name>prev</name> <init>= <expr><call><name>find</name><argument_list>(<argument><expr><name><name>nodes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>prev</name><operator>.</operator><name>next</name></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <return>return;</return>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name><name>prev</name><operator>.</operator><name>next</name></name> <operator>=</operator> <name><name>prev</name><operator>.</operator><name>next</name><operator>.</operator><name>next</name></name></expr>;</expr_stmt>
            </block_content>}</block></function>

            <function><type><name>int</name></type> <name>idx</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <return>return <expr><call><name><name>Integer</name><operator>.</operator><name>hashCode</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>%</operator> <name><name>nodes</name><operator>.</operator><name>length</name></name></expr>;</return>
            </block_content>}</block></function>

            <function><type><name>ListNode</name></type> <name>find</name><parameter_list>(<parameter><decl><type><name>ListNode</name></type> <name>bucket</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <decl_stmt><decl><type><name>ListNode</name></type> <name>node</name> <init>= <expr><name>bucket</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>ListNode</name></type> <name>prev</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
                <while>while <condition>(<expr><name>node</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name><name>node</name><operator>.</operator><name>key</name></name> <operator>!=</operator> <name>key</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>prev</name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>node</name> <operator>=</operator> <name><name>node</name><operator>.</operator><name>next</name></name></expr>;</expr_stmt>
                </block_content>}</block></while>
                <return>return <expr><name>prev</name></expr>;</return>
            </block_content>}</block></function>

            <class>class <name>ListNode</name> <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>key</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>val</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>ListNode</name></type> <name>next</name></decl>;</decl_stmt>

                <constructor><name>ListNode</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>key</name></name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>val</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
                </block_content>}</block></constructor>
            }</block></class>
        }</block></class>

<comment type="block" format="javadoc">/**
 * Your MyHashMap object will be instantiated and called as such:
 * MyHashMap obj = new MyHashMap();
 * obj.put(key,value);
 * int param_2 = obj.get(key);
 * obj.remove(key);
 */</comment>
    }</block></class>
}</block></class>
</unit>
