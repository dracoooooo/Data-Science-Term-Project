<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\raw\solutions\_23.java"><package>package <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>solutions</name></name>;</package>

<import>import <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>common</name><operator>.</operator><name>classes</name><operator>.</operator><name>ListNode</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Comparator</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>PriorityQueue</name></name>;</import>

<class><specifier>public</specifier> class <name>_23</name> <block>{
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution1</name> <block>{
        <function><type><specifier>public</specifier> <name>ListNode</name></type> <name>mergeKLists</name><parameter_list>(<parameter><decl><type><name><name>ListNode</name><index>[]</index></name></type> <name>lists</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name><name>PriorityQueue</name><argument_list type="generic">&lt;<argument><name>ListNode</name></argument>&gt;</argument_list></name></type> <name>heap</name> <init>= <expr><operator>new</operator> <call><name>PriorityQueue</name><argument_list>(<argument><expr><operator>(</operator><name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>ListNode</name></argument>&gt;</argument_list></name><operator>)</operator> <lambda><parameter_list>(<parameter><decl><name>o1</name></decl></parameter>, <parameter><decl><name>o2</name></decl></parameter>)</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>o1</name><operator>.</operator><name>val</name></name> <operator>-</operator> <name><name>o2</name><operator>.</operator><name>val</name></name></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <for>for <control>(<init><decl><type><name>ListNode</name></type> <name>node</name> <range>: <expr><name>lists</name></expr></range></decl></init>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>node</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>heap</name><operator>.</operator><name>offer</name></name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>

            <decl_stmt><decl><type><name>ListNode</name></type> <name>pre</name> <init>= <expr><operator>new</operator> <call><name>ListNode</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ListNode</name></type> <name>temp</name> <init>= <expr><name>pre</name></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><operator>!</operator><call><name><name>heap</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>ListNode</name></type> <name>curr</name> <init>= <expr><call><name><name>heap</name><operator>.</operator><name>poll</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name><name>temp</name><operator>.</operator><name>next</name></name> <operator>=</operator> <operator>new</operator> <call><name>ListNode</name><argument_list>(<argument><expr><name><name>curr</name><operator>.</operator><name>val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>curr</name><operator>.</operator><name>next</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>heap</name><operator>.</operator><name>offer</name></name><argument_list>(<argument><expr><name><name>curr</name><operator>.</operator><name>next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name>temp</name> <operator>=</operator> <name><name>temp</name><operator>.</operator><name>next</name></name></expr>;</expr_stmt>
            </block_content>}</block></while>
            <return>return <expr><name><name>pre</name><operator>.</operator><name>next</name></name></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

}</block></class>
</unit>
