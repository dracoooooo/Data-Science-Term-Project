<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\raw\solutions\_248.java"><package>package <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>solutions</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

<class><specifier>public</specifier> class <name>_248</name> <block>{

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution1</name> <block>{
        <comment type="block" format="javadoc">/**Credit: https://discuss.leetcode.com/topic/31386/concise-java-solution
         *
         Construct char arrays from low.length() to high.length()
         Add stro pairs from outside
         When left &gt; right, add eligible count
         */</comment>

        <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>char</name><index>[]</index><index>[]</index></name></type> <name>pairs</name> <init>= <expr><block>{<expr><block>{<expr><literal type="char">'0'</literal></expr>, <expr><literal type="char">'0'</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="char">'1'</literal></expr>, <expr><literal type="char">'1'</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="char">'6'</literal></expr>, <expr><literal type="char">'9'</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="char">'8'</literal></expr>, <expr><literal type="char">'8'</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="char">'9'</literal></expr>, <expr><literal type="char">'6'</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

        <function><type><specifier>public</specifier> <name>int</name></type> <name>strobogrammaticInRange</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>low</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>high</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>count</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name><name>low</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>len</name> <operator>&lt;=</operator> <call><name><name>high</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>len</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name><name>char</name><index>[]</index></name></type> <name>c</name> <init>= <expr><operator>new</operator> <name><name>char</name><index>[<expr><name>len</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>low</name></expr></argument>, <argument><expr><name>high</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <return>return <expr><name><name>count</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>low</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>high</name></decl></parameter> , <parameter><decl><type><name><name>char</name><index>[]</index></name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>left</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>right</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>count</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>left</name> <operator>&gt;</operator> <name>right</name></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>String</name></type> <name>s</name> <init>= <expr><operator>new</operator> <call><name>String</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name><name>s</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>low</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>s</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name>low</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator>
                        <operator>||</operator> <operator>(</operator><call><name><name>s</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>high</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>s</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name>high</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
                    <return>return;</return>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name><name>count</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
                <return>return;</return>
            </block_content>}</block></if></if_stmt>
            <for>for <control>(<init><decl><type><name><name>char</name><index>[]</index></name></type> <name>p</name> <range>: <expr><name>pairs</name></expr></range></decl></init>)</control> <block>{<block_content>
                <expr_stmt><expr><name><name>c</name><index>[<expr><name>left</name></expr>]</index></name> <operator>=</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>c</name><index>[<expr><name>right</name></expr>]</index></name> <operator>=</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>.</operator><name>length</name></name> <operator>!=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'0'</literal></expr>)</condition> <block>{<block_content>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><name>left</name> <operator>==</operator> <name>right</name> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>low</name></expr></argument>, <argument><expr><name>high</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>left</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>right</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></function>
    }</block></class>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution2</name> <block>{
        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>Character</name></argument>, <argument><name>Character</name></argument>&gt;</argument_list></name></type> <name>map</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <block>{<block_content>
            <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="char">'1'</literal></expr></argument>, <argument><expr><literal type="char">'1'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="char">'8'</literal></expr></argument>, <argument><expr><literal type="char">'8'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="char">'6'</literal></expr></argument>, <argument><expr><literal type="char">'9'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="char">'9'</literal></expr></argument>, <argument><expr><literal type="char">'6'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="char">'0'</literal></expr></argument>, <argument><expr><literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>

        <decl_stmt><decl><type><name>String</name></type> <name>low</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>high</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

        <function><type><specifier>public</specifier> <name>int</name></type> <name>strobogrammaticInRange</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>low</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>high</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>low</name></name> <operator>=</operator> <name>low</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>high</name></name> <operator>=</operator> <name>high</name></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name><name>low</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>n</name> <operator>&lt;=</operator> <call><name><name>high</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>count</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>strobogrammaticInRange</name><argument_list>(<argument><expr><operator>new</operator> <name><name>char</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>result</name> <operator>+=</operator> <name><name>count</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
            </block_content>}</block></for>
            <return>return <expr><name>result</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>void</name></type> <name>strobogrammaticInRange</name><parameter_list>(<parameter><decl><type><name><name>char</name><index>[]</index></name></type> <name>arr</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lo</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hi</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>lo</name> <operator>&gt;</operator> <name>hi</name></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>String</name></type> <name>s</name> <init>= <expr><operator>new</operator> <call><name>String</name><argument_list>(<argument><expr><name>arr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>arr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'0'</literal> <operator>||</operator> <name><name>arr</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>compare</name><argument_list>(<argument><expr><name>low</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>compare</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>high</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name><name>count</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <return>return;</return>
            </block_content>}</block></if></if_stmt>
            <for>for <control>(<init><decl><type><name>Character</name></type> <name>c</name> <range>: <expr><call><name><name>map</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                <expr_stmt><expr><name><name>arr</name><index>[<expr><name>lo</name></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>arr</name><index>[<expr><name>hi</name></expr>]</index></name> <operator>=</operator> <call><name><name>map</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><operator>(</operator><name>lo</name> <operator>==</operator> <name>hi</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>==</operator> <call><name><name>map</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <name>lo</name> <operator>&lt;</operator> <name>hi</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>strobogrammaticInRange</name><argument_list>(<argument><expr><name>arr</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>lo</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>hi</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>boolean</name></type> <name>compare</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>a</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <call><name><name>b</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><call><name><name>a</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>b</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <call><name><name>a</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>a</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name><name>b</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
            </block_content>}</block></while>
            <return>return <expr><ternary><condition><expr><name>i</name> <operator>==</operator> <call><name><name>a</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="boolean">true</literal></expr> </then><else>: <expr><call><name><name>a</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <call><name><name>b</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
        </block_content>}</block></function>
    }</block></class>
}</block></class>
</unit>
