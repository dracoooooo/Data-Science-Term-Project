<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\raw\solutions\_573.java"><package>package <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>solutions</name></name>;</package>

<class><specifier>public</specifier> class <name>_573</name> <block>{

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution1</name> <block>{

        <comment type="block" format="javadoc">/**
         * reference: https://leetcode.com/articles/squirrel-simulation
         * &lt;p&gt;
         * 1. The order in which to pick the nuts does not matter except the first one
         * because for all the other nuts, the squirrel needs to travel back and forth.
         * &lt;p&gt;
         * 2. For the first nut to be picked, there's some distance we might be able to save, what is this distance?
         * It is the difference between the squirrel's original starting point to the first nut and that the distance from this
         * first nut to the tree.
         * This is because, only for the first nut, the squirrel does NOT need to travel back and forth, it only needs to travel from
         * its starting position to the nut position and then return to the tree.
         * &lt;p&gt;
         * 3. For the rest of all other nuts, the squirrel always needs to go back and forth.
         * &lt;p&gt;
         * 4. So how can we find the first nut to go to so that we could have the maximum saved distance?
         * We iterate through all of the nuts and keep updating the savedDist as below:
         */</comment>
        <function><type><specifier>public</specifier> <name>int</name></type> <name>minDistance</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>tree</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>squirrel</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index><index>[]</index></name></type> <name>nuts</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>totalDist</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>savedDist</name> <init>= <expr><name><name>Integer</name><operator>.</operator><name>MIN_VALUE</name></name></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name><name>int</name><index>[]</index></name></type> <name>nut</name> <range>: <expr><name>nuts</name></expr></range></decl></init>)</control> <block>{<block_content>
                <expr_stmt><expr><name>totalDist</name> <operator>+=</operator> <operator>(</operator><call><name>getDist</name><argument_list>(<argument><expr><name>nut</name></expr></argument>, <argument><expr><name>tree</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt><comment type="line">//it needs to travel back and forth, so times two</comment>
                <expr_stmt><expr><name>savedDist</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name>savedDist</name></expr></argument>, <argument><expr><call><name>getDist</name><argument_list>(<argument><expr><name>nut</name></expr></argument>, <argument><expr><name>tree</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>getDist</name><argument_list>(<argument><expr><name>nut</name></expr></argument>, <argument><expr><name>squirrel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <return>return <expr><name>totalDist</name> <operator>-</operator> <name>savedDist</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>int</name></type> <name>getDist</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>pointA</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>pointB</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <return>return <expr><call><name><name>Math</name><operator>.</operator><name>abs</name></name><argument_list>(<argument><expr><name><name>pointA</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>pointB</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name><name>Math</name><operator>.</operator><name>abs</name></name><argument_list>(<argument><expr><name><name>pointA</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>pointB</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>
    }</block></class>
}</block></class>
</unit>
