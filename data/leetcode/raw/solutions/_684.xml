<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\raw\solutions\_684.java"><package>package <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>solutions</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>

<class><specifier>public</specifier> class <name>_684</name> <block>{

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution1</name> <block>{
        <comment type="block" format="javadoc">/**
         * This is my original solution. A little verbose.
         */</comment>
        <class>class <name>UnionFind</name> <block>{
            <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>ids</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>nodes</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>visitedNodes</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>redundantConn</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>m</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

            <constructor><specifier>public</specifier> <name>UnionFind</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index><index>[]</index></name></type> <name>edges</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <expr_stmt><expr><name>m</name> <operator>=</operator> <name><name>edges</name><operator>.</operator><name>length</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>edges</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>length</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>nodes</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>visitedNodes</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>redundantConn</name> <operator>=</operator> <operator>new</operator> <name><name>int</name><index>[]</index></name><block>{}</block></expr>;</expr_stmt>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>m</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                    <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>nodes</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>edges</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></for>
                </block_content>}</block></for>
                <expr_stmt><expr><name>ids</name> <operator>=</operator> <operator>new</operator> <name><name>int</name><index>[<expr><call><name><name>nodes</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ids</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                    <expr_stmt><expr><name><name>ids</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                </block_content>}</block></for>
            </block_content>}</block></constructor>

            <function><type><specifier>public</specifier> <name><name>int</name><index>[]</index></name></type> <name>union</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>edge</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><call><name>find</name><argument_list>(<argument><expr><name><name>edge</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><call><name>find</name><argument_list>(<argument><expr><name><name>edge</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if_stmt><if>if <condition>(<expr><name>x</name> <operator>==</operator> <name>y</name> <operator>&amp;&amp;</operator> <call><name><name>visitedNodes</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name><name>edge</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>visitedNodes</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name><name>edge</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>redundantConn</name> <operator>=</operator> <name>edge</name></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <if_stmt><if>if <condition>(<expr><name>x</name> <operator>!=</operator> <name>y</name></expr>)</condition> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>x</name> <operator>&lt;</operator> <name>y</name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name><name>ids</name><index>[<expr><name>y</name></expr>]</index></name> <operator>=</operator> <name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                    </block_content>}</block></if> <else>else <block>{<block_content>
                        <expr_stmt><expr><name><name>ids</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name>y</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></if></if_stmt>

                <expr_stmt><expr><call><name><name>visitedNodes</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>edge</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>visitedNodes</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>edge</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>redundantConn</name></expr>;</return>
            </block_content>}</block></function>

            <function><type><specifier>private</specifier> <name>int</name></type> <name>find</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name>isTree</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <return>return <expr><name><name>ids</name><index>[<expr><name>id</name></expr>]</index></name></expr>;</return>
                </block_content>}</block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><operator>(</operator><name>id</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>!=</operator> <name><name>ids</name><index>[<expr><name>id</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
                    <return>return <expr><call><name>find</name><argument_list>(<argument><expr><name><name>ids</name><index>[<expr><name>id</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
                </block_content>}</block></if></if_stmt>
                <return>return <expr><name>id</name></expr>;</return>
            </block_content>}</block></function>

            <function><type><specifier>private</specifier> <name>boolean</name></type> <name>isTree</name><parameter_list>()</parameter_list> <block>{<block_content>
                <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>set</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <range>: <expr><name>ids</name></expr></range></decl></init>)</control> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>set</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>
                <return>return <expr><call><name><name>set</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>;</return>
            </block_content>}</block></function>
        }</block></class>

        <function><type><specifier>public</specifier> <name><name>int</name><index>[]</index></name></type> <name>findRedundantConnection</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index><index>[]</index></name></type> <name>edges</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>UnionFind</name></type> <name>unionFind</name> <init>= <expr><operator>new</operator> <call><name>UnionFind</name><argument_list>(<argument><expr><name>edges</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>result</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[]</index></name><block>{}</block></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name><name>int</name><index>[]</index></name></type> <name>edge</name> <range>: <expr><name>edges</name></expr></range></decl></init>)</control> <block>{<block_content>
                <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>unionFind</name><operator>.</operator><name>union</name></name><argument_list>(<argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <return>return <expr><name>result</name></expr>;</return>
        </block_content>}</block></function>
    }</block></class>
}</block></class>
</unit>
