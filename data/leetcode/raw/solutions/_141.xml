<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\raw\solutions\_141.java"><package>package <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>solutions</name></name>;</package>

<import>import <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>common</name><operator>.</operator><name>classes</name><operator>.</operator><name>ListNode</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>

<comment type="block" format="javadoc">/**
 * 141. Linked List Cycle

 Given a linked list, determine if it has a cycle in it.
 To represent a cycle in the given linked list, we use an integer
 pos which represents the position (0-indexed) in the linked list where tail connects to.
 If pos is -1, then there is no cycle in the linked list.

 Example 1:
 Input: head = [3,2,0,-4], pos = 1
 Output: true
 Explanation: There is a cycle in the linked list, where tail connects to the second node.

 Example 2:
 Input: head = [1,2], pos = 0
 Output: true
 Explanation: There is a cycle in the linked list, where tail connects to the first node.

 Example 3:
 Input: head = [1], pos = -1
 Output: false
 Explanation: There is no cycle in the linked list.

 Follow up:
 Can you solve it using O(1) (i.e. constant) memory?
 */</comment>
<class><specifier>public</specifier> class <name>_141</name> <block>{

	<class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution1</name> <block>{
		<function><type><specifier>public</specifier> <name>boolean</name></type> <name>hasCycle</name><parameter_list>(<parameter><decl><type><name>ListNode</name></type> <name>head</name></decl></parameter>)</parameter_list> <block>{<block_content>
			<decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>ListNode</name></argument>&gt;</argument_list></name></type> <name>set</name> <init>= <expr><operator>new</operator> <call><name>HashSet</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<while>while <condition>(<expr><name>head</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>set</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>head</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
					<return>return <expr><literal type="boolean">true</literal></expr>;</return>
				</block_content>}</block></if></if_stmt>
				<expr_stmt><expr><name>head</name> <operator>=</operator> <name><name>head</name><operator>.</operator><name>next</name></name></expr>;</expr_stmt>
			</block_content>}</block></while>
			<return>return <expr><literal type="boolean">false</literal></expr>;</return>
		</block_content>}</block></function>
	}</block></class>

	<class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution2</name> <block>{
		<function><type><specifier>public</specifier> <name>boolean</name></type> <name>hasCycle</name><parameter_list>(<parameter><decl><type><name>ListNode</name></type> <name>head</name></decl></parameter>)</parameter_list> <block>{<block_content>
			<decl_stmt><decl><type><name>ListNode</name></type> <name>slow</name> <init>= <expr><name>head</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>ListNode</name></type> <name>fast</name> <init>= <expr><name>head</name></expr></init></decl>;</decl_stmt>
			<while>while <condition>(<expr><name>fast</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name><name>fast</name><operator>.</operator><name>next</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>fast</name> <operator>=</operator> <name><name>fast</name><operator>.</operator><name>next</name><operator>.</operator><name>next</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name>slow</name> <operator>=</operator> <name><name>slow</name><operator>.</operator><name>next</name></name></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>fast</name> <operator>==</operator> <name>slow</name></expr>)</condition> <block>{<block_content>
					<return>return <expr><literal type="boolean">true</literal></expr>;</return>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></while>
			<return>return <expr><literal type="boolean">false</literal></expr>;</return>
		</block_content>}</block></function>
	}</block></class>
}</block></class>
</unit>
