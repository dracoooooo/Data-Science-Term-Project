<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\raw\solutions\_1352.java"><package>package <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>solutions</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<class><specifier>public</specifier> class <name>_1352</name> <block>{
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution1</name> <block>{
        <comment type="block" format="javadoc">/**
         * credit: https://leetcode.com/problems/product-of-the-last-k-numbers/discuss/510260/JavaC%2B%2BPython-Prefix-Product
         */</comment>
        <class><specifier>public</specifier> <specifier>static</specifier> class <name>ProductOfNumbers</name> <block>{

            <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>list</name></decl>;</decl_stmt>

            <constructor><specifier>public</specifier> <name>ProductOfNumbers</name><parameter_list>()</parameter_list> <block>{<block_content>
                <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></constructor>

            <function><type><specifier>public</specifier> <name>void</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>num</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>list</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>list</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><name>list</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></function>

            <function><type><specifier>public</specifier> <name>int</name></type> <name>getProduct</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name><name>list</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <return>return <expr><ternary><condition><expr><name>k</name> <operator>&gt;=</operator> <name>size</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>(</operator><call><name><name>list</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>size</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>/</operator> <call><name><name>list</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>size</name> <operator>-</operator> <name>k</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></else></ternary></expr>;</return>
            </block_content>}</block></function>
        }</block></class>
    }</block></class>
}</block></class>
</unit>
