<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\raw\solutions\_420.java"><package>package <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>solutions</name></name>;</package>

<class><specifier>public</specifier> class <name>_420</name> <block>{
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution1</name> <block>{
        <comment type="block" format="javadoc">/**
         * credit: https://discuss.leetcode.com/topic/63854/o-n-java-solution-by-analyzing-changes-allowed-to-fix-each-condition
         */</comment>
        <function><type><specifier>public</specifier> <name>int</name></type> <name>strongPasswordChecker</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>a</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>A</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>char</name><index>[]</index></name></type> <name>carr</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>toCharArray</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>arr</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[<expr><name><name>carr</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>arr</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr/>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>Character</name><operator>.</operator><name>isLowerCase</name></name><argument_list>(<argument><expr><name><name>carr</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>a</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>Character</name><operator>.</operator><name>isUpperCase</name></name><argument_list>(<argument><expr><name><name>carr</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>A</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>Character</name><operator>.</operator><name>isDigit</name></name><argument_list>(<argument><expr><name><name>carr</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>d</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>i</name></expr></init></decl>;</decl_stmt>
                <while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>carr</name><operator>.</operator><name>length</name></name> <operator>&amp;&amp;</operator> <name><name>carr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>carr</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
                </block_content>}</block></while>
                <expr_stmt><expr><name><name>arr</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>i</name> <operator>-</operator> <name>j</name></expr>;</expr_stmt>
            </block_content>}</block></for>

            <decl_stmt><decl><type><name>int</name></type> <name>totalMissing</name> <init>= <expr><operator>(</operator><name>a</name> <operator>+</operator> <name>A</name> <operator>+</operator> <name>d</name><operator>)</operator></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>arr</name><operator>.</operator><name>length</name></name> <operator>&lt;</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>res</name> <operator>+=</operator> <name>totalMissing</name> <operator>+</operator> <call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">6</literal> <operator>-</operator> <operator>(</operator><name><name>arr</name><operator>.</operator><name>length</name></name> <operator>+</operator> <name>totalMissing</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>overLen</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name><name>arr</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>leftOver</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>res</name> <operator>+=</operator> <name>overLen</name></expr>;</expr_stmt>

                <for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>i</name> <argument_list type="generic">&lt; <argument><name><name>arr</name><operator>.</operator><name>length</name></name> <operator>&amp;&amp;</operator> <name>overLen</name></argument> &gt;</argument_list></name> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">3</literal> <operator>||</operator> <name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>%</operator> <literal type="number">3</literal> <operator>!=</operator> <operator>(</operator><name>k</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
                            <continue>continue;</continue>
                        </block_content>}</block></if></if_stmt>
                        <expr_stmt><expr><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-=</operator> <call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><name>overLen</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>overLen</name> <operator>-=</operator> <name>k</name></expr>;</expr_stmt>
                    </block_content>}</block></for>
                </block_content>}</block></for>

                <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>arr</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name>overLen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                        <decl_stmt><decl><type><name>int</name></type> <name>need</name> <init>= <expr><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-=</operator> <name>overLen</name></expr>;</expr_stmt>
                        <expr_stmt><expr><name>overLen</name> <operator>-=</operator> <name>need</name></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>

                    <if_stmt><if>if <condition>(<expr><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>leftOver</name> <operator>+=</operator> <name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>/</operator> <literal type="number">3</literal></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></for>

                <expr_stmt><expr><name>res</name> <operator>+=</operator> <call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name>totalMissing</name></expr></argument>, <argument><expr><name>leftOver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>

            <return>return <expr><name>res</name></expr>;</return>
        </block_content>}</block></function>
    }</block></class>
}</block></class>
</unit>
