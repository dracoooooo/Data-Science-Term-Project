<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\raw\solutions\_353.java"><package>package <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>solutions</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Deque</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>LinkedList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>

<class><specifier>public</specifier> class <name>_353</name> <block>{
    <class><specifier>public</specifier> class <name>SnakeGame</name> <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>set</name></decl>;</decl_stmt><comment type="line">//Use a set to hold all occupied points for the snake body, this is for easy access for the case of eating its own body</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <name><name>Deque</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>body</name></decl>;</decl_stmt><comment type="line">//use a queue to hold all occupied points for the snake body as well, this is for easy access to update the tail</comment>
        <decl_stmt><decl><type><name><name>int</name><index>[]</index><index>[]</index></name></type> <name>food</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>score</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>foodIndex</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>height</name></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * Initialize your data structure here.
         *
         * @param width  - screen width
         * @param height - screen height
         * @param food   - A list of food positions
         *               E.g food = [[1,1], [1,0]] means the first food is positioned at [1,1], the second is at [1,0].
         */</comment>
        <constructor><specifier>public</specifier> <name>SnakeGame</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index><index>[]</index></name></type> <name>food</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>set</name></name> <operator>=</operator> <operator>new</operator> <call><name>HashSet</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>set</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line">//initially at [0][0]</comment>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>body</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>body</name><operator>.</operator><name>offerLast</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>food</name></name> <operator>=</operator> <name>food</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>

        <comment type="block" format="javadoc">/**
         * Moves the snake.
         *
         * @param direction - 'U' = Up, 'L' = Left, 'R' = Right, 'D' = Down
         * @return The game's score after the move. Return -1 if game over.
         * Game over when snake crosses the screen boundary or bites its body.
         */</comment>
        <function><type><specifier>public</specifier> <name>int</name></type> <name>move</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>direction</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>score</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <comment type="line">//compute head</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>rowHead</name> <init>= <expr><call><name><name>body</name><operator>.</operator><name>peekFirst</name></name><argument_list>()</argument_list></call> <operator>/</operator> <name>width</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>colHead</name> <init>= <expr><call><name><name>body</name><operator>.</operator><name>peekFirst</name></name><argument_list>()</argument_list></call> <operator>%</operator> <name>width</name></expr></init></decl>;</decl_stmt>
            <switch>switch <condition>(<expr><name>direction</name></expr>)</condition> <block>{<block_content>
                <case>case <expr><literal type="string">"U"</literal></expr>:</case>
                    <expr_stmt><expr><name>rowHead</name><operator>--</operator></expr>;</expr_stmt>
                    <break>break;</break>
                <case>case <expr><literal type="string">"D"</literal></expr>:</case>
                    <expr_stmt><expr><name>rowHead</name><operator>++</operator></expr>;</expr_stmt>
                    <break>break;</break>
                <case>case <expr><literal type="string">"L"</literal></expr>:</case>
                    <expr_stmt><expr><name>colHead</name><operator>--</operator></expr>;</expr_stmt>
                    <break>break;</break>
                <default>default:</default>
                    <expr_stmt><expr><name>colHead</name><operator>++</operator></expr>;</expr_stmt>
            </block_content>}</block></switch>
            <decl_stmt><decl><type><name>int</name></type> <name>newHead</name> <init>= <expr><name>rowHead</name> <operator>*</operator> <name>width</name> <operator>+</operator> <name>colHead</name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name>set</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><call><name><name>body</name><operator>.</operator><name>peekLast</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line">//we'll remove the tail from set for now to see if it hits its tail</comment>
            <comment type="line">//if it hits the boundary</comment>
            <if_stmt><if>if <condition>(<expr><call><name><name>set</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>newHead</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>rowHead</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>colHead</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>rowHead</name> <operator>&gt;=</operator> <name>height</name> <operator>||</operator> <name>colHead</name> <operator>&gt;=</operator> <name>width</name></expr>)</condition> <block>{<block_content>
                <return>return <expr><name>score</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <comment type="line">//add head for the following two normal cases:</comment>
            <expr_stmt><expr><call><name><name>set</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>newHead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>body</name><operator>.</operator><name>offerFirst</name></name><argument_list>(<argument><expr><name>newHead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">//normal eat case: keep tail, add head</comment>
            <if_stmt><if>if <condition>(<expr><name>foodIndex</name> <operator>&lt;</operator> <name><name>food</name><operator>.</operator><name>length</name></name> <operator>&amp;&amp;</operator> <name>rowHead</name> <operator>==</operator> <name><name>food</name><index>[<expr><name>foodIndex</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name>colHead</name> <operator>==</operator> <name><name>food</name><index>[<expr><name>foodIndex</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>set</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>body</name><operator>.</operator><name>peekLast</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line">//old tail does not change, so add it back to set since we removed it earlier</comment>
                <expr_stmt><expr><name>foodIndex</name><operator>++</operator></expr>;</expr_stmt>
                <return>return <expr><operator>++</operator><name>score</name></expr>;</return>
            </block_content>}</block></if></if_stmt>


            <comment type="line">//normal move case without eating: move head and remove tail</comment>
            <expr_stmt><expr><call><name><name>body</name><operator>.</operator><name>pollLast</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>score</name></expr>;</return>

        </block_content>}</block></function>
    }</block></class>

<comment type="block" format="javadoc">/**
 * Your SnakeGame object will be instantiated and called as such:
 * SnakeGame obj = new SnakeGame(width, height, food);
 * int param_1 = obj.move(direction);
 */</comment>
}</block></class>
</unit>
