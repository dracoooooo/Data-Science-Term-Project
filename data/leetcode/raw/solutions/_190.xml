<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\raw\solutions\_190.java"><package>package <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>solutions</name></name>;</package>

<class><specifier>public</specifier> class <name>_190</name> <block>{
    <comment type="block" format="javadoc">/**delimiting the binary string into 4 bits array will make it easier to see/visualize:
     * original binary format:
     * 0000,0010,1001,0100,0001,1110,1001,1100,
     * after reversing, becomes:
     * 0011,1001,0111,1000,0010,1001,0100,0000
     * The most right side digit shifted to the most left side, the 2nd right side digit shifted to the 2nd left side, so forth..*/</comment>

    <comment type="block" format="javadoc">/**
     * This post: http://stackoverflow.com/questions/2811319/difference-between-and
     * gives a good explanation between logical right shift: "&gt;&gt;&gt;" and arithmetic right shift: "&gt;&gt;".
     * Basically, "&gt;&gt;" preserves the most left bit and treats it as the sign for this number,
     * e.g. -2 represented in 8 bits is 11111110, thus -2 &gt;&gt; 1 will become 11111111, i.e. -1
     * notice its sign bit (the most left one bit) is preserved
     * However, logical right shift "&gt;&gt;&gt;" doesn't care about the first bit on the most left,
     * it simply shifts every bit to the right.
     * e.g. -2 &gt;&gt;&gt; 1 would become 1111111111111111111111111111111, i.e. 2147483647
     */</comment>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution1</name> <block>{
        <comment type="line">// you need treat n as an unsigned value</comment>
        <function><type><specifier>public</specifier> <name>int</name></type> <name>reverseBits</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <expr_stmt><expr><name>res</name> <operator>+=</operator> <name>n</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt><comment type="line">//get the most right bit each time</comment>
                <expr_stmt><expr><name>n</name> <operator>&gt;&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt><comment type="line">//do UN-signed right shift by 1 each time</comment>
                <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">31</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>res</name> <operator>&lt;&lt;=</operator>
                            <literal type="number">1</literal></expr>;</expr_stmt><comment type="line">//shift this number to the left by 1 each time, so that eventually, this number is reversed</comment>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
            <return>return <expr><name>res</name></expr>;</return>
        </block_content>}</block></function>
    }</block></class>
}</block></class>
</unit>
