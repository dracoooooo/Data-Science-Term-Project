<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\raw\solutions\_464.java"><package>package <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>solutions</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

<class><specifier>public</specifier> class <name>_464</name> <block>{
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution1</name> <block>{
        <comment type="block" format="javadoc">/**
         * Credit: https://discuss.leetcode.com/topic/68896/java-solution-using-hashmap-with-detailed-explanation
         */</comment>

        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>, <argument><name>Boolean</name></argument>&gt;</argument_list></name></type> <name>map</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>boolean</name><index>[]</index></name></type> <name>used</name></decl>;</decl_stmt>

        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>canIWin</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>maxChoosableInteger</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>desiredTotal</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>sum</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>+</operator> <name>maxChoosableInteger</name><operator>)</operator> <operator>*</operator> <name>maxChoosableInteger</name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>sum</name> <operator>&lt;</operator> <name>desiredTotal</name></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>desiredTotal</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><name>map</name> <operator>=</operator> <operator>new</operator> <call><name>HashMap</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>used</name> <operator>=</operator> <operator>new</operator> <name><name>boolean</name><index>[<expr><name>maxChoosableInteger</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
            <return>return <expr><call><name>helper</name><argument_list>(<argument><expr><name>desiredTotal</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>helper</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>desiredTotal</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>desiredTotal</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>key</name> <init>= <expr><call><name>format</name><argument_list>(<argument><expr><name>used</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>map</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <comment type="line">// try every unchosen number as next step</comment>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>used</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>used</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name><name>used</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                        <comment type="line">// check whether this lead to a win (i.e. the other player lose)</comment>
                        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>helper</name><argument_list>(<argument><expr><name>desiredTotal</name> <operator>-</operator> <name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                            <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><name><name>used</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
                            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
                        </block_content>}</block></if></if_stmt>
                        <expr_stmt><expr><name><name>used</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></for>
                <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><call><name><name>map</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <comment type="line">// transfer boolean[] to an Integer</comment>
        <function><type><specifier>public</specifier> <name>int</name></type> <name>format</name><parameter_list>(<parameter><decl><type><name><name>boolean</name><index>[]</index></name></type> <name>used</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>num</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>boolean</name></type> <name>b</name> <range>: <expr><name>used</name></expr></range></decl></init>)</control> <block>{<block_content>
                <expr_stmt><expr><name>num</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>b</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>num</name> <operator>|=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
            <return>return <expr><name>num</name></expr>;</return>
        </block_content>}</block></function>
    }</block></class>
}</block></class>
</unit>
