<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\raw\solutions\_99.java"><package>package <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>solutions</name></name>;</package>

<import>import <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>common</name><operator>.</operator><name>classes</name><operator>.</operator><name>TreeNode</name></name>;</import>

<class><specifier>public</specifier> class <name>_99</name> <block>{
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution1</name> <block>{
        <decl_stmt><decl><type><name>TreeNode</name></type> <name>firstElement</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>TreeNode</name></type> <name>secondElement</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>TreeNode</name></type> <name>prevElement</name> <init>= <expr><operator>new</operator> <call><name>TreeNode</name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>MIN_VALUE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>recoverTree</name><parameter_list>(<parameter><decl><type><name>TreeNode</name></type> <name>root</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><call><name>traverseTree</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">//swap the two elements</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>temp</name> <init>= <expr><name><name>firstElement</name><operator>.</operator><name>val</name></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>firstElement</name><operator>.</operator><name>val</name></name> <operator>=</operator> <name><name>secondElement</name><operator>.</operator><name>val</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>secondElement</name><operator>.</operator><name>val</name></name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>void</name></type> <name>traverseTree</name><parameter_list>(<parameter><decl><type><name>TreeNode</name></type> <name>root</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>root</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <return>return;</return>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><call><name>traverseTree</name><argument_list>(<argument><expr><name><name>root</name><operator>.</operator><name>left</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">//prevElement means the one previous to the current root, refer to in-order traversal, previous element must be smaller than the current root</comment>
            <comment type="line">//if it's bigger, then we find the first element, thus we store it in the variable called firstElement</comment>
            <if_stmt><if>if <condition>(<expr><name>firstElement</name> <operator>==</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name><name>prevElement</name><operator>.</operator><name>val</name></name> <operator>&gt;=</operator> <name><name>root</name><operator>.</operator><name>val</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>firstElement</name> <operator>=</operator> <name>prevElement</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name>firstElement</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name><name>prevElement</name><operator>.</operator><name>val</name></name> <operator>&gt;=</operator> <name><name>root</name><operator>.</operator><name>val</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>secondElement</name> <operator>=</operator> <name>root</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <comment type="line">//this is the last step in the "do some business logic", so we'll always to have update the previous node to be the current root before it traverses the right subtree</comment>
            <comment type="line">//since the current root will be the new previous node for the right subtree.</comment>
            <expr_stmt><expr><name>prevElement</name> <operator>=</operator> <name>root</name></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>traverseTree</name><argument_list>(<argument><expr><name><name>root</name><operator>.</operator><name>right</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></function>

    }</block></class>
}</block></class>
</unit>
