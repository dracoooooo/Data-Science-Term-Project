<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\raw\solutions\_106.java"><package>package <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>solutions</name></name>;</package>

<import>import <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>common</name><operator>.</operator><name>classes</name><operator>.</operator><name>TreeNode</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

<class><specifier>public</specifier> class <name>_106</name> <block>{
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution1</name> <block>{

        <comment type="block" format="javadoc">/**
         * https://discuss.leetcode.com/topic/3296/my-recursive-java-code-with-o-n-time-and-o-n-space
         * Note: the last element of postorder array is the root!
         * The idea is to take the last element in postorder as the root; find the position of the root
         * in the inorder array; then locate the range for left sub-tree and right sub-tree and do
         * recursion, use a hashmap to record the index of root in the inorder array.
         */</comment>
        <function><type><specifier>public</specifier> <name>TreeNode</name></type> <name>buildTree</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>inorder</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>postorder</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>inorder</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name>postorder</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name><name>inorder</name><operator>.</operator><name>length</name></name> <operator>!=</operator> <name><name>postorder</name><operator>.</operator><name>length</name></name></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="null">null</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>inorderMap</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>inorder</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <expr_stmt><expr><call><name><name>inorderMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>inorder</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <comment type="block" format="javadoc">/**At the beginning, both start from 0 to nums.length-1*/</comment>
            <return>return <expr><call><name>buildTreeRecursively</name><argument_list>(<argument><expr><name>inorderMap</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>inorder</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>postorder</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
                    <argument><expr><name><name>postorder</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>TreeNode</name></type> <name>buildTreeRecursively</name><parameter_list>(<parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>inorderMap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>inorderStart</name></decl></parameter>,
                                              <parameter><decl><type><name>int</name></type> <name>inorderEnd</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>postorder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>postorderStart</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>postorderEnd</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>postorderStart</name> <operator>&gt;</operator> <name>postorderEnd</name> <operator>||</operator> <name>inorderStart</name> <operator>&gt;</operator> <name>inorderEnd</name></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="null">null</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>TreeNode</name></type> <name>root</name> <init>= <expr><operator>new</operator> <call><name>TreeNode</name><argument_list>(<argument><expr><name><name>postorder</name><index>[<expr><name>postorderEnd</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>inRoot</name> <init>= <expr><call><name><name>inorderMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>postorder</name><index>[<expr><name>postorderEnd</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>numsLeft</name> <init>= <expr><name>inRoot</name> <operator>-</operator> <name>inorderStart</name></expr></init></decl>;</decl_stmt>

            <comment type="block" format="javadoc">/**It's easy to understand and remember:
             * for the indices of inorder array:
             * inStart and inRoot-1 as new start and end indices
             * inRoot+1 and inEnd as new start and end indices
             *
             * this is easy to understand and remember: since inRoot is already been used in this recursion call, so we're going to use inRoot-1 and inRoot+1 for next recursion call
             *
             * for the indices of postorder array:
             * postorderStart and postorderStart+numsLeft-1 should be the new start and end indices
             * postorderStart+numsLeft and postorderEnd-1 should be the new start and end indices
             *
             * this is also easy to understand and remember:
             * since the last one in postorder is the root and we have used it in this recursion call already, so the end is definitely postorderEnd-1;
             * then the postorderEnd for root.left is contiguous to the postorderStart of root.right, :)*/</comment>
            <expr_stmt><expr><name><name>root</name><operator>.</operator><name>left</name></name> <operator>=</operator> <call><name>buildTreeRecursively</name><argument_list>(<argument><expr><name>inorderMap</name></expr></argument>, <argument><expr><name>inorderStart</name></expr></argument>, <argument><expr><name>inRoot</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>postorder</name></expr></argument>, <argument><expr><name>postorderStart</name></expr></argument>, <argument><expr><name>postorderStart</name> <operator>+</operator> <name>numsLeft</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>root</name><operator>.</operator><name>right</name></name> <operator>=</operator> <call><name>buildTreeRecursively</name><argument_list>(<argument><expr><name>inorderMap</name></expr></argument>, <argument><expr><name>inRoot</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>inorderEnd</name></expr></argument>, <argument><expr><name>postorder</name></expr></argument>, <argument><expr><name>postorderStart</name> <operator>+</operator> <name>numsLeft</name></expr></argument>, <argument><expr><name>postorderEnd</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>root</name></expr>;</return>
        </block_content>}</block></function>
    }</block></class>
}</block></class>
</unit>
