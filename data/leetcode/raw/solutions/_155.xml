<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\raw\solutions\_155.java"><package>package <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>solutions</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Stack</name></name>;</import>

<comment type="block" format="javadoc">/**
 * 155. Min Stack
 * Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.

 * push(x) -- Push element x onto stack.
 * pop() -- Removes the element on top of the stack.
 * top() -- Get the top element.
 * getMin() -- Retrieve the minimum element in the stack.

 * Example:
 * MinStack minStack = new MinStack();
 * minStack.push(-2);
 * minStack.push(0);
 * minStack.push(-3);
 * minStack.getMin();   --&gt; Returns -3.
 * minStack.pop();
 * minStack.top();      --&gt; Returns 0.
 * minStack.getMin();   --&gt; Returns -2.
 */</comment>

<class><specifier>public</specifier> class <name>_155</name> <block>{

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution1</name> <block>{
        <class>class <name>MinStack</name> <block>{
            <decl_stmt><decl><type><specifier>private</specifier> <name><name>Stack</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>stack</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>min</name></decl>;</decl_stmt>

            <comment type="block" format="javadoc">/**
             * initialize your data structure here.
             */</comment>
            <constructor><specifier>public</specifier> <name>MinStack</name><parameter_list>()</parameter_list> <block>{<block_content>
                <expr_stmt><expr><name>stack</name> <operator>=</operator> <operator>new</operator> <call><name>Stack</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>min</name> <operator>=</operator> <name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr>;</expr_stmt>
            </block_content>}</block></constructor>

            <function><type><specifier>public</specifier> <name>void</name></type> <name>push</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <comment type="block" format="javadoc">/**All the trick happens here, we push the second minimum number onto the stack before we push the newer one,
                 * this way, when popping, we could always get the next minimum one in constant time.*/</comment>
                <if_stmt><if>if <condition>(<expr><name>x</name> <operator>&lt;=</operator> <name>min</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>stack</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><name>min</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>min</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name><name>stack</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></function>

            <function><type><specifier>public</specifier> <name>void</name></type> <name>pop</name><parameter_list>()</parameter_list> <block>{<block_content>
                <comment type="block" format="javadoc">/**if the value on the top of the stack happens to be the current minimum, we'll pop twice and change
                 * the current min value to be the last min value */</comment>
                <if_stmt><if>if <condition>(<expr><name>min</name> <operator>==</operator> <call><name><name>stack</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>min</name> <operator>=</operator> <call><name><name>stack</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></function>

            <function><type><specifier>public</specifier> <name>int</name></type> <name>top</name><parameter_list>()</parameter_list> <block>{<block_content>
                <return>return <expr><call><name><name>stack</name><operator>.</operator><name>peek</name></name><argument_list>()</argument_list></call></expr>;</return>
            </block_content>}</block></function>

            <function><type><specifier>public</specifier> <name>int</name></type> <name>getMin</name><parameter_list>()</parameter_list> <block>{<block_content>
                <return>return <expr><name>min</name></expr>;</return>
            </block_content>}</block></function>
        }</block></class>
    }</block></class>
}</block></class>
</unit>
