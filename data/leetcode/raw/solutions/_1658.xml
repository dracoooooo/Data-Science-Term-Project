<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\raw\solutions\_1658.java"><package>package <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>solutions</name></name>;</package>

<class><specifier>public</specifier> class <name>_1658</name> <block>{
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution1</name> <block>{
        <comment type="block" format="javadoc">/**
         * credit: https://leetcode.com/problems/minimum-operations-to-reduce-x-to-zero/discuss/936074/JavaPython-3-Sliding-window%3A-Longest-subarray-sum-to-the-target-sum(nums)-x.
         */</comment>
        <function><type><specifier>public</specifier> <name>int</name></type> <name>minOperations</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>nums</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>n</name> <range>: <expr><name>nums</name></expr></range></decl></init>)</control> <block>{<block_content>
                <expr_stmt><expr><name>sum</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
            </block_content>}</block></for>
            <decl_stmt><decl><type><name>int</name></type> <name>target</name> <init>= <expr><name>sum</name> <operator>-</operator> <name>x</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><name><name>nums</name><operator>.</operator><name>length</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><name><name>Integer</name><operator>.</operator><name>MIN_VALUE</name></name></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>left</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>right</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>windowSum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>right</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>right</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <expr_stmt><expr><name>windowSum</name> <operator>+=</operator> <name><name>nums</name><index>[<expr><name>right</name></expr>]</index></name></expr>;</expr_stmt>
                <while>while <condition>(<expr><name>left</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>len</name> <operator>&amp;&amp;</operator> <name>windowSum</name> <operator>&gt;</operator> <name>target</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>left</name><operator>++</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><name>windowSum</name> <operator>-=</operator> <name><name>nums</name><index>[<expr><name>left</name></expr>]</index></name></expr>;</expr_stmt>
                </block_content>}</block></while>
                <if_stmt><if>if <condition>(<expr><name>windowSum</name> <operator>==</operator> <name>target</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>size</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><name>right</name> <operator>-</operator> <name>left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
            <return>return <expr><ternary><condition><expr><name>size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><name>len</name> <operator>-</operator> <name>size</name></expr></else></ternary></expr>;</return>
        </block_content>}</block></function>

    }</block></class>
}</block></class>
</unit>
