<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\raw\solutions\_535.java"><package>package <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>solutions</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Random</name></name>;</import>

<class><specifier>public</specifier> class <name>_535</name> <block>{

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution1</name> <block>{
        <comment type="block" format="javadoc">/**
         * Simple counter approach
         * Analysis:
         * The range of URLs that can be decoded is limited by the range of Integer.
         * If excessively large number of URLs have to be encoded, after the range of Integer is exceeded,
         * integer overflow could lead to overwriting previous URL's encodings.
         * The length of the URL isn't necessary shorter than incoming URL.
         * One potential security issue with this problem is that it's very easy to predict the next code generated,
         * since this pattern is very easy to be detected.
         */</comment>
        <class><specifier>public</specifier> class <name>Codec</name> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>map</name> <init>= <expr><operator>new</operator> <call><name>HashMap</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>PREFIX</name> <init>= <expr><literal type="string">"http://tinyurl/"</literal></expr></init></decl>;</decl_stmt>

            <function><type><specifier>public</specifier> <name>String</name></type> <name>encode</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>longUrl</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>longUrl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>PREFIX</name> <operator>+</operator> <name>i</name><operator>++</operator></expr>;</return>
            </block_content>}</block></function>

            <function><type><specifier>public</specifier> <name>String</name></type> <name>decode</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>shortUrl</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <return>return <expr><call><name><name>map</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><call><name><name>shortUrl</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><call><name><name>PREFIX</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></function>
        }</block></class>
    }</block></class>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution2</name> <block>{
        <comment type="block" format="javadoc">/**
         * Use Java built-in HashCode
         * Analysis:
         * hashCode() does NOT generate unique codes for different strings, collision might happen.
         * As the number of URLs increase, the probability of getting collision increases which leads to failure.
         */</comment>
        <class><specifier>public</specifier> class <name>Codec</name> <block>{
            <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>map</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>PREFIX</name> <init>= <expr><literal type="string">"http://tinyurl/"</literal></expr></init></decl>;</decl_stmt>

            <comment type="line">// Encodes a URL to a shortened URL.</comment>
            <function><type><specifier>public</specifier> <name>String</name></type> <name>encode</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>longUrl</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <comment type="block" format="javadoc">/**I don't need to create a local variable to cache longUrl.hashCode()
                 * since Java's String cache it already. :) Look at its source code.*/</comment>
                <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>longUrl</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>longUrl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>PREFIX</name> <operator>+</operator> <call><name><name>longUrl</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr>;</return>
            </block_content>}</block></function>

            <comment type="line">// Decodes a shortened URL to its original URL.</comment>
            <function><type><specifier>public</specifier> <name>String</name></type> <name>decode</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>shortUrl</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <return>return <expr><call><name><name>map</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><call><name><name>shortUrl</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><call><name><name>PREFIX</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></function>
        }</block></class>
    }</block></class>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution3</name> <block>{
        <comment type="block" format="javadoc">/**
         * Use a random number
         */</comment>
        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>map</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Random</name></type> <name>random</name> <init>= <expr><operator>new</operator> <call><name>Random</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>PREFIX</name> <init>= <expr><literal type="string">"http://tinyurl/"</literal></expr></init></decl>;</decl_stmt>

        <comment type="line">// Encodes a URL to a shortened URL.</comment>
        <function><type><specifier>public</specifier> <name>String</name></type> <name>encode</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>longUrl</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>num</name> <init>= <expr><call><name><name>random</name><operator>.</operator><name>nextInt</name></name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><call><name><name>map</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>num</name> <operator>=</operator> <call><name><name>random</name><operator>.</operator><name>nextInt</name></name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></while>
            <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>longUrl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>PREFIX</name> <operator>+</operator> <name>num</name></expr>;</return>
        </block_content>}</block></function>

        <comment type="line">// Decodes a shortened URL to its original URL.</comment>
        <function><type><specifier>public</specifier> <name>String</name></type> <name>decode</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>shortUrl</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <return>return <expr><call><name><name>map</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><call><name><name>shortUrl</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><call><name><name>PREFIX</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution4</name> <block>{
        <comment type="block" format="javadoc">/**
         * Use a random but fixed length encoding
         * Analysis:
         * 1. This is the most optimal solution so far.
         * 2. The number of URLs that can be encoded can be as big as Math.pow((10 + 26*2), FIXED_LENGTH)
         * 3. The length of the shortened URL is fixed at a certain length, which could be a significant reduce for large URLs
         * 4. The performance of this scheme is pretty good, due to much smaller probability of encountering collision
         * 5. Predicting pattern/encoding isn't possible in this case since random numbers are used.
         */</comment>
        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>map</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>PREFIX</name> <init>= <expr><literal type="string">"http://tinyurl/"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>FIXED_LENGTH</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Random</name></type> <name>random</name> <init>= <expr><operator>new</operator> <call><name>Random</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>alphabet</name> <init>= <expr><literal type="string">"0123456789abcdefghijklmnopgrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"</literal></expr></init></decl>;</decl_stmt>

        <comment type="line">// Encodes a URL to a shortened URL.</comment>
        <function><type><specifier>public</specifier> <name>String</name></type> <name>encode</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>longUrl</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>shortKey</name> <init>= <expr><call><name>getRandomFixedLengthKey</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><call><name><name>map</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>shortKey</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>shortKey</name> <operator>=</operator> <call><name>getRandomFixedLengthKey</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></while>
            <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>shortKey</name></expr></argument>, <argument><expr><name>longUrl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>PREFIX</name> <operator>+</operator> <name>shortKey</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>String</name></type> <name>getRandomFixedLengthKey</name><parameter_list>()</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>StringBuilder</name></type> <name>stringBuilder</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>FIXED_LENGTH</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <expr_stmt><expr><call><name><name>stringBuilder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>alphabet</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><call><name><name>random</name><operator>.</operator><name>nextInt</name></name><argument_list>(<argument><expr><call><name><name>alphabet</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <return>return <expr><call><name><name>stringBuilder</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <comment type="line">// Decodes a shortened URL to its original URL.</comment>
        <function><type><specifier>public</specifier> <name>String</name></type> <name>decode</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>shortUrl</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <return>return <expr><call><name><name>map</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>shortUrl</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><call><name><name>PREFIX</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>
    }</block></class>
}</block></class>
</unit>
