<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\raw\solutions\_318.java"><package>package <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>solutions</name></name>;</package>

<class><specifier>public</specifier> class <name>_318</name> <block>{
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution1</name> <block>{
        <comment type="line">//Inspired by this awesome post: https://discuss.leetcode.com/topic/35539/java-easy-version-to-understand</comment>
        <comment type="line">//Idea: this question states that all words consisted of lower case (total only 26 unique chars),</comment>
        <comment type="line">//this is a big hint that we could use integer (total 32 bits) to represent each char</comment>
        <comment type="line">//values[i] means how many unique characters this string words[i] has</comment>
        <function><type><specifier>public</specifier> <name>int</name></type> <name>maxProduct</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>words</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>words</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name><name>words</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="number">0</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><name><name>words</name><operator>.</operator><name>length</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>values</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[<expr><name>len</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>words</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>String</name></type> <name>word</name> <init>= <expr><name><name>words</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>words</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                    <expr_stmt><expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><call><name><name>word</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call>
                            <operator>-</operator> <literal type="char">'a'</literal><operator>)</operator></expr>;</expr_stmt><comment type="line">//the reason for left shift by this number "word.charAt(j) -'a'" is for 'a', otherwise 'a' - 'a' will be zero and 'a' will be missed out.</comment>
                </block_content>}</block></for>
            </block_content>}</block></for>
            <decl_stmt><decl><type><name>int</name></type> <name>maxProduct</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>words</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>words</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                    <comment type="line">//check if values[i] AND values[j] equals to zero, this means they share NO common chars</comment>
                    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <name><name>values</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal>
                            <operator>&amp;&amp;</operator> <name><name>words</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call> <operator>*</operator> <name><name>words</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <name>maxProduct</name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>maxProduct</name> <operator>=</operator> <name><name>words</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call> <operator>*</operator> <name><name>words</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></for>
            </block_content>}</block></for>
            <return>return <expr><name>maxProduct</name></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>String</name><modifier>...</modifier></type> <name>strings</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>_318</name></type> <name>test</name> <init>= <expr><operator>new</operator> <call><name>_318</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>words</name> <init>= <expr><operator>new</operator> <name><name>String</name><index>[]</index></name><block>{<expr><literal type="string">"abcw"</literal></expr>, <expr><literal type="string">"baz"</literal></expr>, <expr><literal type="string">"foo"</literal></expr>, <expr><literal type="string">"bar"</literal></expr>, <expr><literal type="string">"xtfn"</literal></expr>, <expr><literal type="string">"abcdef"</literal></expr>}</block></expr></init></decl>;</decl_stmt>

        <comment type="line">//The following is to understand what does left shift by 1 mean:</comment>
        <comment type="line">//the tricky part is to understand how it's written for me:</comment>
        <comment type="line">// "x &lt;&lt; y" means left shift x by y bits</comment>
        <comment type="line">//left shift is equivalent to multiplication of powers of 2, so "4 &lt;&lt; 1" equals to " 4 * 2^1"</comment>
        <comment type="line">//similarly, "4 &lt;&lt; 3" equals to "4 * 2^3" which equals "4 * 8"</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>sample</name> <init>= <expr><literal type="string">"f"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>bits</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>shiftLeftByHowMany</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>shiftLeftResult</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <call><name><name>sample</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><name>shiftLeftByHowMany</name> <operator>=</operator> <call><name><name>sample</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="char">'a'</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>shiftLeftResult</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>shiftLeftByHowMany</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>bits</name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><call><name><name>sample</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="char">'a'</literal><operator>)</operator></expr>;</expr_stmt>
            <comment type="line">//this means shift left 1 by "sample.charAt(j) -'a'" bits</comment>
            <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"nonShiftLeft = "</literal> <operator>+</operator> <name>shiftLeftByHowMany</name> <operator>+</operator> <literal type="string">"\tnonShiftLeft binary form is: "</literal> <operator>+</operator> <call><name><name>Integer</name><operator>.</operator><name>toBinaryString</name></name><argument_list>(<argument><expr><name>shiftLeftByHowMany</name></expr></argument>)</argument_list></call>
                    <operator>+</operator> <literal type="string">"\nshiftLeft = "</literal> <operator>+</operator> <name>shiftLeftResult</name> <operator>+</operator> <literal type="string">"\tshiftLeft binary form is: "</literal> <operator>+</operator> <call><name><name>Integer</name><operator>.</operator><name>toBinaryString</name></name><argument_list>(<argument><expr><name>shiftLeftResult</name></expr></argument>)</argument_list></call>
                    <operator>+</operator> <literal type="string">"\nbits = "</literal> <operator>+</operator> <name>bits</name> <operator>+</operator> <literal type="string">"\tbits binary form is: "</literal> <operator>+</operator> <call><name><name>Integer</name><operator>.</operator><name>toBinaryString</name></name><argument_list>(<argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>shiftLeftResult</name> <operator>==</operator> <operator>(</operator><literal type="number">1</literal> <operator>*</operator> <call><name><name>Math</name><operator>.</operator><name>pow</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>shiftLeftByHowMany</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <comment type="line">//similarly, right shift is written like this: "x &gt;&gt; y", means shift x by y bits</comment>
        <comment type="line">//4 &gt;&gt; 3 equals 4 * 2^3, see below:</comment>
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="number">4</literal> <operator>*</operator> <literal type="number">8</literal> <operator>==</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <call><name><name>Math</name><operator>.</operator><name>pow</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>
}</block></class>
</unit>
