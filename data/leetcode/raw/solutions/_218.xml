<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\raw\solutions\_218.java"><package>package <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>solutions</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>TreeMap</name></name>;</import>

<class><specifier>public</specifier> class <name>_218</name> <block>{

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution1</name> <block>{

        <class>class <name>BuildingPoint</name> <super_list><implements>implements <super><name><name>Comparable</name><argument_list type="generic">&lt;<argument><name>BuildingPoint</name></argument>&gt;</argument_list></name></super></implements></super_list> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>isStart</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>h</name></decl>;</decl_stmt>

            <constructor><specifier>public</specifier> <name>BuildingPoint</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isStart</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <expr_stmt><expr><name><name>this</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>this</name><operator>.</operator><name>h</name></name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>this</name><operator>.</operator><name>isStart</name></name> <operator>=</operator> <name>isStart</name></expr>;</expr_stmt>
            </block_content>}</block></constructor>

            <function><annotation>@<name>Override</name></annotation>
            <type><specifier>public</specifier> <name>int</name></type> <name>compareTo</name><parameter_list>(<parameter><decl><type><name>BuildingPoint</name></type> <name>o</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>x</name></name> <operator>!=</operator> <name><name>o</name><operator>.</operator><name>x</name></name></expr>)</condition> <block>{<block_content>
                    <return>return <expr><name><name>this</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>o</name><operator>.</operator><name>x</name></name></expr>;</return>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>isStart</name></name> <operator>&amp;&amp;</operator> <name><name>o</name><operator>.</operator><name>isStart</name></name></expr>)</condition> <block>{<block_content>
                        <return>return <expr><name><name>o</name><operator>.</operator><name>h</name></name> <operator>-</operator> <name><name>this</name><operator>.</operator><name>h</name></name></expr>;</return>
                    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>this</name><operator>.</operator><name>isStart</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>o</name><operator>.</operator><name>isStart</name></name></expr>)</condition> <block>{<block_content>
                        <return>return <expr><operator>-</operator><name><name>this</name><operator>.</operator><name>h</name></name> <operator>-</operator> <name><name>o</name><operator>.</operator><name>h</name></name></expr>;</return>
                    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>this</name><operator>.</operator><name>isStart</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>o</name><operator>.</operator><name>isStart</name></name></expr>)</condition> <block>{<block_content>
                        <return>return <expr><name><name>this</name><operator>.</operator><name>h</name></name> <operator>-</operator> <name><name>o</name><operator>.</operator><name>h</name></name></expr>;</return>
                    </block_content>}</block></if> <else>else <block>{<block_content>
                        <return>return <expr><name><name>this</name><operator>.</operator><name>h</name></name> <operator>+</operator> <name><name>o</name><operator>.</operator><name>h</name></name></expr>;</return>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></function>
        }</block></class>

        <function><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>getSkyline</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index><index>[]</index></name></type> <name>buildings</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name><name>BuildingPoint</name><index>[]</index></name></type> <name>bps</name> <init>= <expr><operator>new</operator> <name><name>BuildingPoint</name><index>[<expr><name><name>buildings</name><operator>.</operator><name>length</name></name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name><name>int</name><index>[]</index></name></type> <name>building</name> <range>: <expr><name>buildings</name></expr></range></decl></init>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>BuildingPoint</name></type> <name>bp1</name> <init>= <expr><operator>new</operator> <call><name>BuildingPoint</name><argument_list>(<argument><expr><name><name>building</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name><name>building</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>BuildingPoint</name></type> <name>bp2</name> <init>= <expr><operator>new</operator> <call><name>BuildingPoint</name><argument_list>(<argument><expr><name><name>building</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name><name>building</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name><name>bps</name><index>[<expr><name>index</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>bp1</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>bps</name><index>[<expr><name>index</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>bp2</name></expr>;</expr_stmt>
            </block_content>}</block></for>

            <comment type="line">//this is one key step:</comment>
            <expr_stmt><expr><call><name><name>Arrays</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><name>bps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name>ArrayList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>TreeMap</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>treeMap</name> <init>= <expr><operator>new</operator> <call><name>TreeMap</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>treeMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>prevMaxH</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>BuildingPoint</name></type> <name>bp</name> <range>: <expr><name>bps</name></expr></range></decl></init>)</control> <block>{<block_content>
                <comment type="line">//if it's a starting point, we'll add it into the final result</comment>
                <if_stmt><if>if <condition>(<expr><name><name>bp</name><operator>.</operator><name>isStart</name></name></expr>)</condition> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><call><name><name>treeMap</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name><name>bp</name><operator>.</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>treeMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>bp</name><operator>.</operator><name>h</name></name></expr></argument>, <argument><expr><call><name><name>treeMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>bp</name><operator>.</operator><name>h</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if> <else>else <block>{<block_content>
                        <expr_stmt><expr><call><name><name>treeMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>bp</name><operator>.</operator><name>h</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>bp</name><operator>.</operator><name>isStart</name></name></expr>)</condition> <block>{<block_content>
                    <comment type="line">//if it's an ending point, we'll decrement/remove this entry</comment>
                    <if_stmt><if>if <condition>(<expr><call><name><name>treeMap</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name><name>bp</name><operator>.</operator><name>h</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>treeMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>bp</name><operator>.</operator><name>h</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>treeMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>bp</name><operator>.</operator><name>h</name></name></expr></argument>, <argument><expr><call><name><name>treeMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>bp</name><operator>.</operator><name>h</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if> <else>else <block>{<block_content>
                        <expr_stmt><expr><call><name><name>treeMap</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name><name>bp</name><operator>.</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></if></if_stmt>

                <decl_stmt><decl><type><name>int</name></type> <name>currMaxH</name> <init>= <expr><call><name><name>treeMap</name><operator>.</operator><name>lastKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>currMaxH</name> <operator>!=</operator> <name>prevMaxH</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><name><name>bp</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name>currMaxH</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>prevMaxH</name> <operator>=</operator> <name>currMaxH</name></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

            </block_content>}</block></for>

            <return>return <expr><name>result</name></expr>;</return>
        </block_content>}</block></function>
    }</block></class>
}</block></class>
</unit>
