<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\raw\solutions\_241.java"><package>package <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>solutions</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>LinkedList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<class><specifier>public</specifier> class <name>_241</name> <block>{
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution1</name> <block>{
        <comment type="block" format="javadoc">/**Time:  O(n * 4^n / n^(3/2)) ~= n * Catalan numbers = n * (C(2n, n) - C(2n, n - 1)),
         due to the size of the results is Catalan numbers,
         and every way of evaluation is the length of the string,
         so the time complexity is at most n * Catalan numbers.
         Space: O(n * 4^n / n^(3/2)), the cache size of lookup is at most n * Catalan numbers.*/</comment>

        <comment type="block" format="javadoc">/**
         * Credit: https://discuss.leetcode.com/topic/19901/a-recursive-java-solution-284-ms
         */</comment>
        <function><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>diffWaysToCompute</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>input</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>answer</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name><name>input</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>input</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'+'</literal>
                        <operator>||</operator> <call><name><name>input</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'-'</literal>
                        <operator>||</operator> <call><name><name>input</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition> <block>{<block_content>
                    <decl_stmt><decl><type><name>String</name></type> <name>part1</name> <init>= <expr><call><name><name>input</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>String</name></type> <name>part2</name> <init>= <expr><call><name><name>input</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>answer1</name> <init>= <expr><call><name>diffWaysToCompute</name><argument_list>(<argument><expr><name>part1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>answer2</name> <init>= <expr><call><name>diffWaysToCompute</name><argument_list>(<argument><expr><name>part2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <for>for <control>(<init><decl><type><name>int</name></type> <name>a1</name> <range>: <expr><name>answer1</name></expr></range></decl></init>)</control> <block>{<block_content>
                        <for>for <control>(<init><decl><type><name>int</name></type> <name>a2</name> <range>: <expr><name>answer2</name></expr></range></decl></init>)</control> <block>{<block_content>
                            <decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                            <switch>switch <condition>(<expr><call><name><name>input</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                                <case>case <expr><literal type="char">'+'</literal></expr>:</case>
                                    <expr_stmt><expr><name>result</name> <operator>=</operator> <name>a1</name> <operator>+</operator> <name>a2</name></expr>;</expr_stmt>
                                    <break>break;</break>
                                <case>case <expr><literal type="char">'-'</literal></expr>:</case>
                                    <expr_stmt><expr><name>result</name> <operator>=</operator> <name>a1</name> <operator>-</operator> <name>a2</name></expr>;</expr_stmt>
                                    <break>break;</break>
                                <case>case <expr><literal type="char">'*'</literal></expr>:</case>
                                    <expr_stmt><expr><name>result</name> <operator>=</operator> <name>a1</name> <operator>*</operator> <name>a2</name></expr>;</expr_stmt>
                                    <break>break;</break>
                                <default>default:</default>
                                    <break>break;</break>
                            </block_content>}</block></switch>
                            <expr_stmt><expr><call><name><name>answer</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></for>
                    </block_content>}</block></for>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
            <if_stmt><if>if <condition>(<expr><call><name><name>answer</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>answer</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>Integer</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><name>answer</name></expr>;</return>
        </block_content>}</block></function>
    }</block></class>
}</block></class>
</unit>
