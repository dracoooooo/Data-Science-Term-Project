<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\raw\solutions\_6.java"><package>package <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>solutions</name></name>;</package>

<class><specifier>public</specifier> class <name>_6</name> <block>{
	<class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution1</name> <block>{
		<function><type><specifier>public</specifier> <name>String</name></type> <name>convert</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>numRows</name></decl></parameter>)</parameter_list> <block>{<block_content>
			<decl_stmt><decl><type><name><name>StringBuilder</name><index>[]</index></name></type> <name>sb</name> <init>= <expr><operator>new</operator> <name><name>StringBuilder</name><index>[<expr><name>numRows</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name><name>char</name><index>[]</index></name></type> <name>c</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>toCharArray</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numRows</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
				<expr_stmt><expr><name><name>sb</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr>;</expr_stmt><comment type="line">//this is an important step to initialize it</comment>
			</block_content>}</block></for>
			<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
			<while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
				<for>for <control>(<init><decl><type><name>int</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>index</name> <operator>&lt;</operator> <name>numRows</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>index</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
					<expr_stmt><expr><name><name>sb</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name><name>c</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line">// vertically down</comment>
				</block_content>}</block></for>

				<for>for <control>(<init><decl><type><name>int</name></type> <name>index</name> <init>= <expr><name>numRows</name> <operator>-</operator> <literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>index</name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>index</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
					<comment type="block" format="javadoc">/**Why it should start from numRows - 2? Think of the example when numRows = 3
					 the starting point of obliquely going up is 1, which is numRows-2.*/</comment>
					<expr_stmt><expr><name><name>sb</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name><name>c</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line">// obliquely up</comment>
				</block_content>}</block></for>
			</block_content>}</block></while>

			<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numRows</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
				<expr_stmt><expr><name><name>sb</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name><name>sb</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></for>
			<return>return <expr><name><name>sb</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr>;</return>
		</block_content>}</block></function>
	}</block></class>

}</block></class>
</unit>
