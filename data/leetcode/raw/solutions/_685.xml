<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\raw\solutions\_685.java"><package>package <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>solutions</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>

<class><specifier>public</specifier> class <name>_685</name> <block>{
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution1</name> <block>{
        <comment type="block" format="javadoc">/**
         * My original solution, failed by _685Test.test3
         */</comment>
        <class>class <name>UnionFind</name> <block>{
            <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>ids</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>nodes</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>int</name><index>[]</index><index>[]</index></name></type> <name>edges</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>LinkedNode</name></argument>&gt;</argument_list></name></type> <name>visitedLinkedNodes</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>visitedValues</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>redundantConn</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>m</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

            <class>class <name>LinkedNode</name> <block>{
                <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>LinkedNode</name></argument>&gt;</argument_list></name></type> <name>parents</name></decl>;</decl_stmt><comment type="line">//at most, there's one node that has two parents</comment>
                <decl_stmt><decl><type><name>int</name></type> <name>val</name></decl>;</decl_stmt>

                <constructor><specifier>public</specifier> <name>LinkedNode</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>val</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
                </block_content>}</block></constructor>

                <constructor><specifier>public</specifier> <name>LinkedNode</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>LinkedNode</name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>parents</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>parents</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>parents</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>val</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
                </block_content>}</block></constructor>

                <function><type><specifier>public</specifier> <name>void</name></type> <name>addParent</name><parameter_list>(<parameter><decl><type><name>LinkedNode</name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>parents</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>parents</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>parents</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></function>
            }</block></class>

            <constructor><specifier>public</specifier> <name>UnionFind</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index><index>[]</index></name></type> <name>edges</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <expr_stmt><expr><name><name>this</name><operator>.</operator><name>edges</name></name> <operator>=</operator> <name>edges</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>m</name> <operator>=</operator> <name><name>edges</name><operator>.</operator><name>length</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>edges</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>length</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>nodes</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>visitedLinkedNodes</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>visitedValues</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>redundantConn</name> <operator>=</operator> <operator>new</operator> <name><name>int</name><index>[]</index></name><block>{}</block></expr>;</expr_stmt>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>m</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                    <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>nodes</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>edges</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></for>
                </block_content>}</block></for>
                <expr_stmt><expr><name>ids</name> <operator>=</operator> <operator>new</operator> <name><name>int</name><index>[<expr><call><name><name>nodes</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ids</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                    <expr_stmt><expr><name><name>ids</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                </block_content>}</block></for>
            </block_content>}</block></constructor>

            <function><type><specifier>public</specifier> <name>void</name></type> <name>union</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>edge</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>visitedValues</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name><name>edge</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <decl_stmt><decl><type><name>LinkedNode</name></type> <name>parent</name> <init>= <expr><operator>new</operator> <call><name>LinkedNode</name><argument_list>(<argument><expr><name><name>edge</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>LinkedNode</name></type> <name>node</name> <init>= <expr><operator>new</operator> <call><name>LinkedNode</name><argument_list>(<argument><expr><name><name>edge</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>visitedLinkedNodes</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>visitedValues</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>edge</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>visitedLinkedNodes</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                        <decl_stmt><decl><type><name>LinkedNode</name></type> <name>node</name> <init>= <expr><call><name><name>visitedLinkedNodes</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if_stmt><if>if <condition>(<expr><name><name>node</name><operator>.</operator><name>val</name></name> <operator>==</operator> <name><name>edge</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
                            <expr_stmt><expr><call><name><name>node</name><operator>.</operator><name>addParent</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>LinkedNode</name><argument_list>(<argument><expr><name><name>edge</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></for>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></function>

            <function><type><specifier>public</specifier> <name><name>int</name><index>[]</index></name></type> <name>findRedundantDirectedConnection</name><parameter_list>()</parameter_list> <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><call><name>hasTwoParents</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>index</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>LinkedNode</name></argument>&gt;</argument_list></name></type> <name>parents</name> <init>= <expr><call><name><name>visitedLinkedNodes</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><name>parents</name></expr></init></decl>;</decl_stmt><comment type="line">//parents size is fixed, only 2</comment>
                    <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>result</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
                    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>parents</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><call><name>hasCycle</name><argument_list>(<argument><expr><call><name><name>visitedLinkedNodes</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>parents</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                            <expr_stmt><expr><name>result</name> <operator>=</operator> <operator>new</operator> <name><name>int</name><index>[]</index></name><block>{<expr><call><name><name>parents</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><name>val</name></expr>, <expr><call><name><name>visitedLinkedNodes</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>.</operator><name>val</name></expr>}</block></expr>;</expr_stmt>
                            <break>break;</break>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></for>
                    <return>return <expr><name>result</name></expr>;</return>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <return>return <expr><name><name>edges</name><index>[<expr><name>m</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</return>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></function>

            <function><type><specifier>private</specifier> <name>boolean</name></type> <name>hasCycle</name><parameter_list>(<parameter><decl><type><name>LinkedNode</name></type> <name>linkedNode</name></decl></parameter>, <parameter><decl><type><name>LinkedNode</name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>visited</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>visited</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>linkedNode</name><operator>.</operator><name>val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <while>while <condition>(<expr><name>parent</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><call><name><name>visited</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name><name>parent</name><operator>.</operator><name>val</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><call><name><name>visited</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>parent</name><operator>.</operator><name>val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>parent</name> <operator>=</operator> <call><name>findParent</name><argument_list>(<argument><expr><name><name>parent</name><operator>.</operator><name>val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></while>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return>
            </block_content>}</block></function>

            <function><type><specifier>private</specifier> <name>LinkedNode</name></type> <name>findParent</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>visitedLinkedNodes</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><call><name><name>visitedLinkedNodes</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><name>val</name> <operator>==</operator> <name>val</name></expr>)</condition> <block>{<block_content>
                        <return>return <expr><call><name><name>visitedLinkedNodes</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name><name>parents</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></for>
                <return>return <expr><literal type="null">null</literal></expr>;</return>
            </block_content>}</block></function>

            <function><type><specifier>private</specifier> <name>int</name></type> <name>hasTwoParents</name><parameter_list>()</parameter_list> <block>{<block_content>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>visitedLinkedNodes</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><call><name><name>visitedLinkedNodes</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name><name>parents</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                        <return>return <expr><name>i</name></expr>;</return>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></for>
                <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
            </block_content>}</block></function>
        }</block></class>

        <function><type><specifier>public</specifier> <name><name>int</name><index>[]</index></name></type> <name>findRedundantDirectedConnection</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index><index>[]</index></name></type> <name>edges</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>UnionFind</name></type> <name>unionFind</name> <init>= <expr><operator>new</operator> <call><name>UnionFind</name><argument_list>(<argument><expr><name>edges</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="block" format="javadoc">/**two cases:
             * 1. the entire edges are just one directed loop, in this case, just return the last edge, see test2 in _685Test.java
             * 2. there's one directed loop, but one node of the loop has two parents, in this case, what we'll need to do
             * is just to return the edge in this loop that points to the child that has two parents, see test1 in _685Test.java
             * also, in case 2, use the id of the node that has two parents as the id for all nodes in this loop, this way, I could know which of its
             * two parents is in the loop and should be the redundant one to return.
             * */</comment>
            <for>for <control>(<init><decl><type><name><name>int</name><index>[]</index></name></type> <name>edge</name> <range>: <expr><name>edges</name></expr></range></decl></init>)</control> <block>{<block_content>
                <expr_stmt><expr><call><name><name>unionFind</name><operator>.</operator><name>union</name></name><argument_list>(<argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <return>return <expr><call><name><name>unionFind</name><operator>.</operator><name>findRedundantDirectedConnection</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution2</name> <block>{
        <comment type="block" format="javadoc">/**
         * credit: https://discuss.leetcode.com/topic/105108/c-java-union-find-with-explanation-o-n
         */</comment>
        <function><type><specifier>public</specifier> <name><name>int</name><index>[]</index></name></type> <name>findRedundantDirectedConnection</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index><index>[]</index></name></type> <name>edges</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>can1</name> <init>= <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>can2</name> <init>= <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>parent</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[<expr><name><name>edges</name><operator>.</operator><name>length</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>edges</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>parent</name><index>[<expr><name><name>edges</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name><name>parent</name><index>[<expr><name><name>edges</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name><name>edges</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><name>can2</name> <operator>=</operator> <operator>new</operator> <name><name>int</name><index>[]</index></name><block>{<expr><name><name>edges</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>, <expr><name><name>edges</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>}</block></expr>;</expr_stmt>
                    <expr_stmt><expr><name>can1</name> <operator>=</operator> <operator>new</operator> <name><name>int</name><index>[]</index></name><block>{<expr><name><name>parent</name><index>[<expr><name><name>edges</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr>, <expr><name><name>edges</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>}</block></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>edges</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></for>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>edges</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <expr_stmt><expr><name><name>parent</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
            </block_content>}</block></for>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>edges</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>edges</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>child</name> <init>= <expr><name><name>edges</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>father</name> <init>= <expr><name><name>edges</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><call><name>root</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>father</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>child</name></expr>)</condition> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name><name>can1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                        <return>return <expr><name><name>edges</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return>
                    </block_content>}</block></if></if_stmt>
                    <return>return <expr><name>can1</name></expr>;</return>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name><name>parent</name><index>[<expr><name>child</name></expr>]</index></name> <operator>=</operator> <name>father</name></expr>;</expr_stmt>
            </block_content>}</block></for>
            <return>return <expr><name>can2</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><name>int</name></type> <name>root</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>parent</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <while>while <condition>(<expr><name>i</name> <operator>!=</operator> <name><name>parent</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>parent</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>parent</name><index>[<expr><name><name>parent</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>parent</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
            </block_content>}</block></while>
            <return>return <expr><name>i</name></expr>;</return>
        </block_content>}</block></function>
    }</block></class>
}</block></class>
</unit>
