<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\raw\solutions\_556.java"><package>package <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>solutions</name></name>;</package>


<class><specifier>public</specifier> class <name>_556</name> <block>{
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution1</name> <block>{
        <comment type="block" format="javadoc">/**
         * credit: https://discuss.leetcode.com/topic/85759/this-problem-is-the-same-to-next-permutation-algorithm-only and https://discuss.leetcode.com/topic/85755/java-solution-like-next-permutation-problem-o-n
         */</comment>

        <function><type><specifier>public</specifier> <name>int</name></type> <name>nextGreaterElement</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name><name>char</name><index>[]</index></name></type> <name>digits</name> <init>= <expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toCharArray</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>digits</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>digits</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&lt;=</operator> <name><name>digits</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt>
            </block_content>}</block></while>
            <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name><name>digits</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><name>j</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>digits</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&lt;=</operator> <name><name>digits</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>j</name><operator>--</operator></expr>;</expr_stmt>
            </block_content>}</block></while>
            <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>digits</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>reverse</name><argument_list>(<argument><expr><name>digits</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <try>try <block>{<block_content>
                <return>return <expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>String</name><argument_list>(<argument><expr><name>digits</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
            </block_content>}</block></catch></try>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>void</name></type> <name>reverse</name><parameter_list>(<parameter><decl><type><name><name>char</name><index>[]</index></name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>start</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name><name>a</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>j</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>j</name><operator>--</operator></expr>;</expr_stmt>
            </block_content>}</block></while>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>void</name></type> <name>swap</name><parameter_list>(<parameter><decl><type><name><name>char</name><index>[]</index></name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>char</name></type> <name>temp</name> <init>= <expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>a</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>
        </block_content>}</block></function>
    }</block></class>

}</block></class>
</unit>
