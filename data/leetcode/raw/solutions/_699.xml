<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\raw\solutions\_699.java"><package>package <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>solutions</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<class><specifier>public</specifier> class <name>_699</name> <block>{
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution1</name> <block>{
        <comment type="block" format="javadoc">/**
         * credit: https://discuss.leetcode.com/topic/107107/easy-understood-o-n-2-solution-with-explanation
         */</comment>
        <function><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>fallingSquares</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index><index>[]</index></name></type> <name>positions</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Interval</name></argument>&gt;</argument_list></name></type> <name>intervals</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>height</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name><name>int</name><index>[]</index></name></type> <name>position</name> <range>: <expr><name>positions</name></expr></range></decl></init>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>Interval</name></type> <name>curr</name> <init>= <expr><operator>new</operator> <call><name>Interval</name><argument_list>(<argument><expr><name><name>position</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>position</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>position</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>position</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>height</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name>height</name></expr></argument>, <argument><expr><call><name>getHeight</name><argument_list>(<argument><expr><name>intervals</name></expr></argument>, <argument><expr><name>curr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <return>return <expr><name>result</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>int</name></type> <name>getHeight</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Interval</name></argument>&gt;</argument_list></name></type> <name>intervals</name></decl></parameter>, <parameter><decl><type><name>Interval</name></type> <name>curr</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>preMaxHeight</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>Interval</name></type> <name>interval</name> <range>: <expr><name>intervals</name></expr></range></decl></init>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>interval</name><operator>.</operator><name><name>end</name> <argument_list type="generic">&lt; <argument><name><name>curr</name><operator>.</operator><name>start</name></name> <operator>||</operator> <name><name>interval</name><operator>.</operator><name>start</name></name></argument> &gt;</argument_list></name></name> <name><name>curr</name><operator>.</operator><name>end</name></name></expr>)</condition> <block>{<block_content>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name>preMaxHeight</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name>preMaxHeight</name></expr></argument>, <argument><expr><name><name>interval</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <expr_stmt><expr><name><name>curr</name><operator>.</operator><name>height</name></name> <operator>+=</operator> <name>preMaxHeight</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>intervals</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>curr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name><name>curr</name><operator>.</operator><name>height</name></name></expr>;</return>
        </block_content>}</block></function>

        <class>class <name>Interval</name> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>start</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>end</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>height</name></decl>;</decl_stmt>

            <constructor><specifier>public</specifier> <name>Interval</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <expr_stmt><expr><name><name>this</name><operator>.</operator><name>start</name></name> <operator>=</operator> <name>start</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>this</name><operator>.</operator><name>end</name></name> <operator>=</operator> <name>end</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>this</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>
            </block_content>}</block></constructor>
        }</block></class>
    }</block></class>
}</block></class>
</unit>
