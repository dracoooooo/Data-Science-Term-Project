<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\raw\solutions\_425.java"><package>package <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>solutions</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<class><specifier>public</specifier> class <name>_425</name> <block>{

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution1</name> <block>{
        <comment type="block" format="javadoc">/**
         * Credit: https://discuss.leetcode.com/topic/63516/explained-my-java-solution-using-trie-126ms-16-16/2
         */</comment>

        <class>class <name>TrieNode</name> <block>{
            <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>startWith</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>TrieNode</name><index>[]</index></name></type> <name>children</name></decl>;</decl_stmt>

            <constructor><name>TrieNode</name><parameter_list>()</parameter_list> <block>{<block_content>
                <expr_stmt><expr><name>startWith</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>children</name> <operator>=</operator> <operator>new</operator> <name><name>TrieNode</name><index>[<expr><literal type="number">26</literal></expr>]</index></name></expr>;</expr_stmt>
            </block_content>}</block></constructor>
        }</block></class>

        <class>class <name>Trie</name> <block>{
            <decl_stmt><decl><type><name>TrieNode</name></type> <name>root</name></decl>;</decl_stmt>

            <constructor><name>Trie</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>words</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <expr_stmt><expr><name>root</name> <operator>=</operator> <operator>new</operator> <call><name>TrieNode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <for>for <control>(<init><decl><type><name>String</name></type> <name>word</name> <range>: <expr><name>words</name></expr></range></decl></init>)</control> <block>{<block_content>
                    <decl_stmt><decl><type><name>TrieNode</name></type> <name>cur</name> <init>= <expr><name>root</name></expr></init></decl>;</decl_stmt>
                    <for>for <control>(<init><decl><type><name>char</name></type> <name>ch</name> <range>: <expr><call><name><name>word</name><operator>.</operator><name>toCharArray</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                        <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><name>ch</name> <operator>-</operator> <literal type="char">'a'</literal></expr></init></decl>;</decl_stmt>
                        <if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>.</operator><name>children</name><index>[<expr><name>index</name></expr>]</index></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                            <expr_stmt><expr><name><name>cur</name><operator>.</operator><name>children</name><index>[<expr><name>index</name></expr>]</index></name> <operator>=</operator> <operator>new</operator> <call><name>TrieNode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                        <expr_stmt><expr><name><name>cur</name><operator>.</operator><name>children</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><call><name><name>startWith</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>word</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>cur</name><operator>.</operator><name>children</name><index>[<expr><name>index</name></expr>]</index></name></expr>;</expr_stmt>
                    </block_content>}</block></for>
                </block_content>}</block></for>
            </block_content>}</block></constructor>

            <function><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>findByPrefix</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>prefix</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>ans</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>TrieNode</name></type> <name>cur</name> <init>= <expr><name>root</name></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name>char</name></type> <name>ch</name> <range>: <expr><call><name><name>prefix</name><operator>.</operator><name>toCharArray</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                    <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><name>ch</name> <operator>-</operator> <literal type="char">'a'</literal></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>.</operator><name>children</name><index>[<expr><name>index</name></expr>]</index></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                        <return>return <expr><name>ans</name></expr>;</return>
                    </block_content>}</block></if></if_stmt>

                    <expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>cur</name><operator>.</operator><name>children</name><index>[<expr><name>index</name></expr>]</index></name></expr>;</expr_stmt>
                </block_content>}</block></for>
                <expr_stmt><expr><call><name><name>ans</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><name><name>cur</name><operator>.</operator><name>startWith</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>ans</name></expr>;</return>
            </block_content>}</block></function>
        }</block></class>

        <function><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>wordSquares</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>words</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>ans</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>words</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name><name>words</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><name>ans</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><name><name>words</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Trie</name></type> <name>trie</name> <init>= <expr><operator>new</operator> <call><name>Trie</name><argument_list>(<argument><expr><name>words</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>ansBuilder</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>String</name></type> <name>w</name> <range>: <expr><name>words</name></expr></range></decl></init>)</control> <block>{<block_content>
                <expr_stmt><expr><call><name><name>ansBuilder</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>search</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name>trie</name></expr></argument>, <argument><expr><name>ans</name></expr></argument>, <argument><expr><name>ansBuilder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>ansBuilder</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><call><name><name>ansBuilder</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>

            <return>return <expr><name>ans</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>void</name></type> <name>search</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>Trie</name></type> <name>trie</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>ans</name></decl></parameter>,
                            <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>ansBuilder</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>ansBuilder</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>len</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>ans</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>ansBuilder</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>
            </block_content>}</block></if></if_stmt>

            <decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><call><name><name>ansBuilder</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>StringBuilder</name></type> <name>prefixBuilder</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>String</name></type> <name>s</name> <range>: <expr><name>ansBuilder</name></expr></range></decl></init>)</control> <block>{<block_content>
                <expr_stmt><expr><call><name><name>prefixBuilder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>startWith</name> <init>= <expr><call><name><name>trie</name><operator>.</operator><name>findByPrefix</name></name><argument_list>(<argument><expr><call><name><name>prefixBuilder</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>String</name></type> <name>sw</name> <range>: <expr><name>startWith</name></expr></range></decl></init>)</control> <block>{<block_content>
                <expr_stmt><expr><call><name><name>ansBuilder</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>sw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>search</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name>trie</name></expr></argument>, <argument><expr><name>ans</name></expr></argument>, <argument><expr><name>ansBuilder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>ansBuilder</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><call><name><name>ansBuilder</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></function>
    }</block></class>

}</block></class>

</unit>
