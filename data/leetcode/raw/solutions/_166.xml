<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\raw\solutions\_166.java"><package>package <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>solutions</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

<comment type="block" format="javadoc">/**
 * 166. Fraction to Recurring Decimal
 *
 * Given two integers representing the numerator and denominator of a fraction, return the fraction in string format.

 If the fractional part is repeating, enclose the repeating part in parentheses.

 For example,

 Given numerator = 1, denominator = 2, return "0.5".
 Given numerator = 2, denominator = 1, return "2".
 Given numerator = 2, denominator = 3, return "0.(6)".

 */</comment>
<class><specifier>public</specifier> class <name>_166</name> <block>{
  <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution1</name> <block>{
    <comment type="block" format="javadoc">/** credit: https://discuss.leetcode.com/topic/33311/simple-and-short-solution-in-java */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>fractionToDecimal</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>numerator</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>denominator</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <decl_stmt><decl><type><name>String</name></type> <name>sign</name> <init>=
          <expr><ternary><condition><expr><operator>(</operator><name>numerator</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>denominator</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>numerator</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>denominator</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">"-"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>numerator</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="string">"0"</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <decl_stmt><decl><type><name>long</name></type> <name>num</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>abs</name></name><argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator> <name>numerator</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>long</name></type> <name>deno</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>abs</name></name><argument_list>(<argument><expr><operator>(</operator><name>long</name><operator>)</operator> <name>denominator</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>StringBuilder</name></type> <name>stringBuilder</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>stringBuilder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>sign</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>long</name></type> <name>integral</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>abs</name></name><argument_list>(<argument><expr><name>num</name> <operator>/</operator> <name>deno</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>stringBuilder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>integral</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>numerator</name> <operator>%</operator> <name>denominator</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name><name>stringBuilder</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name><name>stringBuilder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <decl_stmt><decl><type><name>long</name></type> <name>remainder</name> <init>= <expr><name>num</name> <operator>%</operator> <name>deno</name></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>map</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <while>while <condition>(<expr><operator>!</operator><call><name><name>map</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>remainder</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>remainder</name></expr></argument>, <argument><expr><call><name><name>stringBuilder</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>n</name> <init>= <expr><name>remainder</name> <operator>*</operator> <literal type="number">10</literal> <operator>/</operator> <name>deno</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>remainder</name> <operator>=</operator> <name>remainder</name> <operator>*</operator> <literal type="number">10</literal> <operator>%</operator> <name>deno</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>remainder</name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>remainder</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>map</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>remainder</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>stringBuilder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></while>
      <if_stmt><if>if <condition>(<expr><name>remainder</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>stringBuilder</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name><name>map</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>remainder</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>stringBuilder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <return>return <expr><call><name><name>stringBuilder</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>
  }</block></class>
}</block></class>
</unit>
