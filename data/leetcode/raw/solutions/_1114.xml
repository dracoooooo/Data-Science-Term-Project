<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\raw\solutions\_1114.java"><package>package <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>solutions</name></name>;</package>

<class><specifier>public</specifier> class <name>_1114</name> <block>{
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution1</name> <block>{
        <class><specifier>static</specifier> class <name>Foo</name> <block>{

            <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>volatile</specifier> <name>boolean</name></type> <name>onePrinted</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>volatile</specifier> <name>boolean</name></type> <name>twoPrinted</name></decl>;</decl_stmt>

            <constructor><specifier>public</specifier> <name>Foo</name><parameter_list>()</parameter_list> <block>{<block_content>
                <expr_stmt><expr><name>onePrinted</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>twoPrinted</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
            </block_content>}</block></constructor>

            <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>first</name><parameter_list>(<parameter><decl><type><name>Runnable</name></type> <name>printFirst</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>InterruptedException</name></expr></argument></throws> <block>{<block_content>

                <comment type="line">// printFirst.run() outputs "first". Do not change or remove this line.</comment>
                <expr_stmt><expr><call><name><name>printFirst</name><operator>.</operator><name>run</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>onePrinted</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>notifyAll</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></function>

            <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>second</name><parameter_list>(<parameter><decl><type><name>Runnable</name></type> <name>printSecond</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>InterruptedException</name></expr></argument></throws> <block>{<block_content>
                <while>while <condition>(<expr><operator>!</operator><name>onePrinted</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>wait</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></while>

                <comment type="line">// printSecond.run() outputs "second". Do not change or remove this line.</comment>
                <expr_stmt><expr><call><name><name>printSecond</name><operator>.</operator><name>run</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>twoPrinted</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>notifyAll</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></function>

            <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>third</name><parameter_list>(<parameter><decl><type><name>Runnable</name></type> <name>printThird</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>InterruptedException</name></expr></argument></throws> <block>{<block_content>
                <while>while <condition>(<expr><operator>!</operator><name>twoPrinted</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>wait</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></while>

                <comment type="line">// printThird.run() outputs "third". Do not change or remove this line.</comment>
                <expr_stmt><expr><call><name><name>printThird</name><operator>.</operator><name>run</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></function>
        }</block></class>
    }</block></class>
}</block></class>
</unit>
