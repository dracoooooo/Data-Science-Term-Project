<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\raw\solutions\_29.java"><package>package <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>solutions</name></name>;</package>

<class><specifier>public</specifier> class <name>_29</name> <block>{

  <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution1</name> <block>{
    <function><type><specifier>public</specifier> <name>int</name></type> <name>divide</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>dividend</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>divisor</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>divisor</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>dividend</name> <operator>==</operator> <name><name>Integer</name><operator>.</operator><name>MIN_VALUE</name></name> <operator>&amp;&amp;</operator> <name>divisor</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
        <return>return <expr><name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>dividend</name> <operator>!=</operator> <name><name>Integer</name><operator>.</operator><name>MIN_VALUE</name></name>
          <operator>&amp;&amp;</operator> <call><name><name>Math</name><operator>.</operator><name>abs</name></name><argument_list>(<argument><expr><name>dividend</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <call><name><name>Math</name><operator>.</operator><name>abs</name></name><argument_list>(<argument><expr><name>divisor</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>divisor</name> <operator>==</operator> <name><name>Integer</name><operator>.</operator><name>MIN_VALUE</name></name></expr>)</condition> <block>{<block_content>
        <return>return <expr><ternary><condition><expr><operator>(</operator><name>dividend</name> <operator>==</operator> <name><name>Integer</name><operator>.</operator><name>MIN_VALUE</name></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <decl_stmt><decl><type><name>boolean</name></type> <name>flag</name> <init>= <expr><operator>(</operator><name>dividend</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>^</operator> <operator>(</operator><name>divisor</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>dividend</name> <operator>=</operator> <operator>-</operator><call><name><name>Math</name><operator>.</operator><name>abs</name></name><argument_list>(<argument><expr><name>dividend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>divisor</name> <operator>=</operator> <operator>-</operator><call><name><name>Math</name><operator>.</operator><name>abs</name></name><argument_list>(<argument><expr><name>divisor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>num</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[<expr><literal type="number">40</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>multiple</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[<expr><literal type="number">40</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>num</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>divisor</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>multiple</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

      <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">32</literal> <operator>&amp;&amp;</operator> <name><name>num</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name><name>num</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>num</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>multiple</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>multiple</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></for>

      <decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
      <while>while <condition>(<expr><name><name>num</name><index>[<expr><name>index</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>++</operator><name>index</name></expr>;</expr_stmt>
      </block_content>}</block></while>
      <expr_stmt><expr><name>index</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

      <while>while <condition>(<expr><name>dividend</name> <operator>&lt;=</operator> <name>divisor</name></expr>)</condition> <block>{<block_content>
        <while>while <condition>(<expr><name>dividend</name> <operator>&lt;=</operator> <name><name>num</name><index>[<expr><name>index</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>result</name> <operator>+=</operator> <name><name>multiple</name><index>[<expr><name>index</name></expr>]</index></name></expr>;</expr_stmt>
          <expr_stmt><expr><name>dividend</name> <operator>-=</operator> <name><name>num</name><index>[<expr><name>index</name></expr>]</index></name></expr>;</expr_stmt>
        </block_content>}</block></while>
        <expr_stmt><expr><operator>--</operator><name>index</name></expr>;</expr_stmt>
      </block_content>}</block></while>
      <return>return <expr><ternary><condition><expr><operator>!</operator><name>flag</name></expr> ?</condition><then> <expr><name>result</name></expr> </then><else>: <expr><operator>-</operator><name>result</name></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>
  }</block></class>
}</block></class>
</unit>
