<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\raw\solutions\_134.java"><package>package <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>solutions</name></name>;</package>

<comment type="block" format="javadoc">/**
 * 134. Gas Station
 *
 * There are N gas stations along a circular route, where the amount of gas at station i is gas[i].
 You have a car with an unlimited gas tank and it costs cost[i] of gas to travel from station i to its next station (i+1).
 You begin the journey with an empty tank at one of the gas stations.

 Return the starting gas station's index if you can travel around the circuit once, otherwise return -1.

 Note:
 The solution is guaranteed to be unique.
 */</comment>
<class><specifier>public</specifier> class <name>_134</name> <block>{

  <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution1</name> <block>{
    <comment type="block" format="javadoc">/** Credit: https://discuss.leetcode.com/topic/5088/my-ac-is-o-1-space-o-n-running-time-solution-does-anybody-have-posted-this-solution */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>canCompleteCircuit</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>gas</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>cost</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>start</name> <init>= <expr><name><name>gas</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>end</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>sum</name> <init>= <expr><name><name>gas</name><index>[<expr><name>start</name></expr>]</index></name> <operator>-</operator> <name><name>cost</name><index>[<expr><name>start</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <while>while <condition>(<expr><name>start</name> <operator>&gt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>sum</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>sum</name> <operator>+=</operator> <name><name>gas</name><index>[<expr><name>end</name></expr>]</index></name> <operator>-</operator> <name><name>cost</name><index>[<expr><name>end</name></expr>]</index></name></expr>;</expr_stmt>
          <expr_stmt><expr><name>end</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><name>start</name><operator>--</operator></expr>;</expr_stmt>
          <expr_stmt><expr><name>sum</name> <operator>+=</operator> <name><name>gas</name><index>[<expr><name>start</name></expr>]</index></name> <operator>-</operator> <name><name>cost</name><index>[<expr><name>start</name></expr>]</index></name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></while>
      <return>return <expr><ternary><condition><expr><name>sum</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>start</name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>
  }</block></class>

}</block></class>
</unit>
