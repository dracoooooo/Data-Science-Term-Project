<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\raw\solutions\_31.java"><package>package <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>solutions</name></name>;</package>

<class><specifier>public</specifier> class <name>_31</name> <block>{
  <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution1</name> <block>{
    <comment type="block" format="javadoc">/**
     * Leetcode has a very good article to illustrate this problem and with animation:
     * https://leetcode.com/articles/next-permutation/
     * 1. if the array is already in decrementing order, then there's no next larger permutation possible.
     * 2. if not, start from the end of the array, find the first pair of numbers that break the decrementing order
     * 3. then from that index going to the right again, find the element that is closest bigger than this number, swap them
     * 4. reverse the right half of this array after this index
     */</comment>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>nextPermutation</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>nums</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>nums</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
      <while>while <condition>(<expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>nums</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;=</operator> <name><name>nums</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt>
      </block_content>}</block></while>
      <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name><name>nums</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><name>j</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>nums</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;=</operator> <name><name>nums</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>j</name><operator>--</operator></expr>;</expr_stmt>
        </block_content>}</block></while>

        <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>nums</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>reverse</name><argument_list>(<argument><expr><name>nums</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>reverse</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>nums</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>end</name> <init>= <expr><name><name>nums</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
      <while>while <condition>(<expr><name>start</name> <operator>&lt;=</operator> <name>end</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>tmp</name> <init>= <expr><name><name>nums</name><index>[<expr><name>start</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>nums</name><index>[<expr><name>start</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>nums</name><index>[<expr><name>end</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>nums</name><index>[<expr><name>end</name><operator>--</operator></expr>]</index></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
      </block_content>}</block></while>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>swap</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>nums</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>tmp</name> <init>= <expr><name><name>nums</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>nums</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>nums</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>nums</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
    </block_content>}</block></function>
  }</block></class>
}</block></class>
</unit>
