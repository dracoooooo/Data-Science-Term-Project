<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\raw\solutions\_8.java"><package>package <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>solutions</name></name>;</package>

<class><specifier>public</specifier> class <name>_8</name> <block>{

	<class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution1</name> <block>{
		<comment type="block" format="javadoc">/**
		 * four corner cases:
		 * 1. discards all leading zeroes
		 * 2. sign of the number
		 * 3. overflow
		 * 4. invalid input
		 * */</comment>
		<function><type><specifier>public</specifier> <name>int</name></type> <name>myAtoi</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type> <name>pointer</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
			<while>while <condition>(<expr><name>pointer</name> <operator>&lt;</operator> <call><name><name>str</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>Character</name><operator>.</operator><name>isWhitespace</name></name><argument_list>(<argument><expr><call><name><name>str</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>pointer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>pointer</name><operator>++</operator></expr>;</expr_stmt>
			</block_content>}</block></while>
			<if_stmt><if>if <condition>(<expr><name>pointer</name> <operator>==</operator> <call><name><name>str</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
				<return>return <expr><literal type="number">0</literal></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<decl_stmt><decl><type><name>boolean</name></type> <name>negativeFlag</name> <init>= <expr><operator>(</operator><call><name><name>str</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>pointer</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'-'</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if <condition>(<expr><call><name><name>str</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>pointer</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'+'</literal> <operator>||</operator> <call><name><name>str</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>pointer</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>pointer</name><operator>++</operator></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<for>for <control>(<init>;</init> <condition><expr><name>pointer</name> <operator>&lt;</operator> <call><name><name>str</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>pointer</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><call><name><name>str</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>pointer</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="char">'9'</literal> <operator>||</operator> <call><name><name>str</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>pointer</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="char">'0'</literal></expr>)</condition> <block>{<block_content>
					<break>break;</break>
				</block_content>}</block></if> <else>else <block>{<block_content>
					<decl_stmt><decl><type><name>int</name></type> <name>digit</name> <init>= <expr><call><name><name>str</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>pointer</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="char">'0'</literal></expr></init></decl>;</decl_stmt>
					<if_stmt><if>if <condition>(<expr><operator>!</operator><name>negativeFlag</name> <operator>&amp;&amp;</operator> <name>result</name> <operator>&gt;</operator> <operator>(</operator><name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name> <operator>-</operator> <name>digit</name><operator>)</operator> <operator>/</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>
						<return>return <expr><name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr>;</return>
					</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>negativeFlag</name> <operator>&amp;&amp;</operator> <name>result</name> <operator>&lt;</operator> <operator>(</operator><name><name>Integer</name><operator>.</operator><name>MIN_VALUE</name></name> <operator>+</operator> <name>digit</name><operator>)</operator> <operator>/</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>
						<return>return <expr><name><name>Integer</name><operator>.</operator><name>MIN_VALUE</name></name></expr>;</return>
					</block_content>}</block></if></if_stmt>
					<expr_stmt><expr><name>result</name> <operator>=</operator> <name>result</name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>negativeFlag</name></expr> ?</condition><then> <expr><operator>-</operator><name>digit</name></expr> </then><else>: <expr><name>digit</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
				</block_content>}</block></else></if_stmt>
			</block_content>}</block></for>
			<return>return <expr><name>result</name></expr>;</return>
		</block_content>}</block></function>
	}</block></class>

}</block></class>
</unit>
