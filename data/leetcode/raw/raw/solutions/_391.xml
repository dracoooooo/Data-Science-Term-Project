<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\raw\solutions\_391.java"><package>package <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>solutions</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>

<class><specifier>public</specifier> class <name>_391</name> <block>{
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution1</name> <block>{
        <comment type="block" format="javadoc">/**
         * credit: https://discuss.leetcode.com/topic/56052/really-easy-understanding-solution-o-n-java
         */</comment>
        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isRectangleCover</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index><index>[]</index></name></type> <name>rectangles</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>rectangles</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>rectangles</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <decl_stmt><decl><type><name>int</name></type> <name>x1</name> <init>= <expr><name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>x2</name> <init>= <expr><name><name>Integer</name><operator>.</operator><name>MIN_VALUE</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>y1</name> <init>= <expr><name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>y2</name> <init>= <expr><name><name>Integer</name><operator>.</operator><name>MIN_VALUE</name></name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>set</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>area</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

            <for>for <control>(<init><decl><type><name><name>int</name><index>[]</index></name></type> <name>rect</name> <range>: <expr><name>rectangles</name></expr></range></decl></init>)</control> <block>{<block_content>
                <expr_stmt><expr><name>x1</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><name><name>rect</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>x1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>y1</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><name><name>rect</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>y1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>x2</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name><name>rect</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>x2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>y2</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name><name>rect</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>y2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><name>area</name> <operator>+=</operator> <operator>(</operator><name><name>rect</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name><name>rect</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <operator>(</operator><name><name>rect</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <name><name>rect</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

                <decl_stmt><decl><type><name>String</name></type> <name>s1</name> <init>= <expr><name><name>rect</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <name><name>rect</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>s2</name> <init>= <expr><name><name>rect</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <name><name>rect</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>s3</name> <init>= <expr><name><name>rect</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <name><name>rect</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>s4</name> <init>= <expr><name><name>rect</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <name><name>rect</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>set</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>s1</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>set</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>s1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>set</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>set</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>set</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>s3</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>set</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>s3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>set</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>s4</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>set</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>s4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>

            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>set</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>x1</name> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <name>y1</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name><name>set</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>x1</name> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <name>y2</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name><name>set</name><operator>.</operator><name>contains</name></name><argument_list>(
                    <argument><expr><name>x2</name> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <name>y1</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name><name>set</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>x2</name> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <name>y2</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>set</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <return>return <expr><name>area</name> <operator>==</operator> <operator>(</operator><name>x2</name> <operator>-</operator> <name>x1</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>y2</name> <operator>-</operator> <name>y1</name><operator>)</operator></expr>;</return>
        </block_content>}</block></function>
    }</block></class>
}</block></class>
</unit>
