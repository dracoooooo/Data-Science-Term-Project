<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\raw\solutions\_273.java"><package>package <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>solutions</name></name>;</package>

<class><specifier>public</specifier> class <name>_273</name> <block>{

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution1</name> <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <name><name>String</name><index>[]</index></name></type> <name>belowTen</name> <init>= <expr><operator>new</operator> <name><name>String</name><index>[]</index></name><block>{<expr><literal type="string">"Zero"</literal></expr>, <expr><literal type="string">"One"</literal></expr>, <expr><literal type="string">"Two"</literal></expr>, <expr><literal type="string">"Three"</literal></expr>, <expr><literal type="string">"Four"</literal></expr>, <expr><literal type="string">"Five"</literal></expr>, <expr><literal type="string">"Six"</literal></expr>, <expr><literal type="string">"Seven"</literal></expr>, <expr><literal type="string">"Eight"</literal></expr>, <expr><literal type="string">"Nine"</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name><name>String</name><index>[]</index></name></type> <name>belowTwenty</name> <init>= <expr><operator>new</operator> <name><name>String</name><index>[]</index></name><block>{<expr><literal type="string">"Ten"</literal></expr>, <expr><literal type="string">"Eleven"</literal></expr>, <expr><literal type="string">"Twelve"</literal></expr>, <expr><literal type="string">"Thirteen"</literal></expr>, <expr><literal type="string">"Fourteen"</literal></expr>, <expr><literal type="string">"Fifteen"</literal></expr>, <expr><literal type="string">"Sixteen"</literal></expr>, <expr><literal type="string">"Seventeen"</literal></expr>, <expr><literal type="string">"Eighteen"</literal></expr>, <expr><literal type="string">"Nineteen"</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name><name>String</name><index>[]</index></name></type> <name>belowHundred</name> <init>= <expr><operator>new</operator> <name><name>String</name><index>[]</index></name><block>{<expr><literal type="string">"Twenty"</literal></expr>, <expr><literal type="string">"Thirty"</literal></expr>, <expr><literal type="string">"Forty"</literal></expr>, <expr><literal type="string">"Fifty"</literal></expr>, <expr><literal type="string">"Sixty"</literal></expr>, <expr><literal type="string">"Seventy"</literal></expr>, <expr><literal type="string">"Eighty"</literal></expr>, <expr><literal type="string">"Ninety"</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name><name>String</name><index>[]</index></name></type> <name>overThousand</name> <init>= <expr><operator>new</operator> <name><name>String</name><index>[]</index></name><block>{<expr><literal type="string">"Thousand"</literal></expr>, <expr><literal type="string">"Million"</literal></expr>, <expr><literal type="string">"Billion"</literal></expr>}</block></expr></init></decl>;</decl_stmt>

        <function><type><specifier>public</specifier> <name>String</name></type> <name>numberToWords</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>result</name></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>num</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><name><name>belowTen</name><index>[<expr><name>num</name></expr>]</index></name></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>hundredHelper</name><argument_list>(<argument><expr><name>num</name> <operator>%</operator> <literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>num</name> <operator>=</operator> <name>num</name> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name>num</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>num</name> <operator>%</operator> <literal type="number">1000</literal> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>hundredHelper</name><argument_list>(<argument><expr><name>num</name> <operator>%</operator> <literal type="number">1000</literal></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>overThousand</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <name>result</name></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name>num</name> <operator>=</operator> <name>num</name> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
            </block_content>}</block></while>

            <return>return <expr><call><name><name>result</name><operator>.</operator><name>trim</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>String</name></type> <name>hundredHelper</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>String</name></type> <name>nstr</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>num</name> <operator>&gt;=</operator> <literal type="number">100</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>nstr</name> <operator>=</operator> <name><name>belowTen</name><index>[<expr><name>num</name> <operator>/</operator> <literal type="number">100</literal></expr>]</index></name> <operator>+</operator> <literal type="string">" Hundred "</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>num</name> <operator>=</operator> <name>num</name> <operator>%</operator> <literal type="number">100</literal></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>num</name> <operator>&gt;=</operator> <literal type="number">20</literal></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>num</name> <operator>%</operator> <literal type="number">10</literal> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>nstr</name> <operator>=</operator> <name>nstr</name> <operator>+</operator> <name><name>belowHundred</name><index>[<expr><name>num</name> <operator>/</operator> <literal type="number">10</literal> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <name><name>belowTen</name><index>[<expr><name>num</name> <operator>%</operator> <literal type="number">10</literal></expr>]</index></name> <operator>+</operator> <literal type="string">" "</literal></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><name>nstr</name> <operator>=</operator> <name>nstr</name> <operator>+</operator> <name><name>belowHundred</name><index>[<expr><name>num</name> <operator>/</operator> <literal type="number">10</literal> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <literal type="string">" "</literal></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>num</name> <operator>&gt;=</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>nstr</name> <operator>=</operator> <name>nstr</name> <operator>+</operator> <name><name>belowTwenty</name><index>[<expr><name>num</name> <operator>%</operator> <literal type="number">10</literal></expr>]</index></name> <operator>+</operator> <literal type="string">" "</literal></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>num</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>nstr</name> <operator>=</operator> <name>nstr</name> <operator>+</operator> <name><name>belowTen</name><index>[<expr><name>num</name></expr>]</index></name> <operator>+</operator> <literal type="string">" "</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><name>nstr</name></expr>;</return>
        </block_content>}</block></function>
    }</block></class>
}</block></class>
</unit>
