<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\raw\solutions\_380.java"><package>package <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>solutions</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Random</name></name>;</import>

<class><specifier>public</specifier> class <name>_380</name> <block>{

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution1</name> <block>{
        <comment type="block" format="javadoc">/**
         * credit: https://leetcode.com/problems/insert-delete-getrandom-o1/discuss/85401/Java-solution-using-a-HashMap-and-an-ArrayList-along-with-a-follow-up.-(131-ms)
         */</comment>
        <class><specifier>public</specifier> <specifier>static</specifier> class <name>RandomizedSet</name> <block>{
            <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>locationMap</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>list</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Random</name></type> <name>random</name></decl>;</decl_stmt>

            <comment type="block" format="javadoc">/**
             * Initialize your data structure here.
             */</comment>
            <constructor><specifier>public</specifier> <name>RandomizedSet</name><parameter_list>()</parameter_list> <block>{<block_content>
                <expr_stmt><expr><name>locationMap</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>list</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>random</name> <operator>=</operator> <operator>new</operator> <call><name>Random</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></constructor>

            <comment type="block" format="javadoc">/**
             * Inserts a value to the set. Returns true if the set did not already contain the specified element.
             */</comment>
            <function><type><specifier>public</specifier> <name>boolean</name></type> <name>insert</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>locationMap</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><call><name><name>locationMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><call><name><name>list</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></function>

            <comment type="block" format="javadoc">/**
             * Removes a value from the set. Returns true if the set contained the specified element.
             */</comment>
            <function><type><specifier>public</specifier> <name>boolean</name></type> <name>remove</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>locationMap</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <decl_stmt><decl><type><name>int</name></type> <name>location</name> <init>= <expr><call><name><name>locationMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <comment type="block" format="javadoc">/**if it's not the last one, then swap the last one with this val*/</comment>
                    <if_stmt><if>if <condition>(<expr><name>location</name> <operator>&lt;</operator> <call><name><name>list</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                        <decl_stmt><decl><type><name>int</name></type> <name>lastOne</name> <init>= <expr><call><name><name>list</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>list</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>location</name></expr></argument>, <argument><expr><name>lastOne</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>locationMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>lastOne</name></expr></argument>, <argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><call><name><name>locationMap</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><call><name><name>list</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></function>

            <comment type="block" format="javadoc">/**
             * Get a random element from the set.
             */</comment>
            <function><type><specifier>public</specifier> <name>int</name></type> <name>getRandom</name><parameter_list>()</parameter_list> <block>{<block_content>
                <return>return <expr><call><name><name>list</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>random</name><operator>.</operator><name>nextInt</name></name><argument_list>(<argument><expr><call><name><name>list</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></function>

        }</block></class>
    }</block></class>

    <comment type="block" format="javadoc">/**
     * Your _380 object will be instantiated and called as such:
     * _380 obj = new _380();
     * boolean param_1 = obj.insert(val);
     * boolean param_2 = obj.delete(val);
     * int param_3 = obj.getRandom();
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution2</name> <block>{
        <comment type="block" format="javadoc">/**This is not ideal and not meeting average O(1) time for all three operations.*/</comment>
        <class><specifier>public</specifier> <specifier>static</specifier> class <name>RandomizedSet</name> <block>{

            <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>forwardMap</name></decl>;</decl_stmt>
                <comment type="line">//key is auto increment index, value if the inserted val</comment>
            <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>reverseMap</name></decl>;</decl_stmt><comment type="line">//the other way around</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>index</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Random</name></type> <name>random</name></decl>;</decl_stmt>

            <comment type="block" format="javadoc">/**
             * Initialize your data structure here.
             */</comment>
            <constructor><specifier>public</specifier> <name>RandomizedSet</name><parameter_list>()</parameter_list> <block>{<block_content>
                <expr_stmt><expr><name>forwardMap</name> <operator>=</operator> <operator>new</operator> <call><name>HashMap</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>reverseMap</name> <operator>=</operator> <operator>new</operator> <call><name>HashMap</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>random</name> <operator>=</operator> <operator>new</operator> <call><name>Random</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></constructor>

            <comment type="block" format="javadoc">/**
             * Inserts a value to the set. Returns true if the set did not already contain the specified
             * element.
             */</comment>
            <function><type><specifier>public</specifier> <name>boolean</name></type> <name>insert</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>forwardMap</name><operator>.</operator><name>containsValue</name></name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><call><name><name>forwardMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>reverseMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>index</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></function>

            <comment type="block" format="javadoc">/**
             * Deletes a value from the set. Returns true if the set contained the specified element.
             */</comment>
            <function><type><specifier>public</specifier> <name>boolean</name></type> <name>remove</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>forwardMap</name><operator>.</operator><name>containsValue</name></name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <decl_stmt><decl><type><name>int</name></type> <name>key</name> <init>= <expr><call><name><name>reverseMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>reverseMap</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>forwardMap</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></function>

            <comment type="block" format="javadoc">/**
             * Get a random element from the set.
             */</comment>
            <function><type><specifier>public</specifier> <name>int</name></type> <name>getRandom</name><parameter_list>()</parameter_list> <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>max</name> <init>= <expr><call><name><name>forwardMap</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>max</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                    <return>return <expr><call><name><name>forwardMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
                </block_content>}</block></if></if_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>randomNum</name> <init>= <expr><call><name><name>random</name><operator>.</operator><name>nextInt</name></name><argument_list>(<argument><expr><name>max</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <while>while <condition>(<expr><operator>!</operator><call><name><name>forwardMap</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>randomNum</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>randomNum</name> <operator>=</operator> <call><name><name>random</name><operator>.</operator><name>nextInt</name></name><argument_list>(<argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></while>
                <return>return <expr><call><name><name>forwardMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>randomNum</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></function>
        }</block></class>
    }</block></class>
}</block></class>
</unit>
