<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\raw\solutions\_335.java"><package>package <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>solutions</name></name>;</package>

<class><specifier>public</specifier> class <name>_335</name> <block>{
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution1</name> <block>{
        <comment type="block" format="javadoc">/**
         * reference: https://discuss.leetcode.com/topic/38014/java-oms-with-explanation/2
         */</comment>
        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isSelfCrossing</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><name><name>x</name><operator>.</operator><name>length</name></name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>l</name> <operator>&lt;=</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>l</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;=</operator> <name><name>x</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>x</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&lt;=</operator> <name><name>x</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
                    <return>return <expr><literal type="boolean">true</literal></expr>;</return>  <comment type="line">//Fourth line crosses first line and onward</comment>
                </block_content>}</block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name><name>x</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name><name>x</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>x</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>x</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">4</literal></expr>]</index></name> <operator>&gt;=</operator> <name><name>x</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
                        <return>return <expr><literal type="boolean">true</literal></expr>;</return> <comment type="line">// Fifth line meets first line and onward</comment>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name><name>x</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name><name>x</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">4</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0</literal>
                            <operator>&amp;&amp;</operator> <name><name>x</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;=</operator> <name><name>x</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name><name>x</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">4</literal></expr>]</index></name>
                            <operator>&amp;&amp;</operator> <name><name>x</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&gt;=</operator> <name><name>x</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <name><name>x</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">5</literal></expr>]</index></name>
                            <operator>&amp;&amp;</operator> <name><name>x</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&lt;=</operator> <name><name>x</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
                        <return>return <expr><literal type="boolean">true</literal></expr>;</return>  <comment type="line">// Sixth line crosses first line and onward</comment>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></function>
    }</block></class>
}</block></class>
</unit>
