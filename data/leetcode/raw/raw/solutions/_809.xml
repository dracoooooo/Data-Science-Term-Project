<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\raw\solutions\_809.java"><package>package <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>solutions</name></name>;</package>

<class><specifier>public</specifier> class <name>_809</name> <block>{
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution1</name> <block>{
        <function><type><specifier>public</specifier> <name>int</name></type> <name>expressiveWords</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>S</name></decl></parameter>, <parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>words</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>String</name></type> <name>w</name> <range>: <expr><name>words</name></expr></range></decl></init>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name>check</name><argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>ans</name><operator>++</operator></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
            <return>return <expr><name>ans</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>boolean</name></type> <name>check</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>S</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>w</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <comment type="block">/* Logic is to check whether character at same index of S and w are same
               if same,
                1. Find the consecutive number of occurrences of the char in S (say len1) and w ( say len2)
                2. If len1 == len 2 , move to the next char in S and w
                3. If  len1 &gt;= 3 and len2 &lt; len1, means we can make the char in w stretchy to match len1
                4. else, return false, because it's not possible to stretch the char in w
             */</comment>
            <while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <call><name><name>S</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>j</name> <operator>&lt;</operator> <call><name><name>w</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>char</name></type> <name>ch1</name> <init>= <expr><call><name><name>S</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>char</name></type> <name>ch2</name> <init>= <expr><call><name><name>w</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><name>int</name></type> <name>len1</name> <init>= <expr><call><name>getLen</name><argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>len2</name> <init>= <expr><call><name>getLen</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>ch1</name> <operator>==</operator> <name>ch2</name></expr>)</condition> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>len1</name> <operator>==</operator> <name>len2</name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>i</name> <operator>=</operator> <name>i</name> <operator>+</operator> <name>len1</name></expr>;</expr_stmt>
                        <expr_stmt><expr><name>j</name> <operator>=</operator> <name>j</name> <operator>+</operator> <name>len2</name></expr>;</expr_stmt>
                    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>len1</name> <operator>&gt;=</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name>len2</name> <operator>&lt;</operator> <name>len1</name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>i</name> <operator>=</operator> <name>i</name> <operator>+</operator> <name>len1</name></expr>;</expr_stmt>
                        <expr_stmt><expr><name>j</name> <operator>=</operator> <name>j</name> <operator>+</operator> <name>len2</name></expr>;</expr_stmt>
                    </block_content>}</block></if> <else>else <block>{<block_content>
                        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></while>
            <return>return <expr><name>i</name> <operator>==</operator> <call><name><name>S</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>j</name> <operator>==</operator> <call><name><name>w</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>int</name></type> <name>getLen</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name>i</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>i</name></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <call><name><name>value</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>value</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name><name>value</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <break>break;</break>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></for>
            <return>return <expr><name>count</name></expr>;</return>
        </block_content>}</block></function>
    }</block></class>
}</block></class>
</unit>
