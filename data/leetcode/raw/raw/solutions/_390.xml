<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\raw\solutions\_390.java"><package>package <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>solutions</name></name>;</package>

<class><specifier>public</specifier> class <name>_390</name> <block>{

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution1</name> <block>{
        <comment type="block" format="javadoc">/**
         * credit: https://discuss.leetcode.com/topic/55870/share-my-solutions-for-contest-2 instead of
         * literally removing half of the elements in each scan, this solution is just moving the
         * pointer to point to next start position So brilliant!
         */</comment>
        <function><type><specifier>public</specifier> <name>int</name></type> <name>lastRemaining</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>remaining</name> <init>= <expr><name>n</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>start</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>step</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>forward</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><name>remaining</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>remaining</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>forward</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>start</name> <operator>=</operator> <name>start</name> <operator>+</operator> <name>step</name> <operator>*</operator> <name>remaining</name> <operator>-</operator> <name>step</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><name>start</name> <operator>=</operator> <name>start</name> <operator>-</operator> <name>step</name> <operator>*</operator> <name>remaining</name> <operator>+</operator> <name>step</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
                <expr_stmt><expr><name>step</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>forward</name> <operator>=</operator> <operator>!</operator><name>forward</name></expr>;</expr_stmt>
            </block_content>}</block></while>
            <return>return <expr><name>start</name></expr>;</return>
        </block_content>}</block></function>
    }</block></class>
}</block></class>
</unit>
