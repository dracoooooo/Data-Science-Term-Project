<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\raw\solutions\_1401.java"><package>package <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>solutions</name></name>;</package>

<comment type="block" format="javadoc">/**
 * 1401. Circle and Rectangle Overlapping
 *
 * Given a circle represented as (radius, x_center, y_center) and an axis-aligned rectangle represented as (x1, y1, x2, y2), where (x1, y1) are the coordinates of the bottom-left corner, and (x2, y2) are the coordinates of the top-right corner of the rectangle.
 * Return True if the circle and rectangle are overlapped otherwise return False.
 * In other words, check if there are any point (xi, yi) such that belongs to the circle and the rectangle at the same time.
 *
 * Example 1:
 * Input: radius = 1, x_center = 0, y_center = 0, x1 = 1, y1 = -1, x2 = 3, y2 = 1
 * Output: true
 * Explanation: Circle and rectangle share the point (1,0)
 *
 * Example 2:
 * Input: radius = 1, x_center = 0, y_center = 0, x1 = -1, y1 = 0, x2 = 0, y2 = 1
 * Output: true
 *
 * Example 3:
 * Input: radius = 1, x_center = 1, y_center = 1, x1 = -3, y1 = -3, x2 = 3, y2 = 3
 * Output: true
 *
 * Example 4:
 * Input: radius = 1, x_center = 1, y_center = 1, x1 = 1, y1 = -3, x2 = 2, y2 = -1
 * Output: false
 *
 * Constraints:
 * 1 &lt;= radius &lt;= 2000
 * -10^4 &lt;= x_center, y_center, x1, y1, x2, y2 &lt;= 10^4
 * x1 &lt; x2
 * y1 &lt; y2
 * */</comment>
<class><specifier>public</specifier> class <name>_1401</name> <block>{
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution1</name> <block>{
        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>checkOverlap</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>radius</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>xCenter</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>yCenter</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y2</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>x1</name> <operator>&lt;=</operator> <name>xCenter</name> <operator>&amp;&amp;</operator> <name>x2</name> <operator>&gt;=</operator> <name>xCenter</name> <operator>&amp;&amp;</operator> <name>y1</name> <operator>&lt;=</operator> <name>yCenter</name> <operator>&amp;&amp;</operator> <name>y2</name> <operator>&gt;=</operator> <name>yCenter</name></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>circleDistance</name> <init>= <expr><name>radius</name> <operator>*</operator> <name>radius</name></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name>x1</name></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;=</operator> <name>x2</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name>dist</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>, <argument><expr><name>xCenter</name></expr></argument>, <argument><expr><name>yCenter</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>circleDistance</name></expr>)</condition> <block>{<block_content>
                    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>

            <for>for <control>(<init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name>x1</name></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;=</operator> <name>x2</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name>dist</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y2</name></expr></argument>, <argument><expr><name>xCenter</name></expr></argument>, <argument><expr><name>yCenter</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>circleDistance</name></expr>)</condition> <block>{<block_content>
                    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>

            <for>for <control>(<init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><name>y1</name></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;=</operator> <name>y2</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name>dist</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>xCenter</name></expr></argument>, <argument><expr><name>yCenter</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>circleDistance</name></expr>)</condition> <block>{<block_content>
                    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>

            <for>for <control>(<init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><name>y1</name></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;=</operator> <name>y2</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name>dist</name><argument_list>(<argument><expr><name>x2</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>xCenter</name></expr></argument>, <argument><expr><name>yCenter</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>circleDistance</name></expr>)</condition> <block>{<block_content>
                    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>int</name></type> <name>dist</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y2</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <return>return <expr><operator>(</operator><name>x1</name> <operator>-</operator> <name>x2</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>x1</name> <operator>-</operator> <name>x2</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>y1</name> <operator>-</operator> <name>y2</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>y1</name> <operator>-</operator> <name>y2</name><operator>)</operator></expr>;</return>
        </block_content>}</block></function>
    }</block></class>
}</block></class>
</unit>
