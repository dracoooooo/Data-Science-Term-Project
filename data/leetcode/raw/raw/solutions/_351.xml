<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\raw\solutions\_351.java"><package>package <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>solutions</name></name>;</package>

<class><specifier>public</specifier> class <name>_351</name> <block>{

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution1</name> <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <name><name>int</name><index>[]</index><index>[]</index></name></type> <name>jumps</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name><name>boolean</name><index>[]</index></name></type> <name>visited</name></decl>;</decl_stmt>

        <function><type><specifier>public</specifier> <name>int</name></type> <name>numberOfPatterns</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name>jumps</name> <operator>=</operator> <operator>new</operator> <name><name>int</name><index>[<expr><literal type="number">10</literal></expr>]</index><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>jumps</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>jumps</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>jumps</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name><name>jumps</name><index>[<expr><literal type="number">6</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>jumps</name><index>[<expr><literal type="number">7</literal></expr>]</index><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <name><name>jumps</name><index>[<expr><literal type="number">9</literal></expr>]</index><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>jumps</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name><name>jumps</name><index>[<expr><literal type="number">7</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>jumps</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name><name>jumps</name><index>[<expr><literal type="number">8</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>jumps</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <name><name>jumps</name><index>[<expr><literal type="number">9</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>jumps</name><index>[<expr><literal type="number">9</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>jumps</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>jumps</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name><name>jumps</name><index>[<expr><literal type="number">7</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>visited</name> <operator>=</operator> <operator>new</operator> <name><name>boolean</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>count</name> <operator>+=</operator> <call><name>dfs</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call>
                    <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt><comment type="line">//1,3,7,9 are symmetric, so we only need to use 1 to do it once and then multiply the result by 4</comment>
            <expr_stmt><expr><name>count</name> <operator>+=</operator> <call><name>dfs</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call>
                    <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt><comment type="line">//2,4,6,8 are symmetric, so we only need to use 1 to do it once and then multiply the result by 4</comment>
            <expr_stmt><expr><name>count</name> <operator>+=</operator> <call><name>dfs</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>count</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>int</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <name>m</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>n</name></expr>)</condition> <block>{<block_content>
                <return>return <expr><name>count</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name><name>visited</name><index>[<expr><name>num</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>next</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>next</name> <operator>&lt;=</operator> <literal type="number">9</literal></expr>;</condition> <incr><expr><name>next</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>jump</name> <init>= <expr><name><name>jumps</name><index>[<expr><name>num</name></expr>]</index><index>[<expr><name>next</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>visited</name><index>[<expr><name>next</name></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>jump</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>visited</name><index>[<expr><name>jump</name></expr>]</index></name><operator>)</operator></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>dfs</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
            <expr_stmt><expr><name><name>visited</name><index>[<expr><name>num</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt><comment type="line">//backtracking</comment>
            <return>return <expr><name>count</name></expr>;</return>
        </block_content>}</block></function>
    }</block></class>
}</block></class>
</unit>
