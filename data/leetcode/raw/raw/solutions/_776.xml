<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\raw\solutions\_776.java"><package>package <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>solutions</name></name>;</package>

<import>import <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>common</name><operator>.</operator><name>classes</name><operator>.</operator><name>TreeNode</name></name>;</import>

<class><specifier>public</specifier> class <name>_776</name> <block>{
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution1</name> <block>{
        <comment type="block" format="javadoc">/**
         * credit: https://discuss.leetcode.com/topic/119481/recursive-java-solution
         */</comment>
        <function><type><specifier>public</specifier> <name><name>TreeNode</name><index>[]</index></name></type> <name>splitBST</name><parameter_list>(<parameter><decl><type><name>TreeNode</name></type> <name>root</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>V</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>TreeNode</name></type> <name>small</name> <init>= <expr><operator>new</operator> <call><name>TreeNode</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>TreeNode</name></type> <name>big</name> <init>= <expr><operator>new</operator> <call><name>TreeNode</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>split</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>V</name></expr></argument>, <argument><expr><name>small</name></expr></argument>, <argument><expr><name>big</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><operator>new</operator> <name><name>TreeNode</name><index>[]</index></name><block>{<expr><name><name>small</name><operator>.</operator><name>right</name></name></expr>, <expr><name><name>big</name><operator>.</operator><name>left</name></name></expr>}</block></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>void</name></type> <name>split</name><parameter_list>(<parameter><decl><type><name>TreeNode</name></type> <name>root</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>TreeNode</name></type> <name>small</name></decl></parameter>, <parameter><decl><type><name>TreeNode</name></type> <name>big</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>root</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <return>return;</return>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>root</name><operator>.</operator><name>val</name></name> <operator>&lt;=</operator> <name>v</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>small</name><operator>.</operator><name>right</name></name> <operator>=</operator> <name>root</name></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>TreeNode</name></type> <name>right</name> <init>= <expr><name><name>root</name><operator>.</operator><name>right</name></name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name><name>root</name><operator>.</operator><name>right</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>split</name><argument_list>(<argument><expr><name>right</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>big</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name><name>big</name><operator>.</operator><name>left</name></name> <operator>=</operator> <name>root</name></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>TreeNode</name></type> <name>left</name> <init>= <expr><name><name>root</name><operator>.</operator><name>left</name></name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name><name>root</name><operator>.</operator><name>left</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>split</name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>small</name></expr></argument>, <argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></function>
    }</block></class>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution2</name> <block>{
        <comment type="block" format="javadoc">/**
         * credit: https://leetcode.com/articles/split-bst/
         */</comment>
        <function><type><specifier>public</specifier> <name><name>TreeNode</name><index>[]</index></name></type> <name>splitBST</name><parameter_list>(<parameter><decl><type><name>TreeNode</name></type> <name>root</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>V</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>root</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><operator>new</operator> <name><name>TreeNode</name><index>[]</index></name><block>{<expr><literal type="null">null</literal></expr>, <expr><literal type="null">null</literal></expr>}</block></expr>;</return>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>root</name><operator>.</operator><name>val</name></name> <operator>&lt;=</operator> <name>V</name></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name><name>TreeNode</name><index>[]</index></name></type> <name>result</name> <init>= <expr><call><name>splitBST</name><argument_list>(<argument><expr><name><name>root</name><operator>.</operator><name>right</name></name></expr></argument>, <argument><expr><name>V</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name><name>root</name><operator>.</operator><name>right</name></name> <operator>=</operator> <name><name>result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>root</name></expr>;</expr_stmt>
                <return>return <expr><name>result</name></expr>;</return>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <decl_stmt><decl><type><name><name>TreeNode</name><index>[]</index></name></type> <name>result</name> <init>= <expr><call><name>splitBST</name><argument_list>(<argument><expr><name><name>root</name><operator>.</operator><name>left</name></name></expr></argument>, <argument><expr><name>V</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name><name>root</name><operator>.</operator><name>left</name></name> <operator>=</operator> <name><name>result</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>result</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>root</name></expr>;</expr_stmt>
                <return>return <expr><name>result</name></expr>;</return>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></function>
    }</block></class>
}</block></class>
</unit>
