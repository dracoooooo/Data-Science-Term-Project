<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\raw\solutions\_305.java"><package>package <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>solutions</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<class><specifier>public</specifier> class <name>_305</name> <block>{
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution1</name> <block>{

        <function><type><specifier>public</specifier> <name>int</name></type> <name>find</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>father</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>tf</name> <init>= <expr><name><name>father</name><index>[<expr><name>id</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><name>tf</name> <operator>!=</operator> <name><name>father</name><index>[<expr><name>tf</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>tf</name> <operator>=</operator> <name><name>father</name><index>[<expr><name>tf</name></expr>]</index></name></expr>;</expr_stmt>
            </block_content>}</block></while>
            <decl_stmt><decl><type><name>int</name></type> <name>cur</name> <init>= <expr><name>id</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>tmp</name></decl>;</decl_stmt>
            <while>while <condition>(<expr><name><name>father</name><index>[<expr><name>cur</name></expr>]</index></name> <operator>!=</operator> <name>tf</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>father</name><index>[<expr><name>cur</name></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>father</name><index>[<expr><name>cur</name></expr>]</index></name> <operator>=</operator> <name>tf</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>cur</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
            </block_content>}</block></while>
            <return>return <expr><name>tf</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>union</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>father</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id2</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>tf1</name> <init>= <expr><call><name>find</name><argument_list>(<argument><expr><name>father</name></expr></argument>, <argument><expr><name>id1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>tf2</name> <init>= <expr><call><name>find</name><argument_list>(<argument><expr><name>father</name></expr></argument>, <argument><expr><name>id2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>tf1</name> <operator>!=</operator> <name>tf2</name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>sz</name><index>[<expr><name>tf1</name></expr>]</index></name> <operator>&gt;</operator> <name><name>sz</name><index>[<expr><name>tf2</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name><name>father</name><index>[<expr><name>tf2</name></expr>]</index></name> <operator>=</operator> <name>tf1</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>sz</name><index>[<expr><name>tf1</name></expr>]</index></name> <operator>+=</operator> <name><name>sz</name><index>[<expr><name>tf2</name></expr>]</index></name></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><name><name>father</name><index>[<expr><name>tf1</name></expr>]</index></name> <operator>=</operator> <name>tf2</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>sz</name><index>[<expr><name>tf2</name></expr>]</index></name> <operator>+=</operator> <name><name>sz</name><index>[<expr><name>tf1</name></expr>]</index></name></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></function>

        <function><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>numIslands2</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index><index>[]</index></name></type> <name>positions</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>m</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>res</name> <init>= <expr><operator>new</operator> <call><name>ArrayList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>father</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[<expr><name>m</name> <operator>*</operator> <name>n</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>father</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <expr_stmt><expr><name><name>father</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            </block_content>}</block></for>
            <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>sz</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[<expr><name>m</name> <operator>*</operator> <name>n</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>dr</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>dc</name> <init>= <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>nr</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>nc</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>positions</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <expr_stmt><expr><name>r</name> <operator>=</operator> <name><name>positions</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>positions</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>father</name><index>[<expr><name>r</name> <operator>*</operator> <name>n</name> <operator>+</operator> <name>c</name></expr>]</index></name> <operator>=</operator> <name>r</name> <operator>*</operator> <name>n</name> <operator>+</operator> <name>c</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>sz</name><index>[<expr><name>r</name> <operator>*</operator> <name>n</name> <operator>+</operator> <name>c</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                    <expr_stmt><expr><name>nr</name> <operator>=</operator> <name>r</name> <operator>+</operator> <name><name>dr</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>nc</name> <operator>=</operator> <name>c</name> <operator>+</operator> <name><name>dc</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>nr</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>nr</name> <operator>&lt;</operator> <name>m</name> <operator>&amp;&amp;</operator> <name>nc</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>nc</name> <operator>&lt;</operator> <name>n</name> <operator>&amp;&amp;</operator> <name><name>father</name><index>[<expr><name>nr</name> <operator>*</operator> <name>n</name> <operator>+</operator> <name>nc</name></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><call><name>find</name><argument_list>(<argument><expr><name>father</name></expr></argument>, <argument><expr><name>r</name> <operator>*</operator> <name>n</name> <operator>+</operator> <name>c</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>find</name><argument_list>(<argument><expr><name>father</name></expr></argument>, <argument><expr><name>nr</name> <operator>*</operator> <name>n</name> <operator>+</operator> <name>nc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                            <expr_stmt><expr><name>count</name><operator>--</operator></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name>union</name><argument_list>(<argument><expr><name>father</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>r</name> <operator>*</operator> <name>n</name> <operator>+</operator> <name>c</name></expr></argument>, <argument><expr><name>nr</name> <operator>*</operator> <name>n</name> <operator>+</operator> <name>nc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></for>
                <expr_stmt><expr><call><name><name>res</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <return>return <expr><name>res</name></expr>;</return>
        </block_content>}</block></function>
    }</block></class>
}</block></class>
</unit>
