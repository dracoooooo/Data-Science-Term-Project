<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\raw\solutions\_1138.java"><package>package <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>solutions</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

<class><specifier>public</specifier> class <name>_1138</name> <block>{
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution1</name> <block>{
        <function><type><specifier>public</specifier> <name>String</name></type> <name>alphabetBoardPath</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>target</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>Character</name></argument>, <argument><name><name>int</name><index>[]</index></name></argument>&gt;</argument_list></name></type> <name>map</name> <init>= <expr><call><name>initMap</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>StringBuilder</name></type> <name>sb</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>currPos</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>char</name></type> <name>c</name> <range>: <expr><call><name><name>target</name><operator>.</operator><name>toCharArray</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                <expr_stmt><expr><call><name>moveToDest</name><argument_list>(<argument><expr><name>currPos</name></expr></argument>, <argument><expr><call><name><name>map</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <return>return <expr><call><name><name>sb</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>void</name></type> <name>moveToDest</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>currPos</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>dest</name></decl></parameter>, <parameter><decl><type><name>StringBuilder</name></type> <name>sb</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>currRow</name> <init>= <expr><name><name>currPos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>currCol</name> <init>= <expr><name><name>currPos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>destRow</name> <init>= <expr><name><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>destCol</name> <init>= <expr><name><name>dest</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><name>currRow</name> <operator>!=</operator> <name>destRow</name> <operator>||</operator> <name>currCol</name> <operator>!=</operator> <name>destCol</name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>currRow</name> <operator>&lt;</operator> <name>destRow</name></expr>)</condition> <block>{<block_content>
                    <while>while <condition>(<expr><name>currRow</name> <operator>&lt;</operator> <name>destRow</name></expr>)</condition> <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><name>currCol</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>currRow</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
                            <break>break;</break>
                        </block_content>}</block></if></if_stmt>
                        <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"D"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>currRow</name><operator>++</operator></expr>;</expr_stmt>
                    </block_content>}</block></while>
                    <expr_stmt><expr><name><name>currPos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>currRow</name></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><name>currRow</name> <operator>&gt;</operator> <name>destRow</name></expr>)</condition> <block>{<block_content>
                    <while>while <condition>(<expr><name>currRow</name> <operator>&gt;</operator> <name>destRow</name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"U"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>currRow</name><operator>--</operator></expr>;</expr_stmt>
                    </block_content>}</block></while>
                    <expr_stmt><expr><name><name>currPos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>currRow</name></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><name>currCol</name> <operator>&lt;</operator> <name>destCol</name></expr>)</condition> <block>{<block_content>
                    <while>while <condition>(<expr><name>currCol</name> <operator>&lt;</operator> <name>destCol</name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"R"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>currCol</name><operator>++</operator></expr>;</expr_stmt>
                    </block_content>}</block></while>
                    <expr_stmt><expr><name><name>currPos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>currCol</name></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><name>currCol</name> <operator>&gt;</operator> <name>destCol</name></expr>)</condition> <block>{<block_content>
                    <while>while <condition>(<expr><name>currCol</name> <operator>&gt;</operator> <name>destCol</name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"L"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>currCol</name><operator>--</operator></expr>;</expr_stmt>
                    </block_content>}</block></while>
                    <expr_stmt><expr><name><name>currPos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>currCol</name></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></while>
            <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>Character</name></argument>, <argument><name><name>int</name><index>[]</index></name></argument>&gt;</argument_list></name></type> <name>initMap</name><parameter_list>()</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>Character</name></argument>, <argument><name><name>int</name><index>[]</index></name></argument>&gt;</argument_list></name></type> <name>map</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>row</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>col</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>number</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>char</name></type> <name>c</name> <init>= <expr><literal type="char">'a'</literal></expr></init></decl>;</init> <condition><expr><name>c</name> <operator>&lt;=</operator> <literal type="char">'z'</literal></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr><operator>,</operator> <expr><name>number</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <expr_stmt><expr><name>row</name> <operator>=</operator> <name>number</name> <operator>/</operator> <literal type="number">5</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>col</name> <operator>=</operator> <name>number</name> <operator>%</operator> <literal type="number">5</literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>new</operator> <name><name>int</name><index>[]</index></name><block>{<expr><name>row</name></expr>, <expr><name>col</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <return>return <expr><name>map</name></expr>;</return>
        </block_content>}</block></function>
    }</block></class>
}</block></class>
</unit>
