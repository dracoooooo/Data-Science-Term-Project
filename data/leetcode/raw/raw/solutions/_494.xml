<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\raw\solutions\_494.java"><package>package <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>solutions</name></name>;</package>

<class><specifier>public</specifier> class <name>_494</name> <block>{

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution1</name> <block>{
        <function><type><specifier>public</specifier> <name>int</name></type> <name>findTargetSumWays</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>nums</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>S</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <return>return <expr><call><name>find</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>nums</name></expr></argument>, <argument><expr><name>S</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>int</name></type> <name>find</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>nums</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sum</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name><name>nums</name><operator>.</operator><name>length</name></name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>sum</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <return>return <expr><literal type="number">1</literal></expr>;</return>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <return>return <expr><literal type="number">0</literal></expr>;</return>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><call><name>find</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>nums</name></expr></argument>, <argument><expr><name>sum</name> <operator>+</operator> <name><name>nums</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>find</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>nums</name></expr></argument>, <argument><expr><name>sum</name> <operator>-</operator> <name><name>nums</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

}</block></class></unit>
