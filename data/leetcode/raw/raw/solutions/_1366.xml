<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\raw\solutions\_1366.java"><package>package <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>solutions</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Comparator</name></name>;</import>

<class><specifier>public</specifier> class <name>_1366</name> <block>{
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution1</name> <block>{
        <class>class <name>Node</name> <block>{
            <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>count</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[<expr><literal type="number">26</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>

            <constructor><specifier>public</specifier> <name>Node</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <expr_stmt><expr><name><name>this</name><operator>.</operator><name>c</name></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
            </block_content>}</block></constructor>
        }</block></class>

        <function><type><specifier>public</specifier> <name>String</name></type> <name>rankTeams</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>votes</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name><name>Node</name><index>[]</index></name></type> <name>nodes</name> <init>= <expr><operator>new</operator> <name><name>Node</name><index>[<expr><literal type="number">26</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">26</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <expr_stmt><expr><name><name>nodes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>new</operator> <call><name>Node</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>)</operator> <operator>(</operator><name>i</name> <operator>+</operator> <literal type="char">'A'</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <for>for <control>(<init><decl><type><name>String</name></type> <name>vote</name> <range>: <expr><name>votes</name></expr></range></decl></init>)</control> <block>{<block_content>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>vote</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                    <expr_stmt><expr><name><name>nodes</name><index>[<expr><call><name><name>vote</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="char">'A'</literal></expr>]</index></name><operator>.</operator><name><name>count</name><index>[<expr><name>i</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
                </block_content>}</block></for>
            </block_content>}</block></for>
            <expr_stmt><expr><call><name><name>Arrays</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><name>nodes</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>Node</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
                <function><annotation>@<name>Override</name></annotation>
                <type><specifier>public</specifier> <name>int</name></type> <name>compare</name><parameter_list>(<parameter><decl><type><name>Node</name></type> <name>o1</name></decl></parameter>, <parameter><decl><type><name>Node</name></type> <name>o2</name></decl></parameter>)</parameter_list> <block>{<block_content>
                    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">26</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><name><name>o1</name><operator>.</operator><name>count</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>o2</name><operator>.</operator><name>count</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
                            <return>return <expr><name><name>o2</name><operator>.</operator><name>count</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>o1</name><operator>.</operator><name>count</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></for>
                    <return>return <expr><name><name>o1</name><operator>.</operator><name>c</name></name> <operator>-</operator> <name><name>o2</name><operator>.</operator><name>c</name></name></expr>;</return>
                </block_content>}</block></function>
            }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>StringBuilder</name></type> <name>sb</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>votes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name><name>nodes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <return>return <expr><call><name><name>sb</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></function>

    }</block></class>
}</block></class>
</unit>
