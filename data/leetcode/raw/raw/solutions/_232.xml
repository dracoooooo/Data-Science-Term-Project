<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\raw\solutions\_232.java"><package>package <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>solutions</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Stack</name></name>;</import>

<class><specifier>public</specifier> class <name>_232</name> <block>{

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution1</name> <block>{
        <class>class <name>MyQueue</name> <block>{

            <decl_stmt><decl><type><name><name>Stack</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>input</name> <init>= <expr><operator>new</operator> <call><name>Stack</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>Stack</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>output</name> <init>= <expr><operator>new</operator> <call><name>Stack</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line">// Push element x to the back of queue.</comment>
            <function><type><specifier>public</specifier> <name>void</name></type> <name>push</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <expr_stmt><expr><call><name><name>input</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></function>

            <comment type="line">// Removes the element from in front of queue.</comment>
            <function><type><specifier>public</specifier> <name>int</name></type> <name>pop</name><parameter_list>()</parameter_list> <block>{<block_content>
                <expr_stmt><expr><call><name>peek</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><call><name><name>output</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</return>
            </block_content>}</block></function>

            <comment type="line">// Get the front element.</comment>
            <function><type><specifier>public</specifier> <name>int</name></type> <name>peek</name><parameter_list>()</parameter_list> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>output</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <while>while <condition>(<expr><operator>!</operator><call><name><name>input</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>output</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><call><name><name>input</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></while>
                </block_content>}</block></if></if_stmt>
                <return>return <expr><call><name><name>output</name><operator>.</operator><name>peek</name></name><argument_list>()</argument_list></call></expr>;</return>
            </block_content>}</block></function>

            <comment type="line">// Return whether the queue is empty.</comment>
            <function><type><specifier>public</specifier> <name>boolean</name></type> <name>empty</name><parameter_list>()</parameter_list> <block>{<block_content>
                <return>return <expr><call><name><name>input</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>output</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>;</return>
            </block_content>}</block></function>
        }</block></class>
    }</block></class>
}</block></class>

</unit>
