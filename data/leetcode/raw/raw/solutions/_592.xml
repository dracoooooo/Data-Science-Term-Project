<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\raw\solutions\_592.java"><package>package <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>solutions</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<class><specifier>public</specifier> class <name>_592</name> <block>{

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution1</name> <block>{

        <comment type="block" format="javadoc">/**
         * Credit: https://discuss.leetcode.com/topic/89993/java-solution-fraction-addition-and-gcd
         */</comment>
        <function><type><specifier>public</specifier> <name>String</name></type> <name>fractionAddition</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>expression</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>nums</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><name>j</name> <operator>&lt;=</operator> <call><name><name>expression</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>j</name> <operator>==</operator> <call><name><name>expression</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>||</operator> <name>j</name> <operator>!=</operator> <name>i</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name><name>expression</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'-'</literal> <operator>||</operator> <call><name><name>expression</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'+'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><call><name><name>expression</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'+'</literal></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>nums</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>expression</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if> <else>else <block>{<block_content>
                        <expr_stmt><expr><call><name><name>nums</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>expression</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></else></if_stmt>
                    <expr_stmt><expr><name>i</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
            </block_content>}</block></while>

            <decl_stmt><decl><type><name>String</name></type> <name>result</name> <init>= <expr><literal type="string">"0/1"</literal></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>String</name></type> <name>frac</name> <range>: <expr><name>nums</name></expr></range></decl></init>)</control> <block>{<block_content>
                <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>add</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>frac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <return>return <expr><name>result</name></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>String</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>result</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>frac</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>frac1</name> <init>= <expr><call><name><name>frac</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>frac2</name> <init>= <expr><call><name><name>result</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>n1</name> <init>= <expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><name><name>frac1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>d1</name> <init>= <expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><name><name>frac1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>n2</name> <init>= <expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><name><name>frac2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>d2</name> <init>= <expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><name><name>frac2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>numerator</name> <init>= <expr><name>n1</name> <operator>*</operator> <name>d2</name> <operator>+</operator> <name>n2</name> <operator>*</operator> <name>d1</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>denominator</name> <init>= <expr><name>d1</name> <operator>*</operator> <name>d2</name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>numerator</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="string">"0/1"</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <decl_stmt><decl><type><name>boolean</name></type> <name>negative</name> <init>= <expr><name>numerator</name> <operator>*</operator> <name>denominator</name> <operator>&lt;</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>numerator</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>abs</name></name><argument_list>(<argument><expr><name>numerator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>denominator</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>abs</name></name><argument_list>(<argument><expr><name>denominator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>gcd</name> <init>= <expr><call><name>getGCD</name><argument_list>(<argument><expr><name>numerator</name></expr></argument>, <argument><expr><name>denominator</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <return>return <expr><operator>(</operator><ternary><condition><expr><name>negative</name></expr> ?</condition><then> <expr><literal type="string">"-"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator> <operator>+</operator> <operator>(</operator><name>numerator</name> <operator>/</operator> <name>gcd</name><operator>)</operator> <operator>+</operator> <literal type="string">"/"</literal> <operator>+</operator> <operator>(</operator><name>denominator</name> <operator>/</operator> <name>gcd</name><operator>)</operator></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>int</name></type> <name>getGCD</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>a</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>b</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><name>a</name> <operator>+</operator> <name>b</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><call><name>getGCD</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>a</name> <operator>%</operator> <name>b</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>
    }</block></class>

}</block></class>
</unit>
