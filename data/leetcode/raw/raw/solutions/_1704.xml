<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\raw\solutions\_1704.java"><package>package <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>solutions</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>stream</name><operator>.</operator><name>IntStream</name></name>;</import>

<class><specifier>public</specifier> class <name>_1704</name> <block>{
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution1</name> <block>{
        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>halvesAreAlike</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Character</name></argument>&gt;</argument_list></name></type> <name>vowels</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><literal type="char">'a'</literal></expr></argument>, <argument><expr><literal type="char">'e'</literal></expr></argument>, <argument><expr><literal type="char">'i'</literal></expr></argument>, <argument><expr><literal type="char">'o'</literal></expr></argument>, <argument><expr><literal type="char">'u'</literal></expr></argument>, <argument><expr><literal type="char">'A'</literal></expr></argument>, <argument><expr><literal type="char">'E'</literal></expr></argument>, <argument><expr><literal type="char">'I'</literal></expr></argument>, <argument><expr><literal type="char">'O'</literal></expr></argument>, <argument><expr><literal type="char">'U'</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>firstHalfVowelsCount</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name><name>IntStream</name><operator>.</operator><name>range</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>s</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>i</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>vowels</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call><operator>.</operator><call><name>count</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>secondHalfVowelsCount</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name><name>IntStream</name><operator>.</operator><name>range</name></name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><call><name><name>s</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>i</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>vowels</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call><operator>.</operator><call><name>count</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><name>firstHalfVowelsCount</name> <operator>==</operator> <name>secondHalfVowelsCount</name></expr>;</return>
        </block_content>}</block></function>
    }</block></class>
}</block></class>
</unit>
