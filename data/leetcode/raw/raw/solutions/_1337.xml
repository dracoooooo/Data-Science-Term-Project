<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\raw\solutions\_1337.java"><package>package <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>solutions</name></name>;</package>

<comment type="block" format="javadoc">/**
 * 1337. Remove Palindromic Subsequences
 *
 * Given a string s consisting only of letters 'a' and 'b'. In a single step you can remove one palindromic subsequence from s.
 * Return the minimum number of steps to make the given string empty.
 * A string is a subsequence of a given string, if it is generated by deleting some characters of a given string without changing its order.
 * A string is called palindrome if is one that reads the same backward as well as forward.
 *
 * Example 1:
 * Input: s = "ababa"
 * Output: 1
 * Explanation: String is already palindrome
 *
 * Example 2:
 * Input: s = "abb"
 * Output: 2
 * Explanation: "abb" -&gt; "bb" -&gt; "".
 * Remove palindromic subsequence "a" then "bb".
 *
 * Example 3:
 * Input: s = "baabb"
 * Output: 2
 * Explanation: "baabb" -&gt; "b" -&gt; "".
 * Remove palindromic subsequence "baab" then "b".
 *
 * Example 4:
 * Input: s = ""
 * Output: 0
 *
 * Constraints:
 * 0 &lt;= s.length &lt;= 1000
 * s only consists of letters 'a' and 'b'
 * */</comment>
<class><specifier>public</specifier> class <name>_1337</name> <block>{
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution1</name> <block>{
        <function><type><specifier>public</specifier> <name>int</name></type> <name>removePalindromeSub</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>s</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="number">0</literal></expr>;</return>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <decl_stmt><decl><type><name>String</name></type> <name>reverse</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>reverse</name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>s</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>reverse</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <return>return <expr><literal type="number">1</literal></expr>;</return>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <return>return <expr><literal type="number">2</literal></expr>;</return>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></function>
    }</block></class>
}</block></class>
</unit>
