<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\raw\solutions\_716.java"><package>package <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>solutions</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Iterator</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Stack</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>TreeMap</name></name>;</import>

<class><specifier>public</specifier> class <name>_716</name> <block>{
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution1</name> <block>{
        <comment type="block" format="javadoc">/**
         * This is O(n) for popMax() and pop() while O(1) for the other three operations which is UN-acceptable during an interview!
         * We need to do better than O(n) time complexity in order to ace the interview!
         * But O(1) is impossible, so let's aim for O(logn).
         */</comment>
        <class><specifier>public</specifier> <specifier>static</specifier> class <name>MaxStack</name> <block>{

            <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>max</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>private</specifier> <name><name>Stack</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>stack</name></decl>;</decl_stmt>

            <comment type="block" format="javadoc">/**
             * initialize your data structure here.
             */</comment>
            <constructor><specifier>public</specifier> <name>MaxStack</name><parameter_list>()</parameter_list> <block>{<block_content>
                <expr_stmt><expr><name>max</name> <operator>=</operator> <name><name>Integer</name><operator>.</operator><name>MIN_VALUE</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>stack</name> <operator>=</operator> <operator>new</operator> <call><name><name>Stack</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></constructor>

            <function><type><specifier>public</specifier> <name>void</name></type> <name>push</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>x</name> <operator>&gt;</operator> <name>max</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>max</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name><name>stack</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></function>

            <function><type><specifier>public</specifier> <name>int</name></type> <name>pop</name><parameter_list>()</parameter_list> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name><name>stack</name><operator>.</operator><name>peek</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>max</name></expr>)</condition> <block>{<block_content>
                    <decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><call><name><name>stack</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name>max</name> <operator>=</operator> <call><name>findMax</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr><name>result</name></expr>;</return>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <return>return <expr><call><name><name>stack</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</return>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></function>

            <function><type><specifier>private</specifier> <name>int</name></type> <name>findMax</name><parameter_list>()</parameter_list> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>stack</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <decl_stmt><decl><type><name><name>Iterator</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>iterator</name> <init>= <expr><call><name><name>stack</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>max</name> <init>= <expr><call><name><name>stack</name><operator>.</operator><name>peek</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <while>while <condition>(<expr><call><name><name>iterator</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>max</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name>max</name></expr></argument>, <argument><expr><call><name><name>iterator</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></while>
                    <return>return <expr><name>max</name></expr>;</return>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><name>max</name> <operator>=</operator> <name><name>Integer</name><operator>.</operator><name>MIN_VALUE</name></name></expr>;</expr_stmt>
                    <return>return <expr><name>max</name></expr>;</return>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></function>

            <function><type><specifier>public</specifier> <name>int</name></type> <name>top</name><parameter_list>()</parameter_list> <block>{<block_content>
                <return>return <expr><call><name><name>stack</name><operator>.</operator><name>peek</name></name><argument_list>()</argument_list></call></expr>;</return>
            </block_content>}</block></function>

            <function><type><specifier>public</specifier> <name>int</name></type> <name>peekMax</name><parameter_list>()</parameter_list> <block>{<block_content>
                <return>return <expr><name>max</name></expr>;</return>
            </block_content>}</block></function>

            <function><type><specifier>public</specifier> <name>int</name></type> <name>popMax</name><parameter_list>()</parameter_list> <block>{<block_content>
                <decl_stmt><decl><type><name><name>Stack</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>tmp</name> <init>= <expr><operator>new</operator> <call><name><name>Stack</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                <while>while <condition>(<expr><operator>!</operator><call><name><name>stack</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><call><name><name>stack</name><operator>.</operator><name>peek</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name>max</name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>tmp</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><call><name><name>stack</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if> <else>else <block>{<block_content>
                        <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>stack</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <break>break;</break>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></while>
                <while>while <condition>(<expr><operator>!</operator><call><name><name>tmp</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>stack</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><call><name><name>tmp</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></while>
                <expr_stmt><expr><name>max</name> <operator>=</operator> <call><name>findMax</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>result</name></expr>;</return>
            </block_content>}</block></function>
        }</block></class>
    }</block></class>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution2</name> <block>{
        <comment type="block" format="javadoc">/**
         * Use a treemap and a doubly linked list to achieve O(logn) time complexity.
         */</comment>

        <class><specifier>static</specifier> class <name>Node</name> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>val</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Node</name></type> <name>prev</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Node</name></type> <name>next</name></decl>;</decl_stmt>

            <constructor><specifier>public</specifier> <name>Node</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <expr_stmt><expr><name><name>this</name><operator>.</operator><name>val</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
            </block_content>}</block></constructor>
        }</block></class>

        <class><specifier>static</specifier> class <name>DoublyLinkedList</name> <block>{
            <decl_stmt><decl><type><name>Node</name></type> <name>head</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Node</name></type> <name>tail</name></decl>;</decl_stmt>

            <constructor><specifier>public</specifier> <name>DoublyLinkedList</name><parameter_list>()</parameter_list> <block>{<block_content>
                <expr_stmt><expr><name>head</name> <operator>=</operator> <operator>new</operator> <call><name>Node</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>tail</name> <operator>=</operator> <operator>new</operator> <call><name>Node</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>head</name><operator>.</operator><name>next</name></name> <operator>=</operator> <name>tail</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>tail</name><operator>.</operator><name>prev</name></name> <operator>=</operator> <name>head</name></expr>;</expr_stmt>
            </block_content>}</block></constructor>

            <function><type><specifier>public</specifier> <name>Node</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <comment type="block" format="javadoc">/**For this doubly linked list, we always add it to the end of the list*/</comment>
                <decl_stmt><decl><type><name>Node</name></type> <name>x</name> <init>= <expr><operator>new</operator> <call><name>Node</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name><name>x</name><operator>.</operator><name>next</name></name> <operator>=</operator> <name>tail</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>x</name><operator>.</operator><name>prev</name></name> <operator>=</operator> <name><name>tail</name><operator>.</operator><name>prev</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>tail</name><operator>.</operator><name>prev</name><operator>.</operator><name>next</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>tail</name><operator>.</operator><name>prev</name></name> <operator>=</operator> <name><name>tail</name><operator>.</operator><name>prev</name><operator>.</operator><name>next</name></name></expr>;</expr_stmt>
                <return>return <expr><name>x</name></expr>;</return>
            </block_content>}</block></function>

            <function><type><specifier>public</specifier> <name>int</name></type> <name>pop</name><parameter_list>()</parameter_list> <block>{<block_content>
                <comment type="block" format="javadoc">/**for pop(), we always pop one from the tail of the doubly linked list*/</comment>
                <return>return <expr><call><name>unlink</name><argument_list>(<argument><expr><name><name>tail</name><operator>.</operator><name>prev</name></name></expr></argument>)</argument_list></call><operator>.</operator><name>val</name></expr>;</return>
            </block_content>}</block></function>

            <function><type><specifier>public</specifier> <name>Node</name></type> <name>unlink</name><parameter_list>(<parameter><decl><type><name>Node</name></type> <name>node</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <expr_stmt><expr><name><name>node</name><operator>.</operator><name>prev</name><operator>.</operator><name>next</name></name> <operator>=</operator> <name><name>node</name><operator>.</operator><name>next</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>node</name><operator>.</operator><name>next</name><operator>.</operator><name>prev</name></name> <operator>=</operator> <name><name>node</name><operator>.</operator><name>prev</name></name></expr>;</expr_stmt>
                <return>return <expr><name>node</name></expr>;</return>
            </block_content>}</block></function>

            <function><type><specifier>public</specifier> <name>int</name></type> <name>peek</name><parameter_list>()</parameter_list> <block>{<block_content>
                <return>return <expr><name><name>tail</name><operator>.</operator><name>prev</name><operator>.</operator><name>val</name></name></expr>;</return>
            </block_content>}</block></function>
        }</block></class>

        <class><specifier>public</specifier> <specifier>static</specifier> class <name>MaxStack</name> <block>{
            <decl_stmt><decl><type><name><name>TreeMap</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>Node</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>treeMap</name></decl>;</decl_stmt>
            <comment type="block" format="javadoc">/**
             * the reason we have a list of nodes as treemap's value is because one value could be pushed
             * multiple times into this MaxStack and we want to keep track of all of them.
             */</comment>
            <decl_stmt><decl><type><name>DoublyLinkedList</name></type> <name>doublyLinkedList</name></decl>;</decl_stmt>

            <comment type="block" format="javadoc">/**
             * initialize your data structure here.
             */</comment>
            <constructor><specifier>public</specifier> <name>MaxStack</name><parameter_list>()</parameter_list> <block>{<block_content>
                <expr_stmt><expr><name>treeMap</name> <operator>=</operator> <operator>new</operator> <call><name>TreeMap</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>doublyLinkedList</name> <operator>=</operator> <operator>new</operator> <call><name>DoublyLinkedList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></constructor>

            <function><type><specifier>public</specifier> <name>void</name></type> <name>push</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <decl_stmt><decl><type><name>Node</name></type> <name>node</name> <init>= <expr><call><name><name>doublyLinkedList</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>treeMap</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>treeMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name><name>treeMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>add</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></function>

            <function><type><specifier>public</specifier> <name>int</name></type> <name>pop</name><parameter_list>()</parameter_list> <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><call><name><name>doublyLinkedList</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Node</name></argument>&gt;</argument_list></name></type> <name>nodes</name> <init>= <expr><call><name><name>treeMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>nodes</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><call><name><name>nodes</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>nodes</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>treeMap</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <return>return <expr><name>val</name></expr>;</return>
            </block_content>}</block></function>

            <function><type><specifier>public</specifier> <name>int</name></type> <name>top</name><parameter_list>()</parameter_list> <block>{<block_content>
                <return>return <expr><call><name><name>doublyLinkedList</name><operator>.</operator><name>peek</name></name><argument_list>()</argument_list></call></expr>;</return>
            </block_content>}</block></function>

            <function><type><specifier>public</specifier> <name>int</name></type> <name>peekMax</name><parameter_list>()</parameter_list> <block>{<block_content>
                <return>return <expr><call><name><name>treeMap</name><operator>.</operator><name>lastKey</name></name><argument_list>()</argument_list></call></expr>;</return>
            </block_content>}</block></function>

            <function><type><specifier>public</specifier> <name>int</name></type> <name>popMax</name><parameter_list>()</parameter_list> <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>max</name> <init>= <expr><call><name><name>treeMap</name><operator>.</operator><name>lastKey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Node</name></argument>&gt;</argument_list></name></type> <name>nodes</name> <init>= <expr><call><name><name>treeMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>max</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Node</name></type> <name>node</name> <init>= <expr><call><name><name>nodes</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><call><name><name>nodes</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>doublyLinkedList</name><operator>.</operator><name>unlink</name></name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>nodes</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>treeMap</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <return>return <expr><name>max</name></expr>;</return>
            </block_content>}</block></function>
        }</block></class>
    }</block></class>
}</block></class>
</unit>
