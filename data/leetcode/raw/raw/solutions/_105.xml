<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\raw\solutions\_105.java"><package>package <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>solutions</name></name>;</package>

<import>import <name><name>com</name><operator>.</operator><name>fishercoder</name><operator>.</operator><name>common</name><operator>.</operator><name>classes</name><operator>.</operator><name>TreeNode</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

<class><specifier>public</specifier> class <name>_105</name> <block>{

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Solution1</name> <block>{
        <comment type="block" format="javadoc">/**
         * credit: https://discuss.leetcode.com/topic/29838/5ms-java-clean-solution-with-caching use
         * HashMap as the cache so that accessing inorder index becomes O(1) time Note: The first
         * element of preorder array is the root!
         */</comment>
        <function><type><specifier>public</specifier> <name>TreeNode</name></type> <name>buildTree</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>preorder</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>inorder</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>inorderMap</name> <init>= <expr><operator>new</operator> <call><name>HashMap</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>inorder</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <expr_stmt><expr><call><name><name>inorderMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>inorder</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>

            <comment type="block" format="javadoc">/**At the beginning, both start from 0 to nums.length-1*/</comment>
            <return>return <expr><call><name>buildTree</name><argument_list>(<argument><expr><name>preorder</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>preorder</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>inorderMap</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>inorder</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></function>

        <function><type><specifier>private</specifier> <name>TreeNode</name></type> <name>buildTree</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>preorder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>preStart</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>preEnd</name></decl></parameter>,
                                   <parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>inorderMap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>inStart</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>inEnd</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>preStart</name> <operator>&gt;</operator> <name>preEnd</name> <operator>||</operator> <name>inStart</name> <operator>&gt;</operator> <name>inEnd</name></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="null">null</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <decl_stmt><decl><type><name>TreeNode</name></type> <name>root</name> <init>= <expr><operator>new</operator> <call><name>TreeNode</name><argument_list>(<argument><expr><name><name>preorder</name><index>[<expr><name>preStart</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>inRoot</name> <init>= <expr><call><name><name>inorderMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>preorder</name><index>[<expr><name>preStart</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>numsLeft</name> <init>= <expr><name>inRoot</name> <operator>-</operator> <name>inStart</name></expr></init></decl>;</decl_stmt>

            <comment type="block" format="javadoc">/**It's easy to understand and remember:
             * for the indices of inorder array:
             * root.left should be inStart and inRoot-1 as new start and end indices
             * root.right should be inRoot+1 and inEnd as new start and end indices
             *
             * since inRoot is being used already in this recursion call, that's why we use inRoot-1 and inRoot+1
             * this part is the same for both Leetcode 105 and Leetcode 106.*/</comment>
            <expr_stmt><expr><name><name>root</name><operator>.</operator><name>left</name></name> <operator>=</operator> <call><name>buildTree</name><argument_list>(<argument><expr><name>preorder</name></expr></argument>, <argument><expr><name>preStart</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>preStart</name> <operator>+</operator> <name>numsLeft</name></expr></argument>, <argument><expr><name>inorderMap</name></expr></argument>, <argument><expr><name>inStart</name></expr></argument>, <argument><expr><name>inRoot</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>root</name><operator>.</operator><name>right</name></name> <operator>=</operator> <call><name>buildTree</name><argument_list>(<argument><expr><name>preorder</name></expr></argument>, <argument><expr><name>preStart</name> <operator>+</operator> <name>numsLeft</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>preEnd</name></expr></argument>, <argument><expr><name>inorderMap</name></expr></argument>, <argument><expr><name>inRoot</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>inEnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>root</name></expr>;</return>
        </block_content>}</block></function>
    }</block></class>
}</block></class>
</unit>
