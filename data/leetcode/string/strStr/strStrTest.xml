<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\string\strStr\strStrTest.java"><package>package <name>strStr</name>;</package>

<import>import <name><name>com</name><operator>.</operator><name>sun</name><operator>.</operator><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>xpath</name><operator>.</operator><name>internal</name><operator>.</operator><name>operations</name><operator>.</operator><name>Equals</name></name>;</import>

<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>*</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Created by leicao on 2/10/15.
 */</comment>
<class><specifier>public</specifier> class <name>strStrTest</name> <block>{

    <function><annotation>@<name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Test</name></name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testStrStr</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name>strStr</name></type> <name>strStr</name> <init>= <expr><operator>new</operator> <call><name>strStr</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>String</name><index>[]</index><index>[]</index></name></type>  <name>inputs</name> <init>= <expr><block>{
            <expr><block>{<expr><literal type="string">"I am the haystack!"</literal></expr>,<expr><literal type="string">"haystack!"</literal></expr>}</block></expr>,
            <expr><block>{<expr><literal type="string">"I am the haystack!"</literal></expr>,<expr><literal type="string">"haytack"</literal></expr>}</block></expr>,
        }</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>outputs</name> <init>= <expr><block>{<expr><literal type="number">9</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>inputs</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>outputs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><call><name><name>strStr</name><operator>.</operator><name>strStr</name></name><argument_list>(<argument><expr><name><name>inputs</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>inputs</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>
}</block></class></unit>
