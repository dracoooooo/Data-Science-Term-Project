<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\string\string\MinimumAddtoMakeParenthesesValid.java"><package>package <name>string</name>;</package>

<comment type="block" format="javadoc">/**
 * Created by gouthamvidyapradhan on 20/08/2019 Given a string S of '(' and ')' parentheses, we add
 * the minimum number of parentheses ( '(' or ')', and in any positions ) so that the resulting
 * parentheses string is valid.
 *
 * &lt;p&gt;Formally, a parentheses string is valid if and only if:
 *
 * &lt;p&gt;It is the empty string, or It can be written as AB (A concatenated with B), where A and B are
 * valid strings, or It can be written as (A), where A is a valid string. Given a parentheses
 * string, return the minimum number of parentheses we must add to make the resulting string valid.
 *
 * &lt;p&gt;Example 1:
 *
 * &lt;p&gt;Input: "())" Output: 1 Example 2:
 *
 * &lt;p&gt;Input: "(((" Output: 3 Example 3:
 *
 * &lt;p&gt;Input: "()" Output: 0 Example 4:
 *
 * &lt;p&gt;Input: "()))((" Output: 4
 *
 * &lt;p&gt;Note:
 *
 * &lt;p&gt;S.length &lt;= 1000 S only consists of '(' and ')' characters.
 *
 * &lt;p&gt;Solution O(N) Keep track of count of open parentheses, when ever a closed parentheses appear
 * if the count of open parentheses is greater than 0 then decrement this value (identifying that
 * there is a matching parentheses already), if the count is 0 then there is a miss match with
 * parentheses and hence add one to the result. The final answer is the total of result + open
 * parentheses
 */</comment>
<class><specifier>public</specifier> class <name>MinimumAddtoMakeParenthesesValid</name> <block>{
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>MinimumAddtoMakeParenthesesValid</name><argument_list>()</argument_list></call><operator>.</operator><call><name>minAddToMakeValid</name><argument_list>(<argument><expr><literal type="string">"()))(("</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>int</name></type> <name>minAddToMakeValid</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>S</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>open</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>char</name></type> <name>c</name> <range>: <expr><call><name><name>S</name><operator>.</operator><name>toCharArray</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'('</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>open</name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">')'</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>open</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>open</name><operator>--</operator></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>result</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>result</name> <operator>+</operator> <name>open</name></expr>;</return>
  </block_content>}</block></function>
}</block></class>
</unit>
