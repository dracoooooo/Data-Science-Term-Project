<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\string\string\StampingTheSequence.java"><package>package <name>string</name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>stream</name><operator>.</operator><name>Collectors</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Created by gouthamvidyapradhan on 12/10/2019 You want to form a target string of lowercase
 * letters.
 *
 * &lt;p&gt;At the beginning, your sequence is target.length '?' marks. You also have a stamp of lowercase
 * letters.
 *
 * &lt;p&gt;On each turn, you may place the stamp over the sequence, and replace every letter in the
 * sequence with the corresponding letter from the stamp. You can make up to 10 * target.length
 * turns.
 *
 * &lt;p&gt;For example, if the initial sequence is "?????", and your stamp is "abc", then you may make
 * "abc??", "?abc?", "??abc" in the first turn. (Note that the stamp must be fully contained in the
 * boundaries of the sequence in order to stamp.)
 *
 * &lt;p&gt;If the sequence is possible to stamp, then return an array of the index of the left-most
 * letter being stamped at each turn. If the sequence is not possible to stamp, return an empty
 * array.
 *
 * &lt;p&gt;For example, if the sequence is "ababc", and the stamp is "abc", then we could return the
 * answer [0, 2], corresponding to the moves "?????" -&gt; "abc??" -&gt; "ababc".
 *
 * &lt;p&gt;Also, if the sequence is possible to stamp, it is guaranteed it is possible to stamp within 10
 * * target.length moves. Any answers specifying more than this number of moves will not be
 * accepted.
 *
 * &lt;p&gt;Example 1:
 *
 * &lt;p&gt;Input: stamp = "abc", target = "ababc" Output: [0,2] ([1,0,2] would also be accepted as an
 * answer, as well as some other answers.) Example 2:
 *
 * &lt;p&gt;Input: stamp = "abca", target = "aabcaca" Output: [3,0,1]
 *
 * &lt;p&gt;Note:
 *
 * &lt;p&gt;1 &lt;= stamp.length &lt;= target.length &lt;= 1000 stamp and target only contain lowercase letters.
 *
 * &lt;p&gt;Solution: O(N ^ 2) General idea is to work the answer in the reverse order. For example if the
 * target string is 'aaabb' and stamp is 'aabb' then first stamp would be at 0 resulting in aabb?
 * and the next stamp would be at 1 resulting in 'aaabb' Consider each window of size = stamp.size
 * from index 0 (call this window at index i). For every window keep track of matched indices and
 * unmatched indices. Also, additionally Maintain a general-matched-index set containing all the
 * indices that are already matched. For every window, if all the characters at each index of stamp
 * sequence and target sequence match then add the window index to the answer also additionally
 * revisit every widow index that have been previously visited in starting from i - 1 to 0 and
 * verify if any window contains all the matched indices this can be checked by verifying the
 * unmatched set at each widow to general-matched-index - if any of the window satisfy this
 * condition then add this window index to the answer. Return the answer in the reverse order.
 */</comment>
<class><specifier>public</specifier> class <name>StampingTheSequence</name> <block>{
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>ans</name> <init>= <expr><operator>new</operator> <call><name>StampingTheSequence</name><argument_list>()</argument_list></call><operator>.</operator><call><name>movesToStamp</name><argument_list>(<argument><expr><literal type="string">"abca"</literal></expr></argument>, <argument><expr><literal type="string">"aaaaaaaaabcaaca"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>a</name> <range>: <expr><name>ans</name></expr></range></decl></init>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>print</name></name><argument_list>(<argument><expr><name>a</name> <operator>+</operator> <literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
  </block_content>}</block></function>

  <class><specifier>private</specifier> class <name>Window</name> <block>{
    <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>matched</name></decl>, <decl><type ref="prev"/><name>unmatched</name></decl>;</decl_stmt>

    <constructor><name>Window</name><parameter_list>(<parameter><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>matched</name></decl></parameter>, <parameter><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>unmatched</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>matched</name></name> <operator>=</operator> <name>matched</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>unmatched</name></name> <operator>=</operator> <name>unmatched</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>
  }</block></class>

  <function><type><specifier>public</specifier> <name><name>int</name><index>[]</index></name></type> <name>movesToStamp</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>stamp</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>target</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Window</name></argument>&gt;</argument_list></name></type> <name>windows</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>matchedTarget</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>Stack</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>answer</name> <init>= <expr><operator>new</operator> <call><name><name>Stack</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <call><name><name>target</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>-</operator> <call><name><name>stamp</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>Window</name></type> <name>current</name> <init>= <expr><operator>new</operator> <call><name>Window</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>i</name></expr></init></decl>, <decl><type ref="prev"/><name>s</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <operator>(</operator><name>i</name> <operator>+</operator> <call><name><name>stamp</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call><operator>)</operator></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr><operator>,</operator> <expr><name>s</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>stamp</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name><name>target</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>matchedTarget</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>current</name><operator>.</operator><name>matched</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>current</name><operator>.</operator><name>unmatched</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
      </block_content>}</block></for>
      <if_stmt><if>if <condition>(<expr><call><name><name>current</name><operator>.</operator><name>unmatched</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>answer</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>matchedTarget</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><name><name>current</name><operator>.</operator><name>matched</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><call><name><name>windows</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>k</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>windows</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call><operator>.</operator><call><name><name>unmatched</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>newUnmatched</name> <init>=
                <expr><call><name><name>windows</name>
                    <operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call>
                    <operator>.</operator><call><name><name>unmatched</name>
                    <operator>.</operator><name>stream</name></name><argument_list>()</argument_list></call>
                    <operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>u</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><operator>!</operator><call><name><name>matchedTarget</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call>
                    <operator>.</operator><call><name>collect</name><argument_list>(<argument><expr><call><name><name>Collectors</name><operator>.</operator><name>toSet</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>windows</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call><operator>.</operator><name>unmatched</name> <operator>=</operator> <name>newUnmatched</name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>newUnmatched</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
              <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>newMatched</name> <init>=
                  <expr><call><name><name>windows</name>
                      <operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call>
                      <operator>.</operator><call><name><name>matched</name>
                      <operator>.</operator><name>stream</name></name><argument_list>()</argument_list></call>
                      <operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>m</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><operator>!</operator><call><name><name>matchedTarget</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call>
                      <operator>.</operator><call><name>collect</name><argument_list>(<argument><expr><call><name><name>Collectors</name><operator>.</operator><name>toSet</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
              <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>newMatched</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>answer</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>matchedTarget</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><name>newMatched</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
          </block_content>}</block></if> <else>else<block type="pseudo"><block_content> <break>break;</break></block_content></block></else></if_stmt>
        </block_content>}</block></for>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name><name>windows</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>current</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <if_stmt><if>if <condition>(<expr><call><name><name>matchedTarget</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>target</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>finalAns</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[<expr><call><name><name>answer</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <while>while <condition>(<expr><operator>!</operator><call><name><name>answer</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>finalAns</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name><name>answer</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></while>
      <return>return <expr><name>finalAns</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><operator>new</operator> <name><name>int</name><index>[]</index></name> <block>{}</block></expr>;</return>
  </block_content>}</block></function>
}</block></class>
</unit>
