<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\string\string\CompareVersionNumbers.java"><package>package <name>string</name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>StringTokenizer</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Created by pradhang on 7/11/2017. Compare two version numbers version1 and version2. If version1
 * &gt; version2 return 1, if version1 &lt; version2 return -1, otherwise return 0.
 *
 * &lt;p&gt;You may assume that the version strings are non-empty and contain only digits and the .
 * character. The . character does not represent a decimal point and is used to separate number
 * sequences. For instance, 2.5 is not "two and a half" or "half way to version three", it is the
 * fifth second-level revision of the second first-level revision.
 *
 * &lt;p&gt;Here is an example of version numbers ordering:
 *
 * &lt;p&gt;0.1 &lt; 1.1 &lt; 1.2 &lt; 13.37
 */</comment>
<class><specifier>public</specifier> class <name>CompareVersionNumbers</name> <block>{
  <comment type="block" format="javadoc">/**
   * Main method
   *
   * @param args
   * @throws Exception
   */</comment>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>CompareVersionNumbers</name><argument_list>()</argument_list></call><operator>.</operator><call><name>compareVersion</name><argument_list>(<argument><expr><literal type="string">"1.11.1"</literal></expr></argument>, <argument><expr><literal type="string">"1.11"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>int</name></type> <name>compareVersion</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>version1</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>version2</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>StringTokenizer</name></type> <name>st1</name> <init>= <expr><operator>new</operator> <call><name>StringTokenizer</name><argument_list>(<argument><expr><name>version1</name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>StringTokenizer</name></type> <name>st2</name> <init>= <expr><operator>new</operator> <call><name>StringTokenizer</name><argument_list>(<argument><expr><name>version2</name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><call><name><name>st1</name><operator>.</operator><name>hasMoreTokens</name></name><argument_list>()</argument_list></call> <operator>&amp;</operator> <call><name><name>st2</name><operator>.</operator><name>hasMoreTokens</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>token1</name> <init>= <expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><call><name><name>st1</name><operator>.</operator><name>nextToken</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>token2</name> <init>= <expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><call><name><name>st2</name><operator>.</operator><name>nextToken</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>token1</name> <operator>&gt;</operator> <name>token2</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if>
      <if type="elseif">else if <condition>(<expr><name>token2</name> <operator>&gt;</operator> <name>token1</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></while>
    <if_stmt><if>if <condition>(<expr><call><name><name>st1</name><operator>.</operator><name>countTokens</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <call><name><name>st2</name><operator>.</operator><name>countTokens</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <while>while <condition>(<expr><call><name><name>st1</name><operator>.</operator><name>hasMoreTokens</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><call><name><name>st1</name><operator>.</operator><name>nextToken</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
      </block_content>}</block></while>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>st2</name><operator>.</operator><name>countTokens</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <call><name><name>st1</name><operator>.</operator><name>countTokens</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <while>while <condition>(<expr><call><name><name>st2</name><operator>.</operator><name>hasMoreTokens</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><call><name><name>st2</name><operator>.</operator><name>nextToken</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
      </block_content>}</block></while>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></function>
}</block></class>
</unit>
