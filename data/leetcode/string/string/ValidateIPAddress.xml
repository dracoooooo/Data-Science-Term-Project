<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\string\string\ValidateIPAddress.java"><package>package <name>string</name>;</package>

<comment type="block" format="javadoc">/**
 * Created by gouthamvidyapradhan on 01/08/2019 Write a function to check whether an input string is
 * a valid IPv4 address or IPv6 address or neither.
 *
 * &lt;p&gt;IPv4 addresses are canonically represented in dot-decimal notation, which consists of four
 * decimal numbers, each ranging from 0 to 255, separated by dots ("."), e.g.,172.16.254.1;
 *
 * &lt;p&gt;Besides, leading zeros in the IPv4 is invalid. For example, the address 172.16.254.01 is
 * invalid.
 *
 * &lt;p&gt;IPv6 addresses are represented as eight groups of four hexadecimal digits, each group
 * representing 16 bits. The groups are separated by colons (":"). For example, the address
 * 2001:0db8:85a3:0000:0000:8a2e:0370:7334 is a valid one. Also, we could omit some leading zeros
 * among four hexadecimal digits and some low-case characters in the address to upper-case ones, so
 * 2001:db8:85a3:0:0:8A2E:0370:7334 is also a valid IPv6 address(Omit leading zeros and using upper
 * cases).
 *
 * &lt;p&gt;However, we don't replace a consecutive group of zero value with a single empty group using
 * two consecutive colons (::) to pursue simplicity. For example, 2001:0db8:85a3::8A2E:0370:7334 is
 * an invalid IPv6 address.
 *
 * &lt;p&gt;Besides, extra leading zeros in the IPv6 is also invalid. For example, the address
 * 02001:0db8:85a3:0000:0000:8a2e:0370:7334 is invalid.
 *
 * &lt;p&gt;Note: You may assume there is no extra space or special characters in the input string.
 *
 * &lt;p&gt;Example 1: Input: "172.16.254.1"
 *
 * &lt;p&gt;Output: "IPv4"
 *
 * &lt;p&gt;Explanation: This is a valid IPv4 address, return "IPv4". Example 2: Input:
 * "2001:0db8:85a3:0:0:8A2E:0370:7334"
 *
 * &lt;p&gt;Output: "IPv6"
 *
 * &lt;p&gt;Explanation: This is a valid IPv6 address, return "IPv6". Example 3: Input: "256.256.256.256"
 *
 * &lt;p&gt;Output: "Neither"
 *
 * &lt;p&gt;Explanation: This is neither a IPv4 address nor a IPv6 address.
 *
 * &lt;p&gt;Solution: O(N) split the string by each '.' or ':' and then validate each parts.
 */</comment>
<class><specifier>public</specifier> class <name>ValidateIPAddress</name> <block>{
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></parameter>)</parameter_list> <block>{<block_content>

    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(
        <argument><expr><operator>new</operator> <call><name>ValidateIPAddress</name><argument_list>()</argument_list></call><operator>.</operator><call><name>validIPAddress</name><argument_list>(<argument><expr><literal type="string">"02001:0db8:85a3:0000:0000:8a2e:0370:7334"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>String</name></type> <name>validIPAddress</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>IP</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name><name>IP</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name><name>IP</name><operator>.</operator><name>endsWith</name></name><argument_list>(<argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>IP</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="string">"Neither"</literal></expr>;</return></block_content></block></if></if_stmt>
      <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>ipv4</name> <init>= <expr><call><name><name>IP</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">"\\."</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>ipv4</name><operator>.</operator><name>length</name></name> <operator>!=</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="string">"Neither"</literal></expr>;</return></block_content></block></if>
      <else>else <block>{<block_content>
        <for>for <control>(<init><decl><type><name>String</name></type> <name>part</name> <range>: <expr><name>ipv4</name></expr></range></decl></init>)</control> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><call><name><name>part</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="string">"Neither"</literal></expr>;</return></block_content></block></if></if_stmt>
          <if_stmt><if>if <condition>(<expr><call><name><name>part</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name><name>part</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="string">"Neither"</literal></expr>;</return></block_content></block></if>
          <else>else <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>part</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="string">"Neither"</literal></expr>;</return></block_content></block></if></if_stmt>
            <for>for <control>(<init><decl><type><name>char</name></type> <name>c</name> <range>: <expr><call><name><name>part</name><operator>.</operator><name>toCharArray</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
              <if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="char">'0'</literal> <operator>||</operator> <name>c</name> <operator>&gt;</operator> <literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="string">"Neither"</literal></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block></for>
            <decl_stmt><decl><type><name>int</name></type> <name>value</name> <init>= <expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><name>part</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>value</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>value</name> <operator>&gt;</operator> <literal type="number">255</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="string">"Neither"</literal></expr>;</return></block_content></block></if></if_stmt>
          </block_content>}</block></else></if_stmt>
        </block_content>}</block></for>
      </block_content>}</block></else></if_stmt>
      <return>return <expr><literal type="string">"IPv4"</literal></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name><name>IP</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name><name>IP</name><operator>.</operator><name>endsWith</name></name><argument_list>(<argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>IP</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="string">"Neither"</literal></expr>;</return></block_content></block></if></if_stmt>
      <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>ipv6</name> <init>= <expr><call><name><name>IP</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>ipv6</name><operator>.</operator><name>length</name></name> <operator>!=</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="string">"Neither"</literal></expr>;</return></block_content></block></if>
      <else>else <block>{<block_content>
        <for>for <control>(<init><decl><type><name>String</name></type> <name>part</name> <range>: <expr><name>ipv6</name></expr></range></decl></init>)</control> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><call><name><name>part</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="string">"Neither"</literal></expr>;</return></block_content></block></if></if_stmt>
          <if_stmt><if>if <condition>(<expr><call><name><name>part</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="string">"Neither"</literal></expr>;</return></block_content></block></if>
          <else>else <block>{<block_content>
            <for>for <control>(<init><decl><type><name>char</name></type> <name>c</name> <range>: <expr><call><name><name>part</name><operator>.</operator><name>toCharArray</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
              <if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'9'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>c</name> <operator>&gt;=</operator> <literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'f'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>c</name> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'F'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

              </block_content>}</block></if> <else>else <block>{<block_content>
                <return>return <expr><literal type="string">"Neither"</literal></expr>;</return>
              </block_content>}</block></else></if_stmt>
            </block_content>}</block></for>
          </block_content>}</block></else></if_stmt>
        </block_content>}</block></for>
      </block_content>}</block></else></if_stmt>
      <return>return <expr><literal type="string">"IPv6"</literal></expr>;</return>
    </block_content>}</block></if> <else>else<block type="pseudo"><block_content> <return>return <expr><literal type="string">"Neither"</literal></expr>;</return></block_content></block></else></if_stmt>
  </block_content>}</block></function>
}</block></class>
</unit>
