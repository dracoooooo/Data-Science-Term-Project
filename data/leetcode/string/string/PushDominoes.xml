<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\string\string\PushDominoes.java"><package>package <name>string</name>;</package>

<comment type="block" format="javadoc">/**
 * Created by gouthamvidyapradhan on 24/07/2019 There are N dominoes in a line, and we place each
 * domino vertically upright.
 *
 * &lt;p&gt;In the beginning, we simultaneously push some of the dominoes either to the left or to the
 * right.
 *
 * &lt;p&gt;After each second, each domino that is falling to the left pushes the adjacent domino on the
 * left.
 *
 * &lt;p&gt;Similarly, the dominoes falling to the right push their adjacent dominoes standing on the
 * right.
 *
 * &lt;p&gt;When a vertical domino has dominoes falling on it from both sides, it stays still due to the
 * balance of the forces.
 *
 * &lt;p&gt;For the purposes of this question, we will consider that a falling domino expends no
 * additional force to a falling or already fallen domino.
 *
 * &lt;p&gt;Given a string "S" representing the initial state. S[i] = 'L', if the i-th domino has been
 * pushed to the left; S[i] = 'R', if the i-th domino has been pushed to the right; S[i] = '.', if
 * the i-th domino has not been pushed.
 *
 * &lt;p&gt;Return a string representing the final state.
 *
 * &lt;p&gt;Example 1:
 *
 * &lt;p&gt;Input: ".L.R...LR..L.." Output: "LL.RR.LLRRLL.." Example 2:
 *
 * &lt;p&gt;Input: "RR.L" Output: "RR.L" Explanation: The first domino expends no additional force on the
 * second domino. Note:
 *
 * &lt;p&gt;0 &lt;= N &lt;= 10^5 String dominoes contains only 'L', 'R' and '.' Solution: O(N)
 */</comment>
<class><specifier>public</specifier> class <name>PushDominoes</name> <block>{
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>PushDominoes</name><argument_list>()</argument_list></call><operator>.</operator><call><name>pushDominoes</name><argument_list>(<argument><expr><literal type="string">"RR.L"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>String</name></type> <name>pushDominoes</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>dominoes</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>R</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>L</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>char</name><index>[]</index></name></type> <name>A</name> <init>= <expr><call><name><name>dominoes</name><operator>.</operator><name>toCharArray</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>A</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>A</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'L'</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>R</name> <operator>&gt;</operator> <name>L</name></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><operator>(</operator><name>i</name> <operator>-</operator> <name>R</name><operator>)</operator></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>int</name></type> <name>st</name></decl>;</decl_stmt>
          <expr_stmt><expr><name>st</name> <operator>=</operator> <name>R</name> <operator>+</operator> <name>d</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><operator>(</operator><name>d</name> <operator>%</operator> <literal type="number">2</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>A</name><index>[<expr><name>st</name></expr>]</index></name> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
          <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>st</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>i</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><name><name>A</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="char">'L'</literal></expr>;</expr_stmt>
          </block_content>}</block></for>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>L</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>L</name></expr></else></ternary><operator>)</operator></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>i</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><name><name>A</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="char">'L'</literal></expr>;</expr_stmt>
          </block_content>}</block></for>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><name>L</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>A</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'R'</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>R</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><name>R</name> <operator>&gt;</operator> <name>L</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>A</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'R'</literal></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>
}</block></class>
</unit>
