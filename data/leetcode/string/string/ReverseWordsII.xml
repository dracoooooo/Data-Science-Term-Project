<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\string\string\ReverseWordsII.java"><package>package <name>string</name>;</package>

<comment type="block" format="javadoc">/**
 * Created by gouthamvidyapradhan on 21/03/2017. Given an input string, reverse the string word by
 * word. A word is defined as a sequence of non-space characters.
 *
 * &lt;p&gt;The input string does not contain leading or trailing spaces and the words are always
 * separated by a single space.
 *
 * &lt;p&gt;For example, Given s = "the sky is blue", return "blue is sky the".
 *
 * &lt;p&gt;Could you do it in-place without allocating extra space?
 */</comment>
<class><specifier>public</specifier> class <name>ReverseWordsII</name> <block>{
  <comment type="block" format="javadoc">/**
   * Main method
   *
   * @param args
   * @throws Exception
   */</comment>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name><name>char</name><index>[]</index></name></type> <name>c</name> <init>= <expr><block>{<expr><literal type="char">'t'</literal></expr>, <expr><literal type="char">'h'</literal></expr>, <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">' '</literal></expr>, <expr><literal type="char">'s'</literal></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'y'</literal></expr>, <expr><literal type="char">' '</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'s'</literal></expr>, <expr><literal type="char">' '</literal></expr>, <expr><literal type="char">'b'</literal></expr>, <expr><literal type="char">'l'</literal></expr>, <expr><literal type="char">'u'</literal></expr>, <expr><literal type="char">'e'</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><operator>new</operator> <call><name>ReverseWordsII</name><argument_list>()</argument_list></call><operator>.</operator><call><name>reverseWords</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>char</name></type> <name>i</name> <range>: <expr><name>c</name></expr></range></decl></init>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>print</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>reverseWords</name><parameter_list>(<parameter><decl><type><name><name>char</name><index>[]</index></name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>j</name> <init>= <expr><name><name>s</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>j</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>j</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>char</name></type> <name>temp</name> <init>= <expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>
    </block_content>}</block></for>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>l</name> <init>= <expr><name><name>s</name><operator>.</operator><name>length</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>l</name></expr>;</condition> <incr/>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>s</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>j</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
          <expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><name>i</name> <operator>=</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
          <for>for <control>(<init><decl><type><name>int</name></type> <name>p</name> <init>= <expr><name>j</name></expr></init></decl>, <decl><type ref="prev"/><name>q</name> <init>= <expr><name>i</name></expr></init></decl>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>q</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr><operator>,</operator> <expr><name>q</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>char</name></type> <name>temp</name> <init>= <expr><name><name>s</name><index>[<expr><name>p</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>s</name><index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><name>q</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>s</name><index>[<expr><name>q</name></expr>]</index></name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>
          </block_content>}</block></for>
          <expr_stmt><expr><name>i</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name>j</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
          <expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>i</name> <operator>==</operator> <name>l</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>p</name> <init>= <expr><name>j</name></expr></init></decl>, <decl><type ref="prev"/><name>q</name> <init>= <expr><name>i</name></expr></init></decl>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>q</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr><operator>,</operator> <expr><name>q</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
          <decl_stmt><decl><type><name>char</name></type> <name>temp</name> <init>= <expr><name><name>s</name><index>[<expr><name>p</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><name><name>s</name><index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><name>q</name></expr>]</index></name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>s</name><index>[<expr><name>q</name></expr>]</index></name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><name>j</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></function>
}</block></class>
</unit>
