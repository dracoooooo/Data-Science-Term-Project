<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\string\string\ReplaceWords.java"><package>package <name>string</name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>stream</name><operator>.</operator><name>Stream</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Created by gouthamvidyapradhan on 04/04/2019 In English, we have a concept called root, which can
 * be followed by some other words to form another longer word - let's call this word successor. For
 * example, the root an, followed by other, which can form another word another.
 *
 * &lt;p&gt;Now, given a dictionary consisting of many roots and a sentence. You need to replace all the
 * successor in the sentence with the root forming it. If a successor has many roots can form it,
 * replace it with the root with the shortest length.
 *
 * &lt;p&gt;You need to output the sentence after the replacement.
 *
 * &lt;p&gt;Example 1:
 *
 * &lt;p&gt;Input: dict = ["cat", "bat", "rat"] sentence = "the cattle was rattled by the battery" Output:
 * "the cat was rat by the bat"
 *
 * &lt;p&gt;Note:
 *
 * &lt;p&gt;The input will only have lower-case letters. 1 &lt;= dict words number &lt;= 1000 1 &lt;= sentence
 * words number &lt;= 1000 1 &lt;= root length &lt;= 100 1 &lt;= sentence words length &lt;= 1000
 *
 * &lt;p&gt;Solution: O(w + S) where w is the max length of each word in the dictionary and S is the
 * length of the string. Add all the words in the dictionary to a trie and evaluate each word in the
 * string to check if it matches any path in the trie. Terminate the search as soon as a leaf node
 * in the trie has been reached.
 */</comment>
<class><specifier>public</specifier> class <name>ReplaceWords</name> <block>{
  <class>class <name>Trie</name> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>Character</name></argument>, <argument><name>Trie</name></argument>&gt;</argument_list></name></type> <name>map</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/** Initialize your data structure here. */</comment>
    <constructor><specifier>public</specifier> <name>Trie</name><parameter_list>()</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name>map</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/** Inserts a word into the trie. */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>insert</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>word</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>word</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>word</name></expr></argument>, <argument><expr><call><name><name>word</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>String</name></type> <name>find</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <return>return <expr><call><name>search</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>word</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>length</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><call><name><name>word</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Trie</name></type> <name>subTrie</name> <init>= <expr><call><name><name>map</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>subTrie</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>subTrie</name> <operator>=</operator> <operator>new</operator> <call><name>Trie</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>subTrie</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>subTrie</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>word</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>Trie</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt> <comment type="line">// use null to indicate end of string</comment>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>String</name></type> <name>search</name><parameter_list>(<parameter><decl><type><name>Trie</name></type> <name>curr</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>StringBuilder</name></type> <name>sb</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name><name>s</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>i</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name><name>sb</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if>
      <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>Trie</name></type> <name>subTrie</name> <init>= <expr><call><name><name>curr</name><operator>.</operator><name>map</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>subTrie</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <return>return <expr><ternary><condition><expr><call><name><name>curr</name><operator>.</operator><name>map</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name><name>sb</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><call><name><name>subTrie</name><operator>.</operator><name>map</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name><name>sb</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
          <return>return <expr><call><name>search</name><argument_list>(<argument><expr><name>subTrie</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>
  }</block></class>

  <comment type="block" format="javadoc">/**
   * Main method
   *
   * @param args
   */</comment>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>words</name> <init>= <expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><literal type="string">"a"</literal></expr></argument>, <argument><expr><literal type="string">"aa"</literal></expr></argument>, <argument><expr><literal type="string">"aaa"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>sentence</name> <init>= <expr><literal type="string">"aa aa"</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ReplaceWords</name><argument_list>()</argument_list></call><operator>.</operator><call><name>replaceWords</name><argument_list>(<argument><expr><name>words</name></expr></argument>, <argument><expr><name>sentence</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>String</name></type> <name>replaceWords</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>dict</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>sentence</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>Trie</name></type> <name>root</name> <init>= <expr><operator>new</operator> <call><name>Trie</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>dict</name><operator>.</operator><name>forEach</name></name><argument_list>(<argument><expr><name>root</name><operator>::</operator><name>insert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>words</name> <init>= <expr><call><name><name>sentence</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>StringBuilder</name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>Stream</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name>words</name></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>map</name><argument_list>(
            <argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>w</name></decl></parameter></parameter_list> -&gt; <block>{<block_content>
              <decl_stmt><decl><type><name>String</name></type> <name>s</name> <init>= <expr><call><name><name>root</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
              <return>return <expr><ternary><condition><expr><call><name><name>s</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><call><name><name>w</name><operator>.</operator><name>concat</name></name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name><name>s</name><operator>.</operator><name>concat</name></name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
            </block_content>}</block></lambda></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>forEach</name><argument_list>(<argument><expr><name>result</name><operator>::</operator><name>append</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>result</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>
}</block></class>
</unit>
