<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\string\string\ExcelSheetColumnNumber.java"><package>package <name>string</name>;</package>

<comment type="block" format="javadoc">/**
 * Created by gouthamvidyapradhan on 07/07/2017. Given a column title as appear in an Excel sheet,
 * return its corresponding column number.
 *
 * &lt;p&gt;For example:
 *
 * &lt;p&gt;A -&gt; 1 B -&gt; 2 C -&gt; 3 ... Z -&gt; 26 AA -&gt; 27 AB -&gt; 28
 */</comment>
<class><specifier>public</specifier> class <name>ExcelSheetColumnNumber</name> <block>{
  <decl_stmt><decl><type><name>String</name></type> <name>CONST</name> <init>= <expr><literal type="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZ"</literal></expr></init></decl>;</decl_stmt>

  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ExcelSheetColumnNumber</name><argument_list>()</argument_list></call><operator>.</operator><call><name>titleToNumber</name><argument_list>(<argument><expr><literal type="string">"AAB"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>int</name></type> <name>titleToNumber</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>total</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><call><name><name>CONST</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>pow</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name><name>Math</name><operator>.</operator><name>pow</name></name><argument_list>(<argument><expr><literal type="number">26</literal></expr></argument>, <argument><expr><name>j</name><operator>++</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>total</name> <operator>+=</operator> <operator>(</operator><name>pow</name> <operator>*</operator> <name>pos</name><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>total</name></expr>;</return>
  </block_content>}</block></function>
}</block></class>
</unit>
