<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\dp\ContinuousSubarraySum.java"><class><specifier>public</specifier> class <name>ContinuousSubarraySum</name> <block>{
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>checkSubarraySum</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>nums</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>, <argument><name>Boolean</name></argument>&gt;</argument_list></name></type> <name>map</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line">// memoization</comment>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>numbers</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<comment type="line">// accumulate the lat element of the array already</comment>
        <expr_stmt><expr><call><name><name>numbers</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>nums</name><index>[<expr><name><name>nums</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line">// start at  the element before the last element because we are already using the last element.</comment>
        <return>return <expr><call><name>check</name><argument_list>(<argument><expr><name>nums</name></expr></argument>, <argument><expr><name><name>nums</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>map</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>numbers</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>boolean</name></type> <name>check</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>nums</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ix</name></decl></parameter>, <parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>, <argument><name>Boolean</name></argument>&gt;</argument_list></name></type> <name>map</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>sub</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>ix</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
		<comment type="line">// calculate the accumulated result</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>sub</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>nums</name><index>[<expr><name>ix</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name><name>sub</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name> <operator>&amp;&amp;</operator>  <name>n</name><operator>&gt;=</operator><literal type="number">2</literal></expr>;</condition><incr><expr><name>result</name> <operator>+=</operator> <call><name><name>sub</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name><operator>++</operator></expr></argument>)</argument_list></call></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
        <if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;=</operator><literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>k</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>result</name> <operator>%</operator> <name>k</name> <operator>==</operator><literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>k</name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>result</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
		
        <if_stmt><if>if <condition>(<expr><call><name><name>map</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name><name>map</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
		<comment type="line">// no result so far so we have 3 options: </comment>
		<comment type="line">// 1) start with an empty array</comment>
		<comment type="line">// 2) start from this element</comment>
		<comment type="line">// 3) use the accumulated array</comment>
		<comment type="line">// so there are 3 calls</comment>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>newList</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>newList</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>nums</name><index>[<expr><name>ix</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>found</name> <init>= <expr><call><name>check</name><argument_list>(<argument><expr><name>nums</name></expr></argument>, <argument><expr><name>ix</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>map</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>sub</name></expr></argument>)</argument_list></call>
		        <operator>||</operator> <call><name>check</name><argument_list>(<argument><expr><name>nums</name></expr></argument>, <argument><expr><name>ix</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>map</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>newList</name></expr></argument>)</argument_list></call>
                <operator>||</operator> <call><name>check</name><argument_list>(<argument><expr><name>nums</name></expr></argument>, <argument><expr><name>ix</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>map</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><call><name><name>map</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
}</block></class>
</unit>
