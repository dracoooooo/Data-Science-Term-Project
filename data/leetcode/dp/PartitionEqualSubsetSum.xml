<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\dp\PartitionEqualSubsetSum.java"><class><specifier>public</specifier> class <name>PartitionEqualSubsetSum</name> <block>{
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>canPartition</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>nums</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// if sum of all elements in odd, then we cant make a partition, else we may or may not make a partition</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>number</name> <range>: <expr><name>nums</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><name>sum</name> <operator>+=</operator> <name>number</name></expr>;</expr_stmt></block_content></block></for>
        <if_stmt><if>if <condition>(<expr><name>sum</name> <operator>%</operator> <literal type="number">2</literal> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="line">// this is the first condition to check</comment>
        <comment type="line">// now the main thing to note is that if we can make a subset with subsetSum = sum / 2, then surely the other</comment>
        <comment type="line">// subset can also make the subsetSum = sum / 2;</comment>
        <comment type="line">// ie we make 2 subsets s1, s2. If we make s1 = totalSum / 2, then it is sure that the next subset s2 will make</comment>
        <comment type="line">// subsetSum = totalSum / 2, so we can return true.</comment>
    
        <decl_stmt><decl><type><name>int</name></type> <name>neededSum</name> <init>= <expr><name>sum</name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
        <comment type="line">// now we form a bool dp array</comment>
        <decl_stmt><decl><type><name><name>boolean</name> <index>[]</index><index>[]</index></name></type> <name>dp</name> <init>= <expr><operator>new</operator> <name><name>boolean</name><index>[<expr><name><name>nums</name><operator>.</operator><name>length</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>neededSum</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <comment type="line">// subset sum problem</comment>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name><name>nums</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;=</operator><name>neededSum</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>j</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt></block_content></block></if>
                <if type="elseif">else if <condition>(<expr><name><name>nums</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>&gt;</operator> <name>j</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>dp</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
                </block_content>}</block></if>
                <if type="elseif">else if <condition>(<expr><name><name>nums</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>j</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt></block_content></block></if>
                <else>else<block type="pseudo"><block_content>
                    <expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>dp</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>||</operator> <name><name>dp</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>j</name> <operator>-</operator> <name><name>nums</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></for>
        <return>return <expr><name><name>dp</name><index>[<expr><name><name>nums</name><operator>.</operator><name>length</name></name></expr>]</index><index>[<expr><name>neededSum</name></expr>]</index></name></expr>;</return>
    </block_content>}</block></function>
}</block></class>
</unit>
