<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\dp\HouseRobberII.java"><class><specifier>public</specifier> class <name>HouseRobberII</name> <block>{
    <function><type><specifier>public</specifier> <name>int</name></type> <name>rob</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>nums</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>end</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>included</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>excluded</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        
        <for>for<control>(<init><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><name>start</name></expr></init></decl>;</init> <condition><expr><name>idx</name> <operator>&lt;=</operator> <name>end</name></expr>;</condition> <incr><expr><name>idx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>included</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>e</name> <init>= <expr><name>excluded</name></expr></init></decl>;</decl_stmt>
            
            <expr_stmt><expr><name>included</name> <operator>=</operator> <name><name>nums</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>+</operator> <name>e</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>excluded</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        
        <return>return <expr><call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name>included</name></expr></argument>, <argument><expr><name>excluded</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
    
    <function><type><specifier>public</specifier> <name>int</name></type> <name>rob</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>nums</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><name>nums</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name><name>nums</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        
        <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><name><name>nums</name><operator>.</operator><name>length</name></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if<condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>nums</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>
        </block_content>}</block></if>
        <if type="elseif">else if<condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name><name>nums</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>nums</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        
        <return>return <expr><call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(
            <argument><expr><call><name>rob</name><argument_list>(<argument><expr><name>nums</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>n</name><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>rob</name><argument_list>(<argument><expr><name>nums</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>
        )</argument_list></call></expr>;</return>
    </block_content>}</block></function>
}</block></class>
</unit>
