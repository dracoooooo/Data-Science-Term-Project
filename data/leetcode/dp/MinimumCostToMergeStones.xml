<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\dp\MinimumCostToMergeStones.java"><package>package <name>dynamic_programming</name>;</package>

<comment type="block" format="javadoc">/**
 * Created by gouthamvidyapradhan on 02/02/2020 There are N piles of stones arranged in a row. The
 * i-th pile has stones[i] stones.
 *
 * &lt;p&gt;A move consists of merging exactly K consecutive piles into one pile, and the cost of this
 * move is equal to the total number of stones in these K piles.
 *
 * &lt;p&gt;Find the minimum cost to merge all piles of stones into one pile. If it is impossible, return
 * -1.
 *
 * &lt;p&gt;Example 1:
 *
 * &lt;p&gt;Input: stones = [3,2,4,1], K = 2 Output: 20 Explanation: We start with [3, 2, 4, 1]. We merge
 * [3, 2] for a cost of 5, and we are left with [5, 4, 1]. We merge [4, 1] for a cost of 5, and we
 * are left with [5, 5]. We merge [5, 5] for a cost of 10, and we are left with [10]. The total cost
 * was 20, and this is the minimum possible. Example 2:
 *
 * &lt;p&gt;Input: stones = [3,2,4,1], K = 3 Output: -1 Explanation: After any merge operation, there are
 * 2 piles left, and we can't merge anymore. So the task is impossible. Example 3:
 *
 * &lt;p&gt;Input: stones = [3,5,1,2,6], K = 3 Output: 25 Explanation: We start with [3, 5, 1, 2, 6]. We
 * merge [5, 1, 2] for a cost of 8, and we are left with [3, 8, 6]. We merge [3, 8, 6] for a cost of
 * 17, and we are left with [17]. The total cost was 25, and this is the minimum possible.
 *
 * &lt;p&gt;Note:
 *
 * &lt;p&gt;1 &lt;= stones.length &lt;= 30 2 &lt;= K &lt;= 30 1 &lt;= stones[i] &lt;= 100
 */</comment>
<class><specifier>public</specifier> class <name>MinimumCostToMergeStones</name> <block>{
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>A</name> <init>= <expr><block>{<expr><literal type="number">3</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">6</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>MinimumCostToMergeStones</name><argument_list>()</argument_list></call><operator>.</operator><call><name>mergeStones</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <decl_stmt><decl><type><specifier>private</specifier> <name><name>int</name><index>[]</index><index>[]</index><index>[]</index></name></type> <name>DP</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>K</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name><name>int</name><index>[]</index></name></type> <name>sum</name></decl>;</decl_stmt>

  <function><type><specifier>public</specifier> <name>int</name></type> <name>mergeStones</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>stones</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>K</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>stones</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <operator>(</operator><name>K</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>DP</name> <operator>=</operator> <operator>new</operator> <name><name>int</name><index>[<expr><name><name>stones</name><operator>.</operator><name>length</name></name></expr>]</index><index>[<expr><name><name>stones</name><operator>.</operator><name>length</name></name></expr>]</index><index>[<expr><name>K</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>K</name></name> <operator>=</operator> <name>K</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>sum</name> <operator>=</operator> <operator>new</operator> <name><name>int</name><index>[<expr><name><name>stones</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sum</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>stones</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>stones</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name><name>sum</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>sum</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>stones</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></for>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>stones</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>stones</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <name>K</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><name>k</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>==</operator> <name>j</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>DP</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
          </block_content>}</block></if> <else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>DP</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <literal type="number">999999</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
        </block_content>}</block></for>
      </block_content>}</block></for>
    </block_content>}</block></for>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>r</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>r</name> <operator>&lt;=</operator> <name><name>stones</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>r</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>stones</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>i</name> <operator>+</operator> <name>r</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>j</name> <operator>&lt;</operator> <name><name>stones</name><operator>.</operator><name>length</name></name></expr>)</condition> <block>{<block_content>
          <for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <name>K</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>min</name> <init>= <expr><name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>t</name> <init>= <expr><name>i</name></expr></init></decl>;</init> <condition><expr><name>t</name> <operator>&lt;</operator> <name>j</name></expr>;</condition> <incr><expr><name>t</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
              <expr_stmt><expr><name>min</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><name>min</name></expr></argument>, <argument><expr><name><name>DP</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>t</name></expr>]</index><index>[<expr><name>k</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>DP</name><index>[<expr><name>t</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <expr_stmt><expr><name><name>DP</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name>min</name></expr>;</expr_stmt>
          </block_content>}</block></for>
          <expr_stmt><expr><name><name>DP</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>DP</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>K</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name><name>sum</name><index>[<expr><name>j</name></expr>]</index></name> <operator>-</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>i</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>sum</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
    </block_content>}</block></for>
    <return>return <expr><name><name>DP</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>stones</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</return>
    <comment type="line">// return dp(0, stones.length - 1, 1);</comment>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>int</name></type> <name>dp</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>e</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>X</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>e</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>X</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if>
      <else>else<block type="pseudo"><block_content> <return>return <expr><literal type="number">999999</literal></expr>;</return></block_content></block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>DP</name><index>[<expr><name>s</name></expr>]</index><index>[<expr><name>e</name></expr>]</index><index>[<expr><name>X</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name><name>DP</name><index>[<expr><name>s</name></expr>]</index><index>[<expr><name>e</name></expr>]</index><index>[<expr><name>X</name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>X</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>DP</name><index>[<expr><name>s</name></expr>]</index><index>[<expr><name>e</name></expr>]</index><index>[<expr><name>X</name></expr>]</index></name> <operator>=</operator> <call><name>dp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>K</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>sum</name><index>[<expr><name>e</name></expr>]</index></name> <operator>-</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>s</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>sum</name><index>[<expr><name>s</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
      <return>return <expr><name><name>DP</name><index>[<expr><name>s</name></expr>]</index><index>[<expr><name>e</name></expr>]</index><index>[<expr><name>X</name></expr>]</index></name></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>min</name> <init>= <expr><name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>t</name> <init>= <expr><name>s</name></expr></init></decl>;</init> <condition><expr><name>t</name> <operator>&lt;</operator> <name>e</name></expr>;</condition> <incr><expr><name>t</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>min</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><name>min</name></expr></argument>, <argument><expr><call><name>dp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>X</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>dp</name><argument_list>(<argument><expr><name>t</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
      <expr_stmt><expr><name><name>DP</name><index>[<expr><name>s</name></expr>]</index><index>[<expr><name>e</name></expr>]</index><index>[<expr><name>X</name></expr>]</index></name> <operator>=</operator> <name>min</name></expr>;</expr_stmt>
      <return>return <expr><name><name>DP</name><index>[<expr><name>s</name></expr>]</index><index>[<expr><name>e</name></expr>]</index><index>[<expr><name>X</name></expr>]</index></name></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></function>
}</block></class>
</unit>
