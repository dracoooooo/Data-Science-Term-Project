<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\dp\TossStrangeCoins.java"><package>package <name>dynamic_programming</name>;</package>

<comment type="block" format="javadoc">/**
 * Created by gouthamvidyapradhan on 19/11/2019 You have some coins. The i-th coin has a probability
 * prob[i] of facing heads when tossed.
 *
 * &lt;p&gt;Return the probability that the number of coins facing heads equals target if you toss every
 * coin exactly once.
 *
 * &lt;p&gt;Example 1:
 *
 * &lt;p&gt;Input: prob = [0.4], target = 1 Output: 0.40000 Example 2:
 *
 * &lt;p&gt;Input: prob = [0.5,0.5,0.5,0.5,0.5], target = 0 Output: 0.03125
 */</comment>
<class><specifier>public</specifier> class <name>TossStrangeCoins</name> <block>{
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>double</name><index>[]</index></name></type> <name>A</name> <init>= <expr><block>{<expr><literal type="number">0.4</literal></expr>, <expr><literal type="number">0.4</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>TossStrangeCoins</name><argument_list>()</argument_list></call><operator>.</operator><call><name>probabilityOfHeads</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>double</name></type> <name>probabilityOfHeads</name><parameter_list>(<parameter><decl><type><name><name>double</name><index>[]</index></name></type> <name>prob</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>target</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>double</name><index>[]</index><index>[]</index></name></type> <name>DP</name> <init>= <expr><operator>new</operator> <name><name>double</name><index>[<expr><name>target</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name><name>prob</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>DP</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal> <operator>-</operator> <name><name>prob</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>DP</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>prob</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name><name>prob</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>t</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>t</name> <operator>&lt;=</operator> <name>target</name></expr>;</condition> <incr><expr><name>t</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>DP</name><index>[<expr><name>t</name></expr>]</index><index>[<expr><name>c</name></expr>]</index></name> <operator>=</operator> <name><name>DP</name><index>[<expr><name>t</name></expr>]</index><index>[<expr><name>c</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>-</operator> <name><name>prob</name><index>[<expr><name>c</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>DP</name><index>[<expr><name>t</name></expr>]</index><index>[<expr><name>c</name></expr>]</index></name> <operator>=</operator> <name><name>DP</name><index>[<expr><name>t</name></expr>]</index><index>[<expr><name>c</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>-</operator> <name><name>prob</name><index>[<expr><name>c</name></expr>]</index></name><operator>)</operator> <operator>+</operator> <name><name>DP</name><index>[<expr><name>t</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>c</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name><name>prob</name><index>[<expr><name>c</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
      </block_content>}</block></for>
    </block_content>}</block></for>
    <return>return <expr><name><name>DP</name><index>[<expr><name>target</name></expr>]</index><index>[<expr><name><name>prob</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</return>
  </block_content>}</block></function>
}</block></class>
</unit>
