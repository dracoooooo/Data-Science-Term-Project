<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\dp\FrogJump.java"><class><specifier>public</specifier> class <name>FrogJump</name> <block>{
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>canCross</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>stones</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>, <argument><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>posWithJumps</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// hashmap entry {5, &lt;2, 3&gt;} means the position x=5 can be reached on a jump of stretch 2 or 3</comment>
        
        <expr_stmt><expr><call><name><name>posWithJumps</name><operator>.</operator><name>computeIfAbsent</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>k</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><operator>new</operator> <class><super><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list><block>{<expr><block>{<expr><call><name>add</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></block></expr></block></class></expr></block_content></block></lambda></expr></argument>;</argument_list></call></expr></expr_stmt></block_content>}</block></function>}</block></class>)<empty_stmt>;</empty_stmt>
        
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>stones</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <comment type="line">// jump onto this stone from the previous stones</comment>
            <expr_stmt><expr><call><name><name>posWithJumps</name><operator>.</operator><name>computeIfAbsent</name></name><argument_list>(<argument><expr><name><name>stones</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>k</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>i</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>requiredJump</name> <init>= <expr><name><name>stones</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>stones</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <for>for<control>(<init><decl><type><name>int</name></type> <name>jump</name><range>: <expr><operator>new</operator> <name><name>int</name><index>[]</index></name><block>{<expr><name>requiredJump</name> <operator>-</operator> <literal type="number">1</literal></expr>, <expr><name>requiredJump</name></expr>, <expr><name>requiredJump</name> <operator>+</operator> <literal type="number">1</literal></expr>}</block></expr></range></decl></init>)</control> <block>{<block_content>                    
                    <if_stmt><if>if<condition>(<expr><call><name><name>posWithJumps</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>stones</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><name>jump</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name><name>posWithJumps</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>stones</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>add</name><argument_list>(<argument><expr><name>requiredJump</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></for>
            </block_content>}</block></for>
        </block_content>}</block></for>
        
        <comment type="line">// whether the last stone's x position can be reached on a jump of any stretch</comment>
        <return>return <expr><operator>!</operator><call><name><name>posWithJumps</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>stones</name><index>[<expr><name><name>stones</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call></expr>;</return>
    }
}
</unit>
