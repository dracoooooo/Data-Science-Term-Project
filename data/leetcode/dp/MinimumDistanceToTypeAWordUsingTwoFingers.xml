<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\dp\MinimumDistanceToTypeAWordUsingTwoFingers.java"><package>package <name>dynamic_programming</name>;</package>

<comment type="block" format="javadoc">/**
 * Created by gouthamvidyapradhan on 26/04/2020
 *
 * &lt;p&gt;A B C D E F G H I J K L M N O P Q R S T U V W X Y Z
 *
 * &lt;p&gt;You have a keyboard layout as shown above in the XY plane, where each English uppercase letter
 * is located at some coordinate, for example, the letter A is located at coordinate (0,0), the
 * letter B is located at coordinate (0,1), the letter P is located at coordinate (2,3) and the
 * letter Z is located at coordinate (4,1).
 *
 * &lt;p&gt;Given the string word, return the minimum total distance to type such string using only two
 * fingers. The distance between coordinates (x1,y1) and (x2,y2) is |x1 - x2| + |y1 - y2|.
 *
 * &lt;p&gt;Note that the initial positions of your two fingers are considered free so don't count towards
 * your total distance, also your two fingers do not have to start at the first letter or the first
 * two letters.
 *
 * &lt;p&gt;Example 1:
 *
 * &lt;p&gt;Input: word = "CAKE" Output: 3 Explanation: Using two fingers, one optimal way to type "CAKE"
 * is: Finger 1 on letter 'C' -&gt; cost = 0 Finger 1 on letter 'A' -&gt; cost = Distance from letter 'C'
 * to letter 'A' = 2 Finger 2 on letter 'K' -&gt; cost = 0 Finger 2 on letter 'E' -&gt; cost = Distance
 * from letter 'K' to letter 'E' = 1 Total distance = 3 Example 2:
 *
 * &lt;p&gt;Input: word = "HAPPY" Output: 6 Explanation: Using two fingers, one optimal way to type
 * "HAPPY" is: Finger 1 on letter 'H' -&gt; cost = 0 Finger 1 on letter 'A' -&gt; cost = Distance from
 * letter 'H' to letter 'A' = 2 Finger 2 on letter 'P' -&gt; cost = 0 Finger 2 on letter 'P' -&gt; cost =
 * Distance from letter 'P' to letter 'P' = 0 Finger 1 on letter 'Y' -&gt; cost = Distance from letter
 * 'A' to letter 'Y' = 4 Total distance = 6 Example 3:
 *
 * &lt;p&gt;Input: word = "NEW" Output: 3 Example 4:
 *
 * &lt;p&gt;Input: word = "YEAR" Output: 7
 *
 * &lt;p&gt;Constraints:
 *
 * &lt;p&gt;2 &lt;= word.length &lt;= 300 Each word[i] is an English uppercase letter.
 */</comment>
<class><specifier>public</specifier> class <name>MinimumDistanceToTypeAWordUsingTwoFingers</name> <block>{
  <decl_stmt><decl><type><name><name>int</name><index>[]</index><index>[]</index></name></type> <name>DP</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>int</name><index>[]</index><index>[]</index></name></type> <name>dist</name></decl>;</decl_stmt>

  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>MinimumDistanceToTypeAWordUsingTwoFingers</name><argument_list>()</argument_list></call><operator>.</operator><call><name>minimumDistance</name><argument_list>(<argument><expr><literal type="string">"YEAR"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>int</name></type> <name>minimumDistance</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>word</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>DP</name> <operator>=</operator> <operator>new</operator> <name><name>int</name><index>[<expr><call><name><name>word</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>]</index><index>[<expr><call><name><name>word</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>dist</name> <operator>=</operator> <operator>new</operator> <name><name>int</name><index>[<expr><literal type="number">26</literal></expr>]</index><index>[<expr><literal type="number">26</literal></expr>]</index></name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>char</name><index>[]</index><index>[]</index></name></type> <name>chars</name> <init>= <expr><block>{
      <expr><block>{<expr><literal type="char">'A'</literal></expr>, <expr><literal type="char">'B'</literal></expr>, <expr><literal type="char">'C'</literal></expr>, <expr><literal type="char">'D'</literal></expr>, <expr><literal type="char">'E'</literal></expr>, <expr><literal type="char">'F'</literal></expr>}</block></expr>,
      <expr><block>{<expr><literal type="char">'G'</literal></expr>, <expr><literal type="char">'H'</literal></expr>, <expr><literal type="char">'I'</literal></expr>, <expr><literal type="char">'J'</literal></expr>, <expr><literal type="char">'K'</literal></expr>, <expr><literal type="char">'L'</literal></expr>}</block></expr>,
      <expr><block>{<expr><literal type="char">'M'</literal></expr>, <expr><literal type="char">'N'</literal></expr>, <expr><literal type="char">'O'</literal></expr>, <expr><literal type="char">'P'</literal></expr>, <expr><literal type="char">'Q'</literal></expr>, <expr><literal type="char">'R'</literal></expr>}</block></expr>,
      <expr><block>{<expr><literal type="char">'S'</literal></expr>, <expr><literal type="char">'T'</literal></expr>, <expr><literal type="char">'U'</literal></expr>, <expr><literal type="char">'V'</literal></expr>, <expr><literal type="char">'W'</literal></expr>, <expr><literal type="char">'X'</literal></expr>}</block></expr>,
      <expr><block>{<expr><literal type="char">'Y'</literal></expr>, <expr><literal type="char">'Z'</literal></expr>, <expr><literal type="char">' '</literal></expr>, <expr><literal type="char">' '</literal></expr>, <expr><literal type="char">' '</literal></expr>, <expr><literal type="char">' '</literal></expr>}</block></expr>
    }</block></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>chars</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>chars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>length</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>char</name></type> <name>from</name> <init>= <expr><name><name>chars</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>from</name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>chars</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
          <for>for <control>(<init><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>l</name> <operator>&lt;</operator> <name><name>chars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>length</name></expr>;</condition> <incr><expr><name>l</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>char</name></type> <name>to</name> <init>= <expr><name><name>chars</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>l</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>to</name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
            <expr_stmt><expr><name><name>dist</name><index>[<expr><name>from</name> <operator>-</operator> <literal type="char">'A'</literal></expr>]</index><index>[<expr><name>to</name> <operator>-</operator> <literal type="char">'A'</literal></expr>]</index></name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>abs</name></name><argument_list>(<argument><expr><name>k</name> <operator>-</operator> <name>i</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name><name>Math</name><operator>.</operator><name>abs</name></name><argument_list>(<argument><expr><name>l</name> <operator>-</operator> <name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></for>
        </block_content>}</block></for>
      </block_content>}</block></for>
    </block_content>}</block></for>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>word</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <call><name><name>word</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name><name>DP</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></for>
    </block_content>}</block></for>
    <decl_stmt><decl><type><name>int</name></type> <name>min</name> <init>= <expr><name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>word</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name>min</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><name>min</name></expr></argument>, <argument><expr><call><name>dp</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>word</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>min</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>int</name></type> <name>dp</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>S</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>DP</name><index>[<expr><name>p</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name><name>DP</name><index>[<expr><name>p</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</return></block_content></block></if>
    <else>else <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>left</name> <init>= <expr><name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr></init></decl>, <decl><type ref="prev"/><name>right</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>min</name> <init>= <expr><name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>p</name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <call><name><name>S</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>p</name> <operator>+</operator> <literal type="number">1</literal> <operator>!=</operator> <name>i</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>left</name> <operator>=</operator> <call><name>dp</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>S</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>dist</name><index>[<expr><call><name><name>S</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="char">'A'</literal></expr>]</index><index>[<expr><call><name><name>S</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="char">'A'</literal></expr>]</index></name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>right</name> <operator>=</operator> <call><name>dp</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>S</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>dist</name><index>[<expr><call><name><name>S</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="char">'A'</literal></expr>]</index><index>[<expr><call><name><name>S</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="char">'A'</literal></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>DP</name><index>[<expr><name>p</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><name>min</name></expr></argument>, <argument><expr><call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name>right</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name><name>DP</name><index>[<expr><name>p</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></function>
}</block></class>
</unit>
