<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\dp\ArithmeticSlicesIISubsequence.java"><class><specifier>public</specifier> class <name>ArithmeticSlicesIISubsequence</name> <block>{
    <function><type><specifier>public</specifier> <name>int</name></type> <name>numberOfArithmeticSlices</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>A</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><name><name>A</name><operator>.</operator><name>length</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name><name>Map</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name><index>[]</index></name></type> <name>cnt</name> <init>= <expr><operator>new</operator> <name><name>Map</name><index>[<expr><name>n</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><name><name>cnt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>i</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>long</name></type> <name>delta</name> <init>= <expr><operator>(</operator><name>long</name><operator>)</operator><name><name>A</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <operator>(</operator><name>long</name><operator>)</operator><name><name>A</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>delta</name> <argument_list type="generic">&lt; <argument><name><name>Integer</name><operator>.</operator><name>MIN_VALUE</name></name> <operator>||</operator> <name>delta</name></argument> &gt;</argument_list></name> <name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr>)</condition> <block>{<block_content>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>diff</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><name>delta</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>sum</name> <init>= <expr><name><name>cnt</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>getOrDefault</name><argument_list>(<argument><expr><name>diff</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>origin</name> <init>= <expr><name><name>cnt</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>getOrDefault</name><argument_list>(<argument><expr><name>diff</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name><name>cnt</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>put</name><argument_list>(<argument><expr><name>diff</name></expr></argument>, <argument><expr><name>origin</name> <operator>+</operator> <name>sum</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>ans</name> <operator>+=</operator> <name>sum</name></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></for>
        <return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name>ans</name></expr>;</return>        
    </block_content>}</block></function>
}</block></class>
</unit>
