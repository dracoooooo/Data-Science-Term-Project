<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\dp\JumpGameV.java"><package>package <name>dynamic_programming</name>;</package>

<comment type="block" format="javadoc">/**
 * Created by gouthamvidyapradhan on 18/02/2020 Given an array of integers arr and an integer d. In
 * one step you can jump from index i to index:
 *
 * &lt;p&gt;i + x where: i + x &lt; arr.length and 0 &lt; x &lt;= d. i - x where: i - x &gt;= 0 and 0 &lt; x &lt;= d. In
 * addition, you can only jump from index i to index j if arr[i] &gt; arr[j] and arr[i] &gt; arr[k] for
 * all indices k between i and j (More formally min(i, j) &lt; k &lt; max(i, j)).
 *
 * &lt;p&gt;You can choose any index of the array and start jumping. Return the maximum number of indices
 * you can visit.
 *
 * &lt;p&gt;Notice that you can not jump outside of the array at any time.
 *
 * &lt;p&gt;Example 1:
 *
 * &lt;p&gt;Input: arr = [6,4,14,6,8,13,9,7,10,6,12], d = 2 Output: 4 Explanation: You can start at index
 * 10. You can jump 10 --&gt; 8 --&gt; 6 --&gt; 7 as shown. Note that if you start at index 6 you can only
 * jump to index 7. You cannot jump to index 5 because 13 &gt; 9. You cannot jump to index 4 because
 * index 5 is between index 4 and 6 and 13 &gt; 9. Similarly You cannot jump from index 3 to index 2 or
 * index 1. Example 2:
 *
 * &lt;p&gt;Input: arr = [3,3,3,3,3], d = 3 Output: 1 Explanation: You can start at any index. You always
 * cannot jump to any index. Example 3:
 *
 * &lt;p&gt;Input: arr = [7,6,5,4,3,2,1], d = 1 Output: 7 Explanation: Start at index 0. You can visit all
 * the indicies. Example 4:
 *
 * &lt;p&gt;Input: arr = [7,1,7,1,7,1], d = 2 Output: 2 Example 5:
 *
 * &lt;p&gt;Input: arr = [66], d = 1 Output: 1
 *
 * &lt;p&gt;Constraints:
 *
 * &lt;p&gt;1 &lt;= arr.length &lt;= 1000 1 &lt;= arr[i] &lt;= 10^5 1 &lt;= d &lt;= arr.length
 */</comment>
<class><specifier>public</specifier> class <name>JumpGameV</name> <block>{
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>A</name> <init>= <expr><block>{<expr><literal type="number">7</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>JumpGameV</name><argument_list>()</argument_list></call><operator>.</operator><call><name>maxJumps</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>DP</name></decl>;</decl_stmt>

  <function><type><specifier>public</specifier> <name>int</name></type> <name>maxJumps</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>arr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>d</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>DP</name> <operator>=</operator> <operator>new</operator> <name><name>int</name><index>[<expr><name><name>arr</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr>;</expr_stmt>
    <comment type="line">// Arrays.fill(DP, -1);</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>max</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>arr</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name>max</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name>max</name></expr></argument>, <argument><expr><call><name>dp</name><argument_list>(<argument><expr><name>arr</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>max</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>int</name></type> <name>dp</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>A</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>d</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>DP</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name><name>DP</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>max</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&gt;=</operator> <operator>(</operator><name>i</name> <operator>-</operator> <name>d</name><operator>)</operator></expr>;</condition> <incr><expr><name>j</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>j</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>A</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&gt;=</operator> <name><name>A</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
      <expr_stmt><expr><name>max</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name>max</name></expr></argument>, <argument><expr><call><name>dp</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <operator>(</operator><name>i</name> <operator>+</operator> <name>d</name><operator>)</operator></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>j</name> <operator>&gt;=</operator> <name><name>A</name><operator>.</operator><name>length</name></name> <operator>||</operator> <name><name>A</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&gt;=</operator> <name><name>A</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
      <expr_stmt><expr><name>max</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name>max</name></expr></argument>, <argument><expr><call><name>dp</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name><name>DP</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>max</name></expr>;</expr_stmt>
    <return>return <expr><name>max</name></expr>;</return>
  </block_content>}</block></function>
}</block></class>
</unit>
