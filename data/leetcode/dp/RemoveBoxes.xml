<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\dp\RemoveBoxes.java"><package>package <name>dynamic_programming</name>;</package>
<comment type="block" format="javadoc">/**
 * Created by gouthamvidyapradhan on 28/05/2019 Given several boxes with different colors
 * represented by different positive numbers. You may experience several rounds to remove boxes
 * until there is no box left. Each time you can choose some continuous boxes with the same color
 * (composed of k boxes, k &gt;= 1), remove them and get k*k points. Find the maximum points you can
 * get.
 *
 * &lt;p&gt;Example 1: Input:
 *
 * &lt;p&gt;[1, 3, 2, 2, 2, 3, 4, 3, 1] Output: 23 Explanation: [1, 3, 2, 2, 2, 3, 4, 3, 1] ----&gt; [1, 3,
 * 3, 4, 3, 1] (3*3=9 points) ----&gt; [1, 3, 3, 3, 1] (1*1=1 points) ----&gt; [1, 1] (3*3=9 points) ----&gt;
 * [] (2*2=4 points) Note: The number of boxes n would not exceed 100.
 *
 * &lt;p&gt;Solution O(N ^ 4) For each sub-array [l, r] make a dp cache and calculate maximum of [l, i][1]
 * + [i + 1, r][1] or maximum of [l + 1, i - 1][n] + [i, r][1] where boxes[l] == boxes[i] where n is
 * the count of repetitions
 */</comment>
<class><specifier>public</specifier> class <name>RemoveBoxes</name> <block>{

  <decl_stmt><decl><type><name><name>int</name><index>[]</index><index>[]</index><index>[]</index></name></type> <name>dp</name></decl>;</decl_stmt>

  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>boxes</name> <init>= <expr><block>{<expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>RemoveBoxes</name><argument_list>()</argument_list></call><operator>.</operator><call><name>removeBoxes</name><argument_list>(<argument><expr><name>boxes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>int</name></type> <name>removeBoxes</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>boxes</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>dp</name> <operator>=</operator> <operator>new</operator> <name><name>int</name><index>[<expr><name><name>boxes</name><operator>.</operator><name>length</name></name></expr>]</index><index>[<expr><name><name>boxes</name><operator>.</operator><name>length</name></name></expr>]</index><index>[<expr><name><name>boxes</name><operator>.</operator><name>length</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    <return>return <expr><call><name>calculate</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>boxes</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>boxes</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><name>int</name></type> <name>calculate</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>boxes</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>l</name> <operator>&gt;</operator> <name>r</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if>
    <else>else <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>dp</name><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>r</name></expr>]</index><index>[<expr><name>n</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name><name>dp</name><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>r</name></expr>]</index><index>[<expr><name>n</name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>
      <expr_stmt><expr><name><name>dp</name><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>r</name></expr>]</index><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>n</name> <operator>*</operator> <name>n</name><operator>)</operator> <operator>+</operator> <call><name>calculate</name><argument_list>(<argument><expr><name>l</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>boxes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>l</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>r</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>center</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>next</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>boxes</name><index>[<expr><name>l</name></expr>]</index></name> <operator>==</operator> <name><name>boxes</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>center</name> <operator>=</operator> <call><name>calculate</name><argument_list>(<argument><expr><name>l</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>boxes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>next</name> <operator>=</operator> <call><name>calculate</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>boxes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>dp</name><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>r</name></expr>]</index><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name><name>dp</name><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>r</name></expr>]</index><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>center</name> <operator>+</operator> <name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><name><name>dp</name><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>r</name></expr>]</index><index>[<expr><name>n</name></expr>]</index></name></expr>;</return>
  </block_content>}</block></function>
}</block></class>
</unit>
