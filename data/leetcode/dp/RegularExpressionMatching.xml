<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\dp\RegularExpressionMatching.java"><class><specifier>public</specifier> class <name>RegularExpressionMatching</name> <block>{
    <decl_stmt><decl><type><name><name>Result</name><index>[]</index><index>[]</index></name></type> <name>memo</name></decl>;</decl_stmt>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isMatch</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>text</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>pattern</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name>memo</name> <operator>=</operator> <operator>new</operator> <name><name>Result</name><index>[<expr><call><name><name>text</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><call><name><name>pattern</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
        <return>return <expr><call><name>dp</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>pattern</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>dp</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>text</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>pattern</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>memo</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name><name>memo</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name><name>Result</name><operator>.</operator><name>TRUE</name></name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>ans</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>j</name> <operator>==</operator> <call><name><name>pattern</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>)</condition><block>{<block_content>
            <expr_stmt><expr><name>ans</name> <operator>=</operator> <name>i</name> <operator>==</operator> <call><name><name>text</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else<block>{<block_content>
            <decl_stmt><decl><type><name>boolean</name></type> <name>first_match</name> <init>= <expr><operator>(</operator><name>i</name> <operator>&lt;</operator> <call><name><name>text</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator>
                                   <operator>(</operator><call><name><name>pattern</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name><name>text</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>||</operator>
                                    <call><name><name>pattern</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'.'</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><name>j</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <call><name><name>pattern</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>pattern</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition><block>{<block_content>
                <expr_stmt><expr><name>ans</name> <operator>=</operator> <operator>(</operator><call><name>dp</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>pattern</name></expr></argument>)</argument_list></call> <operator>||</operator>
                       <name>first_match</name> <operator>&amp;&amp;</operator> <call><name>dp</name><argument_list>(<argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>pattern</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>ans</name> <operator>=</operator> <name>first_match</name> <operator>&amp;&amp;</operator> <call><name>dp</name><argument_list>(<argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><name><name>memo</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>ans</name></expr> ?</condition><then> <expr><name><name>Result</name><operator>.</operator><name>TRUE</name></name></expr> </then><else>: <expr><name><name>Result</name><operator>.</operator><name>FALSE</name></name></expr></else></ternary></expr>;</expr_stmt>
        <return>return <expr><name>ans</name></expr>;</return>
    </block_content>}</block></function>
    <enum>enum <name>Result</name> <block>{
        <decl><name>TRUE</name></decl>, <decl><name>FALSE</name></decl>
    }</block></enum>
}</block></class>
</unit>
