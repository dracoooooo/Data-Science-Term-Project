<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\dp\DecodeWays.java"><class><specifier>public</specifier> class <name>DecodeWays</name> <block>{
    <function><type><specifier>public</specifier> <name>int</name></type> <name>numDecodings</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>dp</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[<expr><call><name><name>s</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if<condition>(<expr><call><name><name>s</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'0'</literal></expr>)</condition><block>{<block_content>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        
        <expr_stmt><expr><name><name>dp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
        
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><call><name><name>s</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>tens</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>-</operator><literal type="char">'0'</literal></expr></init></decl>;</decl_stmt><comment type="line">// prev char</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>ones</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>-</operator><literal type="char">'0'</literal></expr></init></decl>;</decl_stmt><comment type="line">// curr char</comment>
            
            <if_stmt><if>if<condition>(<expr><name>ones</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>tens</name><operator>!=</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>tens</name><operator>!=</operator><literal type="number">2</literal></expr>)</condition><block>{<block_content> <comment type="line">// 16382284870.......</comment>
                
                <return>return <expr><literal type="number">0</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>no</name> <init>= <expr><call><name>getNo</name><argument_list>(<argument><expr><name>tens</name></expr></argument>,<argument><expr><name>ones</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if<condition>(<expr><name>no</name> <operator>&lt;=</operator><literal type="number">26</literal> <operator>&amp;&amp;</operator> <name>no</name><operator>&gt;=</operator><literal type="number">10</literal></expr>)</condition><block>{<block_content>
                <if_stmt><if>if<condition>(<expr><name>i</name><operator>&gt;=</operator><literal type="number">2</literal></expr>)</condition><block>{<block_content>
                    <expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name><name>dp</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else<block>{<block_content> 
                    <expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator><literal type="number">1</literal></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if></if_stmt>
            
            <if_stmt><if>if<condition>(<expr><name>no</name><operator>!=</operator><literal type="number">10</literal> <operator>&amp;&amp;</operator> <name>no</name><operator>!=</operator><literal type="number">20</literal></expr>)</condition><block>{<block_content>
                <expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator><name><name>dp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>dp</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            
        </block_content>}</block></for>
        <return>return <expr><name><name>dp</name><index>[<expr><call><name><name>s</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</return>
        
    </block_content>}</block></function>
    
    <function><type><specifier>private</specifier> <name>int</name></type> <name>getNo</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>tens</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ones</name></decl></parameter>)</parameter_list><block>{<block_content>
        <return>return <expr><literal type="number">10</literal><operator>*</operator><name>tens</name> <operator>+</operator> <name>ones</name></expr>;</return>
    </block_content>}</block></function>
}</block></class>
</unit>
