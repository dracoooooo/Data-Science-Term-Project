<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\dp\PartitiontoKEqualSumSubsets.java"><class><specifier>public</specifier> class <name>PartitiontoKEqualSumSubsets</name> <block>{
    <function><type><name>boolean</name></type> <name>search</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>used</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>todo</name></decl></parameter>, <parameter><decl><type><name><name>Result</name><index>[]</index></name></type> <name>memo</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>nums</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>target</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>memo</name><index>[<expr><name>used</name></expr>]</index></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>memo</name><index>[<expr><name>used</name></expr>]</index></name> <operator>=</operator> <name><name>Result</name><operator>.</operator><name>FALSE</name></name></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>targ</name> <init>= <expr><operator>(</operator><name>todo</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name>target</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>nums</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><operator>(</operator><name>used</name> <operator>&gt;&gt;</operator> <name>i</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>nums</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;=</operator> <name>targ</name></expr>)</condition> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><call><name>search</name><argument_list>(<argument><expr><name>used</name> <operator>|</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>i</name><operator>)</operator></expr></argument>, <argument><expr><name>todo</name> <operator>-</operator> <name><name>nums</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>memo</name></expr></argument>, <argument><expr><name>nums</name></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name><name>memo</name><index>[<expr><name>used</name></expr>]</index></name> <operator>=</operator> <name><name>Result</name><operator>.</operator><name>TRUE</name></name></expr>;</expr_stmt>
                        <break>break;</break>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name><name>memo</name><index>[<expr><name>used</name></expr>]</index></name> <operator>==</operator> <name><name>Result</name><operator>.</operator><name>TRUE</name></name></expr>;</return>
    </block_content>}</block></function>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>canPartitionKSubsets</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>nums</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>sum</name> <init>= <expr><call><name><name>Arrays</name><operator>.</operator><name>stream</name></name><argument_list>(<argument><expr><name>nums</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>sum</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>sum</name> <operator>%</operator> <name>k</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name><name>Result</name><index>[]</index></name></type> <name>memo</name> <init>= <expr><operator>new</operator> <name><name>Result</name><index>[<expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>nums</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>memo</name><index>[<expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>nums</name><operator>.</operator><name>length</name></name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>Result</name><operator>.</operator><name>TRUE</name></name></expr>;</expr_stmt>
        <return>return <expr><call><name>search</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>sum</name></expr></argument>, <argument><expr><name>memo</name></expr></argument>, <argument><expr><name>nums</name></expr></argument>, <argument><expr><name>sum</name> <operator>/</operator> <name>k</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
    <enum>enum <name>Result</name> <block>{ <decl><name>TRUE</name></decl>, <decl><name>FALSE</name></decl> }</block></enum>
}</block></class>
</unit>
