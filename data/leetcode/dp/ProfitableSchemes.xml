<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\dp\ProfitableSchemes.java"><package>package <name>dynamic_programming</name>;</package>
<comment type="block" format="javadoc">/**
 * Created by gouthamvidyapradhan on 26/03/2019 There are G people in a gang, and a list of various
 * crimes they could commit.
 *
 * &lt;p&gt;The i-th crime generates a profit[i] and requires group[i] gang members to participate.
 *
 * &lt;p&gt;If a gang member participates in one crime, that member can't participate in another crime.
 *
 * &lt;p&gt;Let's call a profitable scheme any subset of these crimes that generates at least P profit,
 * and the total number of gang members participating in that subset of crimes is at most G.
 *
 * &lt;p&gt;How many schemes can be chosen? Since the answer may be very large, return it modulo 10^9 + 7.
 *
 * &lt;p&gt;Example 1:
 *
 * &lt;p&gt;Input: G = 5, P = 3, group = [2,2], profit = [2,3] Output: 2 Explanation: To make a profit of
 * at least 3, the gang could either commit crimes 0 and 1, or just crime 1. In total, there are 2
 * schemes. Example 2:
 *
 * &lt;p&gt;Input: G = 10, P = 5, group = [2,3,5], profit = [6,7,8] Output: 7 Explanation: To make a
 * profit of at least 5, the gang could commit any crimes, as long as they commit one. There are 7
 * possible schemes: (0), (1), (2), (0,1), (0,2), (1,2), and (0,1,2).
 *
 * &lt;p&gt;Note:
 *
 * &lt;p&gt;1 &lt;= G &lt;= 100 0 &lt;= P &lt;= 100 1 &lt;= group[i] &lt;= 100 0 &lt;= profit[i] &lt;= 100 1 &lt;= group.length =
 * profit.length &lt;= 100
 *
 * &lt;p&gt;Solution: O(G x P) Time and Space complexity. The problem is similar to the standard Knapsack
 * DP problem. For every group value (ranging from 0 - 100) if a minimum of profit can be achieved
 * then add this to the total count. Sum up the count (profitable schemes) for every group value
 * ranging from 0 - G and return this as your answer.
 */</comment>
<class><specifier>public</specifier> class <name>ProfitableSchemes</name> <block>{

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>int</name></type> <name>MOD</name> <init>= <expr><literal type="number">1000000007</literal></expr></init></decl>;</decl_stmt>
  <comment type="block" format="javadoc">/**
   * Main method
   *
   * @param args
   */</comment>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>group</name> <init>= <expr><block>{<expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>profit</name> <init>= <expr><block>{<expr><literal type="number">2</literal></expr>, <expr><literal type="number">5</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ProfitableSchemes</name><argument_list>()</argument_list></call><operator>.</operator><call><name>profitableSchemes</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>group</name></expr></argument>, <argument><expr><name>profit</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>int</name></type> <name>profitableSchemes</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>G</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>P</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>group</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>profit</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>int</name><index>[]</index><index>[]</index></name></type> <name>DP</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[<expr><name>G</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>P</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>DP</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><name><name>group</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>k</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>g</name> <init>= <expr><name><name>group</name><index>[<expr><name>k</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>p</name> <init>= <expr><name><name>profit</name><index>[<expr><name>k</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>DP</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name><name>DP</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>j</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
          <decl_stmt><decl><type><name>int</name></type> <name>r1</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>i</name> <operator>-</operator> <name>g</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>DP</name><index>[<expr><name>i</name> <operator>-</operator> <name>g</name></expr>]</index><index>[<expr><call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>j</name> <operator>-</operator> <name>p</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>int</name></type> <name>r2</name> <init>= <expr><name><name>DP</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><name><name>DP</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>r1</name> <operator>%</operator> <name>MOD</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>r2</name> <operator>%</operator> <name>MOD</name><operator>)</operator><operator>)</operator> <operator>%</operator> <name>MOD</name></expr>;</expr_stmt>
        </block_content>}</block></for>
      </block_content>}</block></for>
    </block_content>}</block></for>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>DP</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name>ans</name> <operator>=</operator> <operator>(</operator><name>ans</name> <operator>+</operator> <name><name>DP</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>P</name></expr>]</index></name><operator>)</operator> <operator>%</operator> <name>MOD</name></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>ans</name></expr>;</return>
  </block_content>}</block></function>
}</block></class>
</unit>
