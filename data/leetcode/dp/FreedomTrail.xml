<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\dp\FreedomTrail.java"><package>package <name>dynamic_programming</name>;</package>

<comment type="block" format="javadoc">/**
 * Created by gouthamvidyapradhan on 15/02/2020 In the video game Fallout 4, the quest "Road to
 * Freedom" requires players to reach a metal dial called the "Freedom Trail Ring", and use the dial
 * to spell a specific keyword in order to open the door.
 *
 * &lt;p&gt;Given a string ring, which represents the code engraved on the outer ring and another string
 * key, which represents the keyword needs to be spelled. You need to find the minimum number of
 * steps in order to spell all the characters in the keyword.
 *
 * &lt;p&gt;Initially, the first character of the ring is aligned at 12:00 direction. You need to spell
 * all the characters in the string key one by one by rotating the ring clockwise or anticlockwise
 * to make each character of the string key aligned at 12:00 direction and then by pressing the
 * center button.
 *
 * &lt;p&gt;At the stage of rotating the ring to spell the key character key[i]:
 *
 * &lt;p&gt;You can rotate the ring clockwise or anticlockwise one place, which counts as 1 step. The
 * final purpose of the rotation is to align one of the string ring's characters at the 12:00
 * direction, where this character must equal to the character key[i]. If the character key[i] has
 * been aligned at the 12:00 direction, you need to press the center button to spell, which also
 * counts as 1 step. After the pressing, you could begin to spell the next character in the key
 * (next stage), otherwise, you've finished all the spelling. Example:
 *
 * &lt;p&gt;Input: ring = "godding", key = "gd" Output: 4 Explanation: For the first key character 'g',
 * since it is already in place, we just need 1 step to spell this character. For the second key
 * character 'd', we need to rotate the ring "godding" anticlockwise by two steps to make it become
 * "ddinggo". Also, we need 1 more step for spelling. So the final output is 4. Note:
 *
 * &lt;p&gt;Length of both ring and key will be in range 1 to 100. There are only lowercase letters in
 * both strings and might be some duplcate characters in both strings. It's guaranteed that string
 * key could always be spelled by rotating the string ring.
 */</comment>
<class><specifier>public</specifier> class <name>FreedomTrail</name> <block>{
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>FreedomTrail</name><argument_list>()</argument_list></call><operator>.</operator><call><name>findRotateSteps</name><argument_list>(<argument><expr><literal type="string">"godding"</literal></expr></argument>, <argument><expr><literal type="string">"gd"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <decl_stmt><decl><type><name><name>int</name><index>[]</index><index>[]</index></name></type> <name>DP</name></decl>;</decl_stmt>

  <function><type><specifier>public</specifier> <name>int</name></type> <name>findRotateSteps</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>ring</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>DP</name> <operator>=</operator> <operator>new</operator> <name><name>int</name><index>[<expr><call><name><name>ring</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>]</index><index>[<expr><call><name><name>key</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
    <return>return <expr><call><name>dp</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ring</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name><name>key</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>int</name></type> <name>dp</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>ring</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>k</name> <operator>==</operator> <call><name><name>key</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if>
    <else>else <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>DP</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name><name>DP</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>
      <decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><call><name><name>key</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>min</name> <init>= <expr><name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <call><name><name>ring</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>ring</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>c</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>min</name> <operator>=</operator>
              <call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(
                  <argument><expr><name>min</name></expr></argument>,
                  <argument><expr><call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><call><name><name>Math</name><operator>.</operator><name>abs</name></name><argument_list>(<argument><expr><name>i</name> <operator>-</operator> <name>j</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>ring</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>-</operator> <call><name><name>Math</name><operator>.</operator><name>abs</name></name><argument_list>(<argument><expr><name>i</name> <operator>-</operator> <name>j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                      <operator>+</operator> <call><name>dp</name><argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name>ring</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>k</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
      <expr_stmt><expr><name><name>DP</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name>min</name></expr>;</expr_stmt>
      <return>return <expr><name>min</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></function>
}</block></class>
</unit>
