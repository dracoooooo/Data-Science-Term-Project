<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\dp\BurstBalloons.java"><class><specifier>public</specifier> class <name>BurstBalloons</name> <block>{
    <function><type><specifier>public</specifier> <name>int</name></type> <name>maxCoins</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>nums</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<return>return <expr><call><name>get_best_ans</name><argument_list>(<argument><expr><name>nums</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></function>
	<function><type><specifier>private</specifier> <name>int</name></type> <name>get_best_ans</name><parameter_list>(<parameter><decl><type><name><name>int</name> <index>[]</index></name></type><name>nums</name></decl></parameter>)</parameter_list><block>{<block_content>
		<decl_stmt><decl><type><name><name>int</name> <index>[]</index><index>[]</index></name></type><name>dp</name><init>=<expr><operator>new</operator> <name><name>int</name><index>[<expr><name><name>nums</name><operator>.</operator><name>length</name></name><operator>+</operator><literal type="number">2</literal></expr>]</index><index>[<expr><name><name>nums</name><operator>.</operator><name>length</name></name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

		<for>for<control>(<init><decl><type><name>int</name></type> <name>len</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>len</name><operator>&lt;=</operator><name><name>nums</name><operator>.</operator><name>length</name></name></expr>;</condition><incr><expr><name>len</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
			<for>for<control>(<init><decl><type><name>int</name></type> <name>start</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>start</name><operator>&lt;=</operator><name><name>nums</name><operator>.</operator><name>length</name></name><operator>-</operator><name>len</name><operator>+</operator><literal type="number">1</literal></expr>;</condition><incr><expr><name>start</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
				<for>for<control>(<init><decl><type><name>int</name></type> <name>end</name><init>=<expr><name>start</name></expr></init></decl>;</init><condition><expr><name>end</name><operator>&lt;</operator><name>start</name><operator>+</operator><name>len</name></expr>;</condition><incr><expr><name>end</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
					<decl_stmt><decl><type><name>int</name></type> <name>left</name><init>=<expr><name><name>dp</name><index>[<expr><name>start</name></expr>]</index><index>[<expr><name>end</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>right</name><init>=<expr><name><name>dp</name><index>[<expr><name>end</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>start</name><operator>+</operator><name>len</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>int</name></type> <name>last</name><init>=<expr><name><name>nums</name><index>[<expr><name>end</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
					<if_stmt><if>if<condition>(<expr><name>start</name><operator>-</operator><literal type="number">2</literal><operator>&gt;=</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>  <expr_stmt><expr><name>last</name><operator>*=</operator><name><name>nums</name><index>[<expr><name>start</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
					<if_stmt><if>if<condition>(<expr><name>start</name><operator>+</operator><name>len</name><operator>-</operator><literal type="number">1</literal><operator>&lt;</operator><name><name>nums</name><operator>.</operator><name>length</name></name></expr>)</condition><block type="pseudo"><block_content>   <expr_stmt><expr><name>last</name><operator>*=</operator><name><name>nums</name><index>[<expr><name>start</name><operator>+</operator><name>len</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
					<expr_stmt><expr><name><name>dp</name><index>[<expr><name>start</name></expr>]</index><index>[<expr><name>start</name><operator>+</operator><name>len</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator><call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name><name>dp</name><index>[<expr><name>start</name></expr>]</index><index>[<expr><name>start</name><operator>+</operator><name>len</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name>left</name><operator>+</operator><name>last</name><operator>+</operator><name>right</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></for>
			</block_content>}</block></for>
		</block_content>}</block></for>
		<return>return <expr><name><name>dp</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name><name>nums</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr>;</return>
	</block_content>}</block></function>
}</block></class>
</unit>
