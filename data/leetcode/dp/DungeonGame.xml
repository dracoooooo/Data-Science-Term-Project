<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\dp\DungeonGame.java"><class><specifier>public</specifier> class <name>DungeonGame</name> <block>{
    <function><type><specifier>public</specifier> <name>int</name></type> <name>calculateMinimumHP</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index><index>[]</index></name></type> <name>dungeon</name></decl></parameter>)</parameter_list> <block>{<block_content>

        <decl_stmt><decl><type><name><name>int</name><index>[]</index><index>[]</index></name></type> <name>dp</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[<expr><name><name>dungeon</name><operator>.</operator><name>length</name></name></expr>]</index><index>[<expr><name><name>dungeon</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>length</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name><name>int</name><index>[]</index></name></type> <name>row</name> <range>: <expr><name>dp</name></expr></range></decl></init>)</control><block type="pseudo"><block_content> <comment type="line">// populate dp array</comment>
            <expr_stmt><expr><call><name><name>Arrays</name><operator>.</operator><name>fill</name></name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        
        <return>return <expr><call><name>findPath</name><argument_list>(<argument><expr><name>dungeon</name></expr></argument>, <argument><expr><name>dp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return> <comment type="line">// begin recursive calls</comment>
        
    </block_content>}</block></function>
    
    <function><type><specifier>private</specifier> <name>int</name></type> <name>findPath</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index><index>[]</index></name></type> <name>dungeon</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index><index>[]</index></name></type> <name>dp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
        
        <decl_stmt><decl><type><name>int</name></type> <name>R</name> <init>= <expr><name><name>dungeon</name><operator>.</operator><name>length</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>C</name> <init>= <expr><name><name>dungeon</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>length</name></expr></init></decl>;</decl_stmt>
        
        <if_stmt><if>if <condition>(<expr><name>r</name> <operator>&gt;=</operator> <name>R</name> <operator>||</operator> <name>c</name> <operator>&gt;=</operator> <name>C</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr>;</return></block_content></block></if></if_stmt> <comment type="line">// boundary check</comment>
        <if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>R</name><operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>==</operator> <name>C</name><operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><ternary><condition><expr><operator>(</operator> <name><name>dungeon</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><name>c</name></expr>]</index></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal><operator>-</operator><name><name>dungeon</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><name>c</name></expr>]</index></name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt> <comment type="line">// if we reached the princess</comment>
        <if_stmt><if>if <condition>(<expr><name><name>dp</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><name>c</name></expr>]</index></name> <operator>!=</operator> <name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name><name>dp</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><name>c</name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt> <comment type="line">// if the path value is already stored in dp</comment>
        
        <decl_stmt><decl><type><name>int</name></type> <name>ifRight</name> <init>= <expr><call><name>findPath</name><argument_list>(<argument><expr><name>dungeon</name></expr></argument>, <argument><expr><name>dp</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>c</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line">// if the min valued path is to the right</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>ifDown</name> <init>= <expr><call><name>findPath</name><argument_list>(<argument><expr><name>dungeon</name></expr></argument>, <argument><expr><name>dp</name></expr></argument>, <argument><expr><name>r</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line">// if the min valued path is down</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>minHealth</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><name>ifRight</name></expr></argument>, <argument><expr><name>ifDown</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>dungeon</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><name>c</name></expr>]</index></name></expr></init></decl>;</decl_stmt> <comment type="line">// min health required for health to be 1 (&gt; 0)</comment>
        <expr_stmt><expr><name><name>dp</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><name>c</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator> <name>minHealth</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><name>minHealth</name></expr></else></ternary></expr>;</expr_stmt> <comment type="line">// assign to dp</comment>
        <return>return <expr><name><name>dp</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><name>c</name></expr>]</index></name></expr>;</return> 
        
    </block_content>}</block></function>
}</block></class>
</unit>
