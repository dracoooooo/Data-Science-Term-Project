<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\dp\EncodeStringWithShortestLength.java"><package>package <name>dynamic_programming</name>;</package>
<comment type="block" format="javadoc">/**
 * Created by gouthamvidyapradhan on 15/09/2019 Given a non-empty string, encode the string such
 * that its encoded length is the shortest.
 *
 * &lt;p&gt;The encoding rule is: k[encoded_string], where the encoded_string inside the square brackets
 * is being repeated exactly k times.
 *
 * &lt;p&gt;Note:
 *
 * &lt;p&gt;k will be a positive integer and encoded string will not be empty or have extra space. You may
 * assume that the input string contains only lowercase English letters. The string's length is at
 * most 160. If an encoding process does not make the string shorter, then do not encode it. If
 * there are several solutions, return any of them is fine.
 *
 * &lt;p&gt;Example 1:
 *
 * &lt;p&gt;Input: "aaa" Output: "aaa" Explanation: There is no way to encode it such that it is shorter
 * than the input string, so we do not encode it.
 *
 * &lt;p&gt;Example 2:
 *
 * &lt;p&gt;Input: "aaaaa" Output: "5[a]" Explanation: "5[a]" is shorter than "aaaaa" by 1 character.
 *
 * &lt;p&gt;Example 3:
 *
 * &lt;p&gt;Input: "aaaaaaaaaa" Output: "10[a]" Explanation: "a9[a]" or "9[a]a" are also valid solutions,
 * both of them have the same length = 5, which is the same as "10[a]".
 *
 * &lt;p&gt;Example 4:
 *
 * &lt;p&gt;Input: "aabcaabcd" Output: "2[aabc]d" Explanation: "aabc" occurs twice, so one answer can be
 * "2[aabc]d".
 *
 * &lt;p&gt;Example 5:
 *
 * &lt;p&gt;Input: "abbbabbbcabbbabbbc" Output: "2[2[abbb]c]" Explanation: "abbbabbbc" occurs twice, but
 * "abbbabbbc" can also be encoded to "2[abbb]c", so one answer can be "2[2[abbb]c]".
 *
 * &lt;p&gt;Solution: O(N ^ 4) Maintain a 2d String array of minimum substring and split each substring
 * and combine the minimum substrings So, the answer could be either DP[i][j] = min(DP[i][k] + DP[k
 * + 1][j]) or split (i, j) at every index k and check if a new minimum substring can be formed
 * which is lesser than the current minimum.
 */</comment>
<class><specifier>public</specifier> class <name>EncodeStringWithShortestLength</name> <block>{

  <decl_stmt><decl><type><specifier>private</specifier> <name><name>String</name><index>[]</index><index>[]</index></name></type> <name>DP</name></decl>;</decl_stmt>

  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(
        <argument><expr><operator>new</operator> <call><name>EncodeStringWithShortestLength</name><argument_list>()</argument_list></call>
            <operator>.</operator><call><name>encode</name><argument_list>(
                <argument><expr><literal type="string">"xabcabcabcxxabcabcabcxxabcabcabcxxabcdabcabcxxabcabcabcxxabcabcabcxxabcabcabcxxabcabcabcx"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>String</name></type> <name>encode</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>DP</name> <operator>=</operator> <operator>new</operator> <name><name>String</name><index>[<expr><call><name><name>s</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>]</index><index>[<expr><call><name><name>s</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
    <return>return <expr><call><name>encodeStr</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>s</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>String</name></type> <name>encodeStr</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>j</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>DP</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name><name>DP</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>DP</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name><name>DP</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>currSubStr</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>DP</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>currSubStr</name></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>String</name></type> <name>left</name> <init>= <expr><call><name>encodeStr</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>k</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>String</name></type> <name>right</name> <init>= <expr><call><name>encodeStr</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>left</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>+</operator> <call><name><name>right</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <name><name>DP</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>DP</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>left</name> <operator>+</operator> <name>right</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name><name>currSubStr</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>%</operator> <operator>(</operator><name>k</name> <operator>-</operator> <name>i</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>String</name></type> <name>subStr</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>currSubStr</name><operator>.</operator><name>replaceAll</name></name><argument_list>(<argument><expr><name>subStr</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>String</name></type> <name>candidate</name> <init>=
              <expr><operator>(</operator><call><name><name>currSubStr</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>/</operator> <call><name><name>subStr</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call><operator>)</operator> <operator>+</operator> <literal type="string">"["</literal> <operator>+</operator> <call><name>encodeStr</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>k</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"]"</literal></expr></init></decl>;</decl_stmt>
          <if_stmt><if>if <condition>(<expr><call><name><name>candidate</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <name><name>DP</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>DP</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>candidate</name></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><name><name>DP</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</return>
  </block_content>}</block></function>
}</block></class>
</unit>
