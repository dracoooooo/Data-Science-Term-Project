<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\dp\OddEvenJump.java"><package>package <name>dynamic_programming</name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Created by gouthamvidyapradhan on 17/03/2019 You are given an integer array A. From some starting
 * index, you can make a series of jumps. The (1st, 3rd, 5th, ...) jumps in the series are called
 * odd numbered jumps, and the (2nd, 4th, 6th, ...) jumps in the series are called even numbered
 * jumps.
 *
 * &lt;p&gt;You may from index i jump forward to index j (with i &lt; j) in the following way:
 *
 * &lt;p&gt;During odd numbered jumps (ie. jumps 1, 3, 5, ...), you jump to the index j such that A[i] &lt;=
 * A[j] and A[j] is the smallest possible value. If there are multiple such indexes j, you can only
 * jump to the smallest such index j. During even numbered jumps (ie. jumps 2, 4, 6, ...), you jump
 * to the index j such that A[i] &gt;= A[j] and A[j] is the largest possible value. If there are
 * multiple such indexes j, you can only jump to the smallest such index j. (It may be the case that
 * for some index i, there are no legal jumps.) A starting index is good if, starting from that
 * index, you can reach the end of the array (index A.length - 1) by jumping some number of times
 * (possibly 0 or more than once.)
 *
 * &lt;p&gt;Return the number of good starting indexes.
 *
 * &lt;p&gt;Example 1:
 *
 * &lt;p&gt;Input: [10,13,12,14,15] Output: 2 Explanation: From starting index i = 0, we can jump to i = 2
 * (since A[2] is the smallest among A[1], A[2], A[3], A[4] that is greater or equal to A[0]), then
 * we can't jump any more. From starting index i = 1 and i = 2, we can jump to i = 3, then we can't
 * jump any more. From starting index i = 3, we can jump to i = 4, so we've reached the end. From
 * starting index i = 4, we've reached the end already. In total, there are 2 different starting
 * indexes (i = 3, i = 4) where we can reach the end with some number of jumps. Example 2:
 *
 * &lt;p&gt;Input: [2,3,1,1,4] Output: 3 Explanation: From starting index i = 0, we make jumps to i = 1, i
 * = 2, i = 3:
 *
 * &lt;p&gt;During our 1st jump (odd numbered), we first jump to i = 1 because A[1] is the smallest value
 * in (A[1], A[2], A[3], A[4]) that is greater than or equal to A[0].
 *
 * &lt;p&gt;During our 2nd jump (even numbered), we jump from i = 1 to i = 2 because A[2] is the largest
 * value in (A[2], A[3], A[4]) that is less than or equal to A[1]. A[3] is also the largest value,
 * but 2 is a smaller index, so we can only jump to i = 2 and not i = 3.
 *
 * &lt;p&gt;During our 3rd jump (odd numbered), we jump from i = 2 to i = 3 because A[3] is the smallest
 * value in (A[3], A[4]) that is greater than or equal to A[2].
 *
 * &lt;p&gt;We can't jump from i = 3 to i = 4, so the starting index i = 0 is not good.
 *
 * &lt;p&gt;In a similar manner, we can deduce that: From starting index i = 1, we jump to i = 4, so we
 * reach the end. From starting index i = 2, we jump to i = 3, and then we can't jump anymore. From
 * starting index i = 3, we jump to i = 4, so we reach the end. From starting index i = 4, we are
 * already at the end. In total, there are 3 different starting indexes (i = 1, i = 3, i = 4) where
 * we can reach the end with some number of jumps. Example 3:
 *
 * &lt;p&gt;Input: [5,1,3,4,2] Output: 3 Explanation: We can reach the end from starting indexes 1, 2, and
 * 4.
 *
 * &lt;p&gt;Note:
 *
 * &lt;p&gt;1 &lt;= A.length &lt;= 20000 0 &lt;= A[i] &lt; 100000
 *
 * &lt;p&gt;Solution: O(N log N) For each array index and for each odd/even turn pre-calculate the next
 * jump index - this can be achieved in O(n log n) by using a balanced tree. Check for each array
 * index if we can reach end of the array by using the pre-calculated values for next jump - cache
 * the values to avoid recalculating. Sum up total number of such start indices and that will be the
 * answer.
 */</comment>
<class><specifier>public</specifier> class <name>OddEvenJump</name> <block>{

  <class><specifier>private</specifier> class <name>Node</name> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>num</name></decl>, <decl><type ref="prev"/><name>pos</name></decl>;</decl_stmt>

    <constructor><name>Node</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>num</name></name> <operator>=</operator> <name>num</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>pos</name></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>
  }</block></class>

  <decl_stmt><decl><type><name><name>TreeSet</name><argument_list type="generic">&lt;<argument><name>Node</name></argument>&gt;</argument_list></name></type> <name>treeSet</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>int</name><index>[]</index><index>[]</index></name></type> <name>next</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>int</name><index>[]</index><index>[]</index></name></type> <name>possible</name></decl>;</decl_stmt>
  <comment type="block" format="javadoc">/**
   * Main method
   *
   * @param args
   */</comment>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>A</name> <init>= <expr><block>{<expr><literal type="number">10</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>OddEvenJump</name><argument_list>()</argument_list></call><operator>.</operator><call><name>oddEvenJumps</name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>int</name></type> <name>oddEvenJumps</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>A</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>treeSet</name> <operator>=</operator> <operator>new</operator> <call><name><name>TreeSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>Comparator</name><operator>.</operator><name>comparingInt</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>o</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>o</name><operator>.</operator><name>num</name></name></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>next</name> <operator>=</operator> <operator>new</operator> <name><name>int</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name><name>A</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>possible</name> <operator>=</operator> <operator>new</operator> <name><name>int</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name><name>A</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Arrays</name><operator>.</operator><name>fill</name></name><argument_list>(<argument><expr><name><name>next</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Arrays</name><operator>.</operator><name>fill</name></name><argument_list>(<argument><expr><name><name>next</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Arrays</name><operator>.</operator><name>fill</name></name><argument_list>(<argument><expr><name><name>possible</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Arrays</name><operator>.</operator><name>fill</name></name><argument_list>(<argument><expr><name><name>possible</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>A</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>num</name> <init>= <expr><name><name>A</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <comment type="line">// odd case</comment>
      <decl_stmt><decl><type><name>Node</name></type> <name>curr</name> <init>= <expr><operator>new</operator> <call><name>Node</name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>Node</name></type> <name>ceil</name> <init>= <expr><call><name><name>treeSet</name><operator>.</operator><name>ceiling</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Node</name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>ceil</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>next</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>ceil</name><operator>.</operator><name>pos</name></name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <comment type="line">// even case</comment>
      <decl_stmt><decl><type><name>Node</name></type> <name>floor</name> <init>= <expr><call><name><name>treeSet</name><operator>.</operator><name>floor</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Node</name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>floor</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>next</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>floor</name><operator>.</operator><name>pos</name></name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name><name>treeSet</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>curr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>treeSet</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>curr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>A</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name>count</name> <operator>+=</operator> <ternary><condition><expr><call><name>dp</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>next</name></expr></argument>, <argument><expr><name>possible</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>count</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>int</name></type> <name>dp</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>A</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index><index>[]</index></name></type> <name>next</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index><index>[]</index></name></type> <name>possible</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>oddOrEven</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name><name>A</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><name><name>possible</name><index>[<expr><name>oddOrEven</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>possible</name><index>[<expr><name>oddOrEven</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><name><name>possible</name><index>[<expr><name>oddOrEven</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>nextPos</name> <init>= <expr><ternary><condition><expr><name>oddOrEven</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>next</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr> </then><else>: <expr><name><name>next</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>nextPos</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>possible</name><index>[<expr><name>oddOrEven</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <return>return <expr><name><name>possible</name><index>[<expr><name>oddOrEven</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</return>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>possible</name><index>[<expr><name>oddOrEven</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>dp</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>nextPos</name></expr></argument>, <argument><expr><name>next</name></expr></argument>, <argument><expr><name>possible</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>oddOrEven</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name><name>possible</name><index>[<expr><name>oddOrEven</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</return>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></function>
}</block></class>
</unit>
