<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\dp\NumberofLongestIncreasingSubsequence.java"><class><specifier>public</specifier> class <name>NumberofLongestIncreasingSubsequence</name> <block>{
    <function><type><specifier>public</specifier> <name>int</name></type> <name>findNumberOfLIS</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>nums</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>N</name> <init>= <expr><name><name>nums</name><operator>.</operator><name>length</name></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>N</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>N</name></expr>;</return></block_content></block></if></if_stmt>
        <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>lengths</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[<expr><name>N</name></expr>]</index></name></expr></init></decl>;</decl_stmt> <comment type="line">//lengths[i] = length of longest ending in nums[i]</comment>
        <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>counts</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[<expr><name>N</name></expr>]</index></name></expr></init></decl>;</decl_stmt> <comment type="line">//count[i] = number of longest ending in nums[i]</comment>
        <expr_stmt><expr><call><name><name>Arrays</name><operator>.</operator><name>fill</name></name><argument_list>(<argument><expr><name>counts</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>j</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content> <if_stmt><if>if <condition>(<expr><name><name>nums</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name><name>nums</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>lengths</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;=</operator> <name><name>lengths</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name><name>lengths</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>lengths</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>counts</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>counts</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>lengths</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <name><name>lengths</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name><name>counts</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+=</operator> <name><name>counts</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt></block_content></block></for>
        </block_content>}</block></for>

        <decl_stmt><decl><type><name>int</name></type> <name>longest</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>length</name><range>: <expr><name>lengths</name></expr></range></decl></init>)</control> <block>{<block_content>
            <expr_stmt><expr><name>longest</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name>longest</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>lengths</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>longest</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>ans</name> <operator>+=</operator> <name><name>counts</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>ans</name></expr>;</return>
    </block_content>}</block></function>
}</block></class>
</unit>
