<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\dp\StickersToSpellWord.java"><package>package <name>dynamic_programming</name>;</package>

<comment type="block" format="javadoc">/**
 * Created by gouthamvidyapradhan on 14/07/2019 We are given N different types of stickers. Each
 * sticker has a lowercase English word on it.
 *
 * &lt;p&gt;You would like to spell out the given target string by cutting individual letters from your
 * collection of stickers and rearranging them.
 *
 * &lt;p&gt;You can use each sticker more than once if you want, and you have infinite quantities of each
 * sticker.
 *
 * &lt;p&gt;What is the minimum number of stickers that you need to spell out the target? If the task is
 * impossible, return -1.
 *
 * &lt;p&gt;Example 1:
 *
 * &lt;p&gt;Input:
 *
 * &lt;p&gt;["with", "example", "science"], "thehat" Output:
 *
 * &lt;p&gt;3 Explanation:
 *
 * &lt;p&gt;We can use 2 "with" stickers, and 1 "example" sticker. After cutting and rearrange the letters
 * of those stickers, we can form the target "thehat". Also, this is the minimum number of stickers
 * necessary to form the target string. Example 2:
 *
 * &lt;p&gt;Input:
 *
 * &lt;p&gt;["notice", "possible"], "basicbasic" Output:
 *
 * &lt;p&gt;-1 Explanation:
 *
 * &lt;p&gt;We can't form the target "basicbasic" from cutting letters from the given stickers. Note:
 *
 * &lt;p&gt;stickers has length in the range [1, 50]. stickers consists of lowercase English words
 * (without apostrophes). target has length in the range [1, 15], and consists of lowercase English
 * letters. In all test cases, all words were chosen randomly from the 1000 most common US English
 * words, and the target was chosen as a concatenation of two random words. The time limit may be
 * more challenging than usual. It is expected that a 50 sticker test case can be solved within 35ms
 * on average.
 *
 * &lt;p&gt;Solution: O(2 ^ T x T x S) where T is the length of target and S is length of sticker array.
 * Each state is a combination of characters selected in the target sticker plus the total count of
 * stickers used. Cache the minimum count in each state and explore all the different possible
 * states.
 */</comment>
<class><specifier>public</specifier> class <name>StickersToSpellWord</name> <block>{
  <comment type="block" format="javadoc">/**
   * Main method
   *
   * @param args
   */</comment>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>stickers</name> <init>= <expr><block>{<expr><literal type="string">"bright"</literal></expr>, <expr><literal type="string">"neighbor"</literal></expr>, <expr><literal type="string">"capital"</literal></expr>}</block></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>StickersToSpellWord</name><argument_list>()</argument_list></call><operator>.</operator><call><name>minStickers</name><argument_list>(<argument><expr><name>stickers</name></expr></argument>, <argument><expr><literal type="string">"originalchair"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>destination</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>min</name> <init>= <expr><name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name><name>int</name><index>[]</index><index>[]</index></name></type> <name>DP</name></decl>;</decl_stmt>

  <function><type><specifier>public</specifier> <name>int</name></type> <name>minStickers</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>stickers</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>target</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>target</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name>destination</name> <operator>|=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>i</name><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name>DP</name> <operator>=</operator> <operator>new</operator> <name><name>int</name><index>[<expr><name>destination</name></expr>]</index><index>[<expr><call><name><name>target</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>answer</name> <init>= <expr><call><name>dp</name><argument_list>(<argument><expr><name>stickers</name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><ternary><condition><expr><name>answer</name> <operator>==</operator> <name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><name>answer</name></expr></else></ternary></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>int</name></type> <name>dp</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>stickers</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>curr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>curr</name> <operator>==</operator> <name>destination</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>count</name></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;</operator> <name>min</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr>;</return></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>DP</name><index>[<expr><name>curr</name></expr>]</index><index>[<expr><name>count</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name><name>DP</name><index>[<expr><name>curr</name></expr>]</index><index>[<expr><name>count</name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>
      <expr_stmt><expr><name><name>DP</name><index>[<expr><name>curr</name></expr>]</index><index>[<expr><name>count</name></expr>]</index></name> <operator>=</operator> <name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr>;</expr_stmt>
      <for>for <control>(<init><decl><type><name>String</name></type> <name>s</name> <range>: <expr><name>stickers</name></expr></range></decl></init>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>temp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>char</name><index>[]</index></name></type> <name>arr</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>toCharArray</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>l</name> <init>= <expr><call><name><name>target</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>l</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><operator>(</operator><name>curr</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>i</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>char</name></type> <name>targetChar</name> <init>= <expr><call><name><name>target</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>arr</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
              <if_stmt><if>if <condition>(<expr><name><name>arr</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name>targetChar</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>arr</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>temp</name> <operator>|=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>i</name><operator>)</operator></expr>;</expr_stmt>
                <break>break;</break>
              </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <if_stmt><if>if <condition>(<expr><name>temp</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>int</name></type> <name>child</name> <init>= <expr><operator>(</operator><name>curr</name> <operator>|</operator> <name>temp</name><operator>)</operator></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>int</name></type> <name>retValue</name> <init>= <expr><call><name>dp</name><argument_list>(<argument><expr><name>stickers</name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><name>child</name></expr></argument>, <argument><expr><name>count</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><name><name>DP</name><index>[<expr><name>curr</name></expr>]</index><index>[<expr><name>count</name></expr>]</index></name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><name><name>DP</name><index>[<expr><name>curr</name></expr>]</index><index>[<expr><name>count</name></expr>]</index></name></expr></argument>, <argument><expr><name>retValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>min</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><name>min</name></expr></argument>, <argument><expr><name><name>DP</name><index>[<expr><name>curr</name></expr>]</index><index>[<expr><name>count</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
      <return>return <expr><name><name>DP</name><index>[<expr><name>curr</name></expr>]</index><index>[<expr><name>count</name></expr>]</index></name></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></function>
}</block></class>
</unit>
