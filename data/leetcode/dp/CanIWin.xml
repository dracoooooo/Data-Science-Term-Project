<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\dp\CanIWin.java"><class><specifier>public</specifier> class <name>CanIWin</name> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>maxChoosableInteger</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>desiredTotal</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>, <argument><name>Boolean</name></argument>&gt;</argument_list></name></type> <name>hashMap</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>OFFSET</name> <init>= <expr><literal type="number">9</literal></expr></init></decl>;</decl_stmt> <comment type="line">// 2^9 = 512 &gt;= 300 </comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>canIWin</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>maxChoosableInteger</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>desiredTotal</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>desiredTotal</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>maxChoosableInteger</name><operator>*</operator><operator>(</operator><name>maxChoosableInteger</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>/</operator><literal type="number">2</literal><operator>&lt;</operator><name>desiredTotal</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
        
        <expr_stmt><expr><name>hashMap</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>, <argument><name>Boolean</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>maxChoosableInteger</name></name> <operator>=</operator> <name>maxChoosableInteger</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>desiredTotal</name></name> <operator>=</operator> <name>desiredTotal</name></expr>;</expr_stmt>
        
        <return>return <expr><call><name>dp</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
    
    <comment type="line">// you can also derive sum from profile but cba</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>dp</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sum</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>profile</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>hashMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>profile</name></expr></argument>)</argument_list></call>  <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name><name>hashMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>profile</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
        
        <decl_stmt><decl><type><name>boolean</name></type> <name>res</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
        
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>OFFSET</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>OFFSET</name> <operator>+</operator> <name>maxChoosableInteger</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>profile</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>i</name><operator>)</operator> <operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <continue>continue;</continue></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>sum</name> <operator>+</operator> <name>i</name> <operator>-</operator> <name>OFFSET</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name>desiredTotal</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>hashMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>profile</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>res</name> <operator>=</operator> <name>res</name> <operator>||</operator> <operator>!</operator><call><name>dp</name><argument_list>(<argument><expr><name>sum</name> <operator>+</operator><name>i</name> <operator>-</operator> <name>OFFSET</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>profile</name> <operator>|</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>i</name><operator>)</operator><operator>)</operator> <operator>+</operator> <name>i</name> <operator>-</operator> <name>OFFSET</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        
        <expr_stmt><expr><call><name><name>hashMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>profile</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>res</name></expr>;</return>
    </block_content>}</block></function>
}</block></class>
</unit>
