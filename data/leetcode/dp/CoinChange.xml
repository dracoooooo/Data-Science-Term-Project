<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\dp\CoinChange.java"><class><specifier>public</specifier> class <name>CoinChange</name> <block>{
    <function><type><specifier>public</specifier> <name>int</name></type> <name>coinChange</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>coins</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>amount</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>amount</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
        <return>return <expr><call><name>coinChange</name><argument_list>(<argument><expr><name>coins</name></expr></argument>, <argument><expr><name>amount</name></expr></argument>, <argument><expr><operator>new</operator> <name><name>int</name><index>[<expr><name>amount</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></function>
    
      <function><type><specifier>private</specifier> <name>int</name></type> <name>coinChange</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>coins</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rem</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>count</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>rem</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>rem</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>count</name><index>[<expr><name>rem</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name><name>count</name><index>[<expr><name>rem</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>min</name> <init>= <expr><name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>coin</name> <range>: <expr><name>coins</name></expr></range></decl></init>)</control> <block>{<block_content>
          <decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><call><name>coinChange</name><argument_list>(<argument><expr><name>coins</name></expr></argument>, <argument><expr><name>rem</name> <operator>-</operator> <name>coin</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <if_stmt><if>if <condition>(<expr><name>res</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>res</name> <operator>&lt;</operator> <name>min</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>min</name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <name>res</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><name><name>count</name><index>[<expr><name>rem</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>min</name> <operator>==</operator> <name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><name>min</name></expr></else></ternary></expr>;</expr_stmt>
        <return>return <expr><name><name>count</name><index>[<expr><name>rem</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</return>
      </block_content>}</block></function>
}</block></class>
</unit>
