<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\dp\MinimumNumberOfTaps.java"><package>package <name>dynamic_programming</name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Created by gouthamvidyapradhan on 01/03/2020 There is a one-dimensional garden on the x-axis. The
 * garden starts at the point 0 and ends at the point n. (i.e The length of the garden is n).
 *
 * &lt;p&gt;There are n + 1 taps located at points [0, 1, ..., n] in the garden.
 *
 * &lt;p&gt;Given an integer n and an integer array ranges of length n + 1 where ranges[i] (0-indexed)
 * means the i-th tap can water the area [i - ranges[i], i + ranges[i]] if it was open.
 *
 * &lt;p&gt;Return the minimum number of taps that should be open to water the whole garden, If the garden
 * cannot be watered return -1.
 *
 * &lt;p&gt;Example 1:
 *
 * &lt;p&gt;Input: n = 5, ranges = [3,4,1,1,0,0] Output: 1 Explanation: The tap at point 0 can cover the
 * interval [-3,3] The tap at point 1 can cover the interval [-3,5] The tap at point 2 can cover the
 * interval [1,3] The tap at point 3 can cover the interval [2,4] The tap at point 4 can cover the
 * interval [4,4] The tap at point 5 can cover the interval [5,5] Opening Only the second tap will
 * water the whole garden [0,5] Example 2:
 *
 * &lt;p&gt;Input: n = 3, ranges = [0,0,0,0] Output: -1 Explanation: Even if you activate all the four
 * taps you cannot water the whole garden. Example 3:
 *
 * &lt;p&gt;Input: n = 7, ranges = [1,2,1,0,2,1,0,1] Output: 3 Example 4:
 *
 * &lt;p&gt;Input: n = 8, ranges = [4,0,0,0,0,0,0,0,4] Output: 2 Example 5:
 *
 * &lt;p&gt;Input: n = 8, ranges = [4,0,0,0,4,0,0,0,4] Output: 1
 *
 * &lt;p&gt;Constraints:
 *
 * &lt;p&gt;1 &lt;= n &lt;= 10^4 ranges.length == n + 1 0 &lt;= ranges[i] &lt;= 100
 */</comment>
<class><specifier>public</specifier> class <name>MinimumNumberOfTaps</name> <block>{
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>A</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>MinimumNumberOfTaps</name><argument_list>()</argument_list></call><operator>.</operator><call><name>minTaps</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>DP</name></decl>;</decl_stmt>

  <function><type><specifier>public</specifier> <name>int</name></type> <name>minTaps</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>ranges</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>DP</name> <operator>=</operator> <operator>new</operator> <name><name>int</name><index>[<expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Arrays</name><operator>.</operator><name>fill</name></name><argument_list>(<argument><expr><name>DP</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>dp</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ranges</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>int</name></type> <name>dp</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>prev</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>R</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <name>n</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><name><name>DP</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name><name>DP</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return></block_content></block></if>
    <else>else <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>min</name> <init>= <expr><name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>start</name> <init>= <expr><ternary><condition><expr><name><name>R</name><index>[<expr><name>prev</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>prev</name></expr> </then><else>: <expr><name>i</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>start</name></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>start</name> <operator>+</operator> <literal type="number">100</literal> <operator>&amp;&amp;</operator> <name>j</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>j</name> <operator>-</operator> <name><name>R</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&lt;=</operator> <name>prev</name></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><call><name>dp</name><argument_list>(<argument><expr><name>j</name> <operator>+</operator> <name><name>R</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>j</name> <operator>+</operator> <name><name>R</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>R</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <if_stmt><if>if <condition>(<expr><name>result</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>min</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><name>min</name></expr></argument>, <argument><expr><name>result</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
      <expr_stmt><expr><name><name>DP</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>min</name> <operator>==</operator> <name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><name>min</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
      <return>return <expr><name><name>DP</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></function>
}</block></class>
</unit>
