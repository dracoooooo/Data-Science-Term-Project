<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\tree\tree\LowestCommonAncestorBST.java"><package>package <name>tree</name>;</package>

<comment type="block" format="javadoc">/**
 * Created by gouthamvidyapradhan on 09/03/2017. Given a binary search tree (BST), find the lowest
 * common ancestor (LCA) of two given nodes in the BST.
 *
 * &lt;p&gt;According to the definition of LCA on Wikipedia: âThe lowest common ancestor is defined
 * between two nodes v and w as the lowest node in T that has both v and w as descendants (where we
 * allow a node to be a descendant of itself).â
 *
 * &lt;p&gt;_______6______ / \ ___2__ ___8__ / \ / \ 0 _4 7 9 / \ 3 5 For example, the lowest common
 * ancestor (LCA) of nodes 2 and 8 is 6. Another example is LCA of nodes 2 and 4 is 2, since a node
 * can be a descendant of itself according to the LCA definition.
 */</comment>
<class><specifier>public</specifier> class <name>LowestCommonAncestorBST</name> <block>{
  <class>class <name>TreeNode</name> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>val</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TreeNode</name></type> <name>left</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TreeNode</name></type> <name>right</name></decl>;</decl_stmt>

    <constructor><name>TreeNode</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name>val</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>
  }</block></class>

  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content/>}</block></function>

  <function><type><specifier>private</specifier> <name>TreeNode</name></type> <name>lowestCommonAncestor</name><parameter_list>(<parameter><decl><type><name>TreeNode</name></type> <name>root</name></decl></parameter>, <parameter><decl><type><name>TreeNode</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>TreeNode</name></type> <name>q</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>root</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>.</operator><name>val</name></name> <operator>==</operator> <name><name>root</name><operator>.</operator><name>val</name></name> <operator>||</operator> <name><name>q</name><operator>.</operator><name>val</name></name> <operator>==</operator> <name><name>root</name><operator>.</operator><name>val</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>root</name></expr>;</return></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>p</name><operator>.</operator><name><name>val</name> <argument_list type="generic">&lt; <argument><name><name>root</name><operator>.</operator><name>val</name></name> <operator>&amp;&amp;</operator> <name><name>q</name><operator>.</operator><name>val</name></name></argument> &gt;</argument_list></name></name> <name><name>root</name><operator>.</operator><name>val</name></name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>q</name><operator>.</operator><name><name>val</name> <argument_list type="generic">&lt; <argument><name><name>root</name><operator>.</operator><name>val</name></name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>.</operator><name>val</name></name></argument> &gt;</argument_list></name></name> <name><name>root</name><operator>.</operator><name>val</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>root</name></expr>;</return></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><name><name>p</name><operator>.</operator><name>val</name></name> <operator>&lt;</operator> <name><name>root</name><operator>.</operator><name>val</name></name> <operator>&amp;&amp;</operator> <name><name>q</name><operator>.</operator><name>val</name></name> <operator>&lt;</operator> <name><name>root</name><operator>.</operator><name>val</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>lowestCommonAncestor</name><argument_list>(<argument><expr><name><name>root</name><operator>.</operator><name>left</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
    <else>else<block type="pseudo"><block_content> <return>return <expr><call><name>lowestCommonAncestor</name><argument_list>(<argument><expr><name><name>root</name><operator>.</operator><name>right</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
  </block_content>}</block></function>
}</block></class>
</unit>
