<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\sort\LongestWordinDictionarythroughDeleting.java"><class><specifier>public</specifier> class <name>LongestWordinDictionarythroughDeleting</name> <block>{
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isSubsequence</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>y</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>j</name> <operator>&lt;</operator> <call><name><name>x</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>x</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name><name>y</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
        <return>return <expr><name>j</name> <operator>==</operator> <call><name><name>x</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>findLongestWord</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name><name>List</name> <argument_list type="generic">&lt; <argument><name>String</name></argument> &gt;</argument_list></name></type> <name>d</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>Collections</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Comparator</name> <argument_list type="generic">&lt; <argument><name>String</name></argument> &gt;</argument_list></name></super> <argument_list>()</argument_list> <block>{
            <function><type><specifier>public</specifier> <name>int</name></type> <name>compare</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>s1</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>s2</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <return>return <expr><ternary><condition><expr><call><name><name>s2</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <call><name><name>s1</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><call><name><name>s2</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>-</operator> <call><name><name>s1</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><call><name><name>s1</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
            </block_content>}</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>String</name></type> <name>str</name><range>: <expr><name>d</name></expr></range></decl></init>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>isSubsequence</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><name>str</name></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block></for>
        <return>return <expr><literal type="string">""</literal></expr>;</return>
    </block_content>}</block></function>
}</block></class>
</unit>
