<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\sort\MaximumProfitinJobScheduling.java"><class><specifier>public</specifier> class <name>MaximumProfitinJobScheduling</name> <block>{
    <class>class <name>Job</name> <super_list><implements>implements <super><name><name>Comparable</name><argument_list type="generic">&lt;<argument><name>Job</name></argument>&gt;</argument_list></name></super></implements></super_list><block>{
        <decl_stmt><decl><type><name>int</name></type> <name>start</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>end</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>profit</name></decl>;</decl_stmt>
        <constructor><name>Job</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>profit</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>start</name></name> <operator>=</operator> <name>start</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>end</name></name> <operator>=</operator> <name>end</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>profit</name></name> <operator>=</operator> <name>profit</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>
        <function><type><specifier>public</specifier> <name>int</name></type> <name>compareTo</name><parameter_list>(<parameter><decl><type><name>Job</name></type> <name>otherJob</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <return>return <expr><name><name>this</name><operator>.</operator><name>start</name></name> <operator>-</operator> <name><name>otherJob</name><operator>.</operator><name>start</name></name></expr>;</return>
        </block_content>}</block></function>
    }</block></class>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>jobScheduling</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>startTime</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>endTime</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>profit</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><name><name>startTime</name><operator>.</operator><name>length</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Job</name><index>[]</index></name></type> <name>jobs</name> <init>= <expr><operator>new</operator> <name><name>Job</name><index>[<expr><name>n</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><name><name>jobs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>new</operator> <call><name>Job</name><argument_list>(<argument><expr><name><name>startTime</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>endTime</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>profit</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name><name>Arrays</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><name>jobs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>dp</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[<expr><name>n</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>dp</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>jobs</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>profit</name></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>n</name><operator>-</operator><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name><name>jobs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>profit</name></expr></argument>, <argument><expr><name><name>dp</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>jobs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>end</name> <operator>&lt;=</operator> <name><name>jobs</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>start</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>jobs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>profit</name> <operator>+</operator> <name><name>dp</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></for>
        <return>return <expr><name><name>dp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>
    </block_content>}</block></function>
}</block></class>
</unit>
