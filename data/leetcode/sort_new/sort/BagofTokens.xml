<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\sort\BagofTokens.java"><class><specifier>public</specifier> class <name>BagofTokens</name> <block>{
    <function><type><specifier>public</specifier> <name>int</name></type> <name>bagOfTokensScore</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>tokens</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>P</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><name>tokens</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name><name>tokens</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name><name>Arrays</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><name>tokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>j</name> <init>= <expr><name><name>tokens</name><operator>.</operator><name>length</name></name> <operator>-</operator><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name> <operator>&lt;=</operator> <name>j</name></expr>;</condition><incr/>)</control><block>{<block_content>
            <if_stmt><if>if<condition>(<expr><name>ans</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>P</name> <operator>&lt;</operator> <name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
            <comment type="line">//If you are powerful, get whatever you can. :-)</comment>
            <while>while<condition>(<expr><name>i</name><operator>&lt;</operator> <name><name>tokens</name><operator>.</operator><name>length</name></name> <operator>&amp;&amp;</operator> <name>P</name> <operator>&gt;=</operator> <name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block>{<block_content> 
                <expr_stmt><expr><name>ans</name><operator>++</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>P</name> <operator>-=</operator> <name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
            </block_content>}</block></while>
            <comment type="line">//Don't spend to the last penny. Keep it. </comment>
            <if_stmt><if>if<condition>(<expr><name>i</name> <operator>&gt;=</operator> <name>j</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ans</name></expr>;</return></block_content></block></if></if_stmt>
            <comment type="line">//Be more powerful.            </comment>
            <if_stmt><if>if<condition>(<expr><name><name>i</name> <argument_list type="generic">&lt; <argument><name>j</name> <operator>&amp;&amp;</operator> <name>ans</name></argument> &gt;</argument_list></name> <literal type="number">0</literal></expr>)</condition><block>{<block_content>                     
                <expr_stmt><expr><name>P</name> <operator>+=</operator> <name><name>tokens</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>j</name><operator>--</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>ans</name><operator>--</operator></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>ans</name></expr>;</return>
    </block_content>}</block></function>
}</block></class>
</unit>
