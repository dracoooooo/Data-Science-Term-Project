<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\sort\CheckingExistenceofEdgeLengthLimitedPaths.java"><class><specifier>public</specifier> class <name>CheckingExistenceofEdgeLengthLimitedPaths</name> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>curr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    
    <function><type><specifier>public</specifier> <name><name>boolean</name><index>[]</index></name></type> <name>distanceLimitedPathsExist</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index><index>[]</index></name></type> <name>edges</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index><index>[]</index></name></type> <name>queries</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>Arrays</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><name>edges</name></expr></argument>, <argument><expr><lambda><parameter_list>(<parameter><decl><name>a</name></decl></parameter>, <parameter><decl><name>b</name></decl></parameter>)</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><operator>(</operator><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line">// Add another column to the queries so that we know the index after sorting.</comment>
        <decl_stmt><decl><type><name><name>int</name><index>[]</index><index>[]</index></name></type> <name>qs</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[<expr><name><name>queries</name><operator>.</operator><name>length</name></name></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>queries</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><name><name>qs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>new</operator> <name><name>int</name><index>[]</index></name><block>{<expr><name><name>queries</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>, <expr><name><name>queries</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>, <expr><name><name>queries</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>, <expr><name>i</name></expr>}</block></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name><name>Arrays</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><name>qs</name></expr></argument>, <argument><expr><lambda><parameter_list>(<parameter><decl><name>a</name></decl></parameter>, <parameter><decl><name>b</name></decl></parameter>)</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><operator>(</operator><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>boolean</name><index>[]</index></name></type> <name>res</name> <init>= <expr><operator>new</operator> <name><name>boolean</name><index>[<expr><name><name>queries</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>roots</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[<expr><name>n</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>roots</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></for>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>queries</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>q</name> <init>= <expr><name><name>qs</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>res</name><index>[<expr><name><name>q</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <call><name>helper</name><argument_list>(<argument><expr><name>edges</name></expr></argument>, <argument><expr><name><name>q</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>q</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>q</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>roots</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>res</name></expr>;</return>
    </block_content>}</block></function>
    
    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>helper</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index><index>[]</index></name></type> <name>edges</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>limit</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>roots</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>curr</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>edges</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>e</name> <init>= <expr><name><name>edges</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if<condition>(<expr><name><name>e</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&gt;=</operator> <name>limit</name></expr>)</condition> <block>{<block_content>
				<comment type="line">// 'curr' is to mark until which step have we finished the union-find.</comment>
                <expr_stmt><expr><name>curr</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>root1</name> <init>= <expr><call><name>find</name><argument_list>(<argument><expr><name>roots</name></expr></argument>, <argument><expr><name><name>e</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>root2</name> <init>= <expr><call><name>find</name><argument_list>(<argument><expr><name>roots</name></expr></argument>, <argument><expr><name><name>e</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if<condition>(<expr><name>root1</name> <operator>!=</operator> <name>root2</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>roots</name><index>[<expr><name>root1</name></expr>]</index></name> <operator>=</operator> <name>root2</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <return>return <expr><call><name>find</name><argument_list>(<argument><expr><name>roots</name></expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>find</name><argument_list>(<argument><expr><name>roots</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
    
    <function><type><specifier>private</specifier> <name>int</name></type> <name>find</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>roots</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>i</name></expr></init></decl>;</decl_stmt>
        <while>while<condition>(<expr><name><name>roots</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>i</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>roots</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        </block_content>}</block></while>
        <expr_stmt><expr><name><name>roots</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
        <return>return <expr><name>i</name></expr>;</return>
    </block_content>}</block></function>
}</block></class>
</unit>
