<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\sort\SortList.java"><class><specifier>public</specifier> class <name>SortList</name> <block>{
    <function><type><specifier>public</specifier> <name>ListNode</name></type> <name>sortList</name><parameter_list>(<parameter><decl><type><name>ListNode</name></type> <name>head</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>head</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name><name>head</name><operator>.</operator><name>next</name></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>head</name></expr>;</return></block_content></block></if></if_stmt>
        <decl_stmt><decl><type><name>ListNode</name></type> <name>mid</name> <init>= <expr><call><name>getMid</name><argument_list>(<argument><expr><name>head</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ListNode</name></type> <name>left</name> <init>= <expr><call><name>sortList</name><argument_list>(<argument><expr><name>head</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ListNode</name></type> <name>right</name> <init>= <expr><call><name>sortList</name><argument_list>(<argument><expr><name>mid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name>merge</name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name>right</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>ListNode</name></type> <name>merge</name><parameter_list>(<parameter><decl><type><name>ListNode</name></type> <name>list1</name></decl></parameter>, <parameter><decl><type><name>ListNode</name></type> <name>list2</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>ListNode</name></type> <name>dummyHead</name> <init>= <expr><operator>new</operator> <call><name>ListNode</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ListNode</name></type> <name>tail</name> <init>= <expr><name>dummyHead</name></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><name>list1</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>list2</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>list1</name><operator>.</operator><name>val</name></name> <operator>&lt;</operator> <name><name>list2</name><operator>.</operator><name>val</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>tail</name><operator>.</operator><name>next</name></name> <operator>=</operator> <name>list1</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>list1</name> <operator>=</operator> <name><name>list1</name><operator>.</operator><name>next</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>tail</name> <operator>=</operator> <name><name>tail</name><operator>.</operator><name>next</name></name></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name><name>tail</name><operator>.</operator><name>next</name></name> <operator>=</operator> <name>list2</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>list2</name> <operator>=</operator> <name><name>list2</name><operator>.</operator><name>next</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>tail</name> <operator>=</operator> <name><name>tail</name><operator>.</operator><name>next</name></name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></while>
        <expr_stmt><expr><name><name>tail</name><operator>.</operator><name>next</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>list1</name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator></expr> ?</condition><then> <expr><name>list1</name></expr> </then><else>: <expr><name>list2</name></expr></else></ternary></expr>;</expr_stmt>
        <return>return <expr><name><name>dummyHead</name><operator>.</operator><name>next</name></name></expr>;</return>
    </block_content>}</block></function>

    <function><type><name>ListNode</name></type> <name>getMid</name><parameter_list>(<parameter><decl><type><name>ListNode</name></type> <name>head</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>ListNode</name></type> <name>midPrev</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><name>head</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name><name>head</name><operator>.</operator><name>next</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>midPrev</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>midPrev</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator></expr> ?</condition><then> <expr><name>head</name></expr> </then><else>: <expr><name><name>midPrev</name><operator>.</operator><name>next</name></name></expr></else></ternary></expr>;</expr_stmt>
            <expr_stmt><expr><name>head</name> <operator>=</operator> <name><name>head</name><operator>.</operator><name>next</name><operator>.</operator><name>next</name></name></expr>;</expr_stmt>
        </block_content>}</block></while>
        <decl_stmt><decl><type><name>ListNode</name></type> <name>mid</name> <init>= <expr><name><name>midPrev</name><operator>.</operator><name>next</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>midPrev</name><operator>.</operator><name>next</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <return>return <expr><name>mid</name></expr>;</return>
    </block_content>}</block></function>
}</block></class>
</unit>
