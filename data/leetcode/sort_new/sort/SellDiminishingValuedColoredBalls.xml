<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\sort\SellDiminishingValuedColoredBalls.java"><class><specifier>public</specifier> class <name>SellDiminishingValuedColoredBalls</name> <block>{
    <function><type><specifier>public</specifier> <name>int</name></type> <name>maxProfit</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>inventory</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>orders</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>mod</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Arrays</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><name>inventory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>int</name><index>[]</index></name></argument>&gt;</argument_list></name></type> <name>ranges</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>left</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><name>index</name> <operator>&lt;</operator> <name><name>inventory</name><operator>.</operator><name>length</name></name></expr>)</condition> <block>{<block_content> <comment type="line">// create range entry [left, right, size]</comment>
            <expr_stmt><expr><call><name><name>ranges</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>int</name><index>[]</index></name> <block>{<expr><name>left</name></expr>, <expr><name><name>inventory</name><index>[<expr><name>index</name></expr>]</index></name></expr>, <expr><name><name>inventory</name><operator>.</operator><name>length</name></name> <operator>-</operator> <name>index</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>left</name> <operator>=</operator> <name><name>inventory</name><index>[<expr><name>index</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>index</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></while>
        <expr_stmt><expr><name>index</name><operator>--</operator></expr>;</expr_stmt> <comment type="line">// move last index pointer to last index in array</comment>
        <decl_stmt><decl><type><name>long</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><name>orders</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>index</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>range</name> <init>= <expr><call><name><name>ranges</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><name><name>range</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>num</name> <init>= <expr><operator>(</operator><name>size</name> <operator>*</operator> <operator>(</operator><name><name>range</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>range</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>long</name></type> <name>val</name> <init>= <expr><literal type="number">0l</literal></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>num</name> <operator>&gt;=</operator> <name>orders</name></expr>)</condition> <block>{<block_content> <comment type="line">// if we can find the finish the order in this iteration</comment>
                <decl_stmt><decl><type><name>int</name></type> <name>newLeft</name> <init>= <expr><name><name>range</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <operator>(</operator><name>orders</name><operator>/</operator><name>size</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt> <comment type="line">// finding the left bound of this new range [newLeft, right] where newLeft &gt; left</comment>
                <decl_stmt><decl><type><name>long</name></type> <name>extra</name> <init>= <expr><operator>(</operator><operator>(</operator><operator>(</operator><name>long</name><operator>)</operator> <operator>(</operator><name>orders</name><operator>%</operator><name>size</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>newLeft</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>%</operator> <name>mod</name><operator>)</operator></expr></init></decl>;</decl_stmt> <comment type="line">// sum of the values not include in the above range</comment>
                <decl_stmt><decl><type><name>long</name></type> <name>s</name> <init>= <expr><operator>(</operator><call><name>sum</name><argument_list>(<argument><expr><name>newLeft</name></expr></argument>, <argument><expr><name><name>range</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>%</operator> <name>mod</name><operator>)</operator></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>s</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>s</name> <operator>*</operator> <name>size</name><operator>)</operator> <operator>%</operator> <name>mod</name><operator>)</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>s</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>s</name> <operator>+</operator> <name>extra</name><operator>)</operator> <operator>%</operator> <name>mod</name><operator>)</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>val</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content> <comment type="line">// satisfy as much order as we can</comment>
                <expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>sum</name><argument_list>(<argument><expr><name><name>range</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>range</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>%</operator> <name>mod</name></expr>;</expr_stmt> 
                <expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><name>val</name> <operator>*</operator> <name>size</name><operator>)</operator> <operator>%</operator> <name>mod</name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>

            
            <expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><name>res</name> <operator>+</operator> <name>val</name><operator>)</operator> <operator>%</operator> <name>mod</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>orders</name> <operator>-=</operator> <name>num</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>index</name><operator>--</operator></expr>;</expr_stmt>
        </block_content>}</block></while>
        <return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <name>res</name> <operator>%</operator> <name>mod</name></expr>;</return>
    </block_content>}</block></function>
    
    
    <function><type><specifier>private</specifier> <name>long</name></type> <name>sum</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>left</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>right</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>long</name></type> <name>sum</name> <init>= <expr><name>left</name> <operator>+</operator> <name>right</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><name>right</name> <operator>-</operator> <name>left</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>res</name> <init>= <expr><name>sum</name> <operator>*</operator> <operator>(</operator><name>size</name><operator>/</operator><literal type="number">2</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>size</name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>res</name> <operator>+=</operator> <operator>(</operator><name>sum</name><operator>/</operator><literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>res</name></expr>;</return>
    </block_content>}</block></function>
    
}</block></class>
</unit>
