<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\sort\CarFleet.java"><class><specifier>public</specifier> class <name>CarFleet</name> <block>{
    <function><type><specifier>public</specifier> <name>int</name></type> <name>carFleet</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>speed</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>N</name> <init>= <expr><name><name>position</name><operator>.</operator><name>length</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Car</name><index>[]</index></name></type> <name>cars</name> <init>= <expr><operator>new</operator> <name><name>Car</name><index>[<expr><name>N</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>cars</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>new</operator> <call><name>Car</name><argument_list>(<argument><expr><name><name>position</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator> <operator>(</operator><name>target</name> <operator>-</operator> <name><name>position</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>/</operator> <name><name>speed</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        <expr_stmt><expr><call><name><name>Arrays</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><name>cars</name></expr></argument>, <argument><expr><lambda><parameter_list>(<parameter><decl><name>a</name></decl></parameter>, <parameter><decl><name>b</name></decl></parameter>)</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>Integer</name><operator>.</operator><name>compare</name></name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>position</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>position</name></name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>t</name> <init>= <expr><name>N</name></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><operator>--</operator><name>t</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>cars</name><index>[<expr><name>t</name></expr>]</index></name><operator>.</operator><name>time</name> <operator>&lt;</operator> <name><name>cars</name><index>[<expr><name>t</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>time</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>ans</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if> <comment type="line">//if cars[t] arrives sooner, it can't be caught</comment>
            <else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>cars</name><index>[<expr><name>t</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>cars</name><index>[<expr><name>t</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt> <comment type="line">//else, cars[t-1] arrives at same time as cars[t]</comment>
        </block_content>}</block></while>

        <return>return <expr><name>ans</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>t</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</return> <comment type="line">//lone car is fleet (if it exists)</comment>
    </block_content>}</block></function>
    <class>class <name>Car</name> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>position</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>time</name></decl>;</decl_stmt>
        <constructor><name>Car</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name>position</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>time</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>
    }</block></class>
}</block></class>
</unit>
