<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\sort\DiagonalTraverseII.java"><class><specifier>public</specifier> class <name>DiagonalTraverseII</name> <block>{
    <function><type><specifier>public</specifier> <name><name>int</name><index>[]</index></name></type> <name>findDiagonalOrder</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>nums</name></decl></parameter>)</parameter_list> <block>{<block_content>
      
        <decl_stmt><decl><type><name>int</name></type> <name>totalRowNum</name> <init>= <expr><call><name><name>nums</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Value</name></argument>&gt;</argument_list></name></type> <name>values</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Value</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>totalRowNum</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <if_stmt><if>if<condition>(<expr><call><name><name>nums</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
                <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <call><name><name>nums</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Value</name><argument_list>(<argument><expr><call><name><name>nums</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i</name></expr></argument> , <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name><name>Collections</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>result</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[<expr><call><name><name>values</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
        
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>values</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>result</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name><name>values</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getValue</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        
        <return>return <expr><name>result</name></expr>;</return>
    </block_content>}</block></function>
    
    <class><specifier>public</specifier> class <name>Value</name> <super_list><implements>implements <super><name><name>Comparable</name><argument_list type="generic">&lt;<argument><name>Value</name></argument>&gt;</argument_list></name></super></implements></super_list><block>{
        <decl_stmt><decl><type><name>int</name></type> <name>val</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>column</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>row</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>sum</name></decl>;</decl_stmt>
        
        <constructor><specifier>public</specifier> <name>Value</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>column</name></decl></parameter>)</parameter_list><block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>sum</name></name> <operator>=</operator> <name>column</name> <operator>+</operator> <name>row</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>val</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>row</name></name> <operator>=</operator> <name>row</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>column</name></name> <operator>=</operator> <name>column</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>
        
        <function><type><specifier>public</specifier> <name>int</name></type> <name>getValue</name><parameter_list>()</parameter_list><block>{<block_content>
            <return>return <expr><name><name>this</name><operator>.</operator><name>val</name></name></expr>;</return>
        </block_content>}</block></function>
        
        <function><type><specifier>public</specifier> <name>int</name></type> <name>getSum</name><parameter_list>()</parameter_list><block>{<block_content>
            <return>return <expr><name><name>this</name><operator>.</operator><name>sum</name></name></expr>;</return>
        </block_content>}</block></function>
        
        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>int</name></type> <name>compareTo</name><parameter_list>(<parameter><decl><type><name>Value</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <if_stmt><if>if<condition>(<expr><name><name>this</name><operator>.</operator><name>sum</name></name> <operator>&lt;</operator> <name><name>v</name><operator>.</operator><name>sum</name></name></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if>
            <if type="elseif">else if<condition>(<expr><name><name>this</name><operator>.</operator><name>sum</name></name> <operator>&gt;</operator> <name><name>v</name><operator>.</operator><name>sum</name></name></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if>
            <else>else <block>{<block_content>
                <if_stmt><if>if<condition>(<expr><name><name>this</name><operator>.</operator><name>row</name></name> <operator>&gt;</operator> <name><name>v</name><operator>.</operator><name>row</name></name></expr>)</condition><block type="pseudo"><block_content>
                    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if>
                <if type="elseif">else if<condition>(<expr><name><name>this</name><operator>.</operator><name>row</name></name> <operator>&lt;</operator> <name><name>v</name><operator>.</operator><name>row</name></name></expr>)</condition><block type="pseudo"><block_content>
                    <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if>
                <else>else<block type="pseudo"><block_content>
                    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></function>
    }</block></class>
}</block></class>
</unit>
