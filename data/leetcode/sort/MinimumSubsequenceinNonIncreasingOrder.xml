<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\sort\MinimumSubsequenceinNonIncreasingOrder.java"><class><specifier>public</specifier> class <name>MinimumSubsequenceinNonIncreasingOrder</name> <block>{
    <function><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>minSubsequence</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>nums</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type><name>list</name><init>=<expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Arrays</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><name>nums</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>sum</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>sum1</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>a</name><range>:<expr><name>nums</name></expr></range></decl></init>)</control>
        <block>{<block_content>
            <expr_stmt><expr><name>sum</name><operator>+=</operator><name>a</name></expr>;</expr_stmt>
        </block_content>}</block></for>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name><init>=<expr><name><name>nums</name><operator>.</operator><name>length</name></name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <while>while<condition>(<expr><name>i</name><operator>&gt;=</operator><literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>sum</name><operator>=</operator><name>sum</name><operator>-</operator><name><name>nums</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>sum1</name><operator>+=</operator><name><name>nums</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>nums</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            
            <if_stmt><if>if<condition>(<expr><name>sum1</name><operator>&gt;</operator><name>sum</name></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><name>list</name></expr>;</return></block_content></block></if></if_stmt>            
            <expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt>
        </block_content>}</block></while>
        <return>return <expr><name>list</name></expr>;</return>
    </block_content>}</block></function>
}</block></class>
</unit>
