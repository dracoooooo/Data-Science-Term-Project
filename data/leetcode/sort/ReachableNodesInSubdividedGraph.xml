<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\sort\ReachableNodesInSubdividedGraph.java"><package>package <name>heap</name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Created by gouthamvidyapradhan on 07/05/2019 Starting with an undirected graph (the "original
 * graph") with nodes from 0 to N-1, subdivisions are made to some of the edges.
 *
 * &lt;p&gt;The graph is given as follows: edges[k] is a list of integer pairs (i, j, n) such that (i, j)
 * is an edge of the original graph,
 *
 * &lt;p&gt;and n is the total number of new nodes on that edge.
 *
 * &lt;p&gt;Then, the edge (i, j) is deleted from the original graph, n new nodes (x_1, x_2, ..., x_n) are
 * added to the original graph,
 *
 * &lt;p&gt;and n+1 new edges (i, x_1), (x_1, x_2), (x_2, x_3), ..., (x_{n-1}, x_n), (x_n, j) are added to
 * the original graph.
 *
 * &lt;p&gt;Now, you start at node 0 from the original graph, and in each move, you travel along one edge.
 *
 * &lt;p&gt;Return how many nodes you can reach in at most M moves.
 *
 * &lt;p&gt;Example 1:
 *
 * &lt;p&gt;Input: edges = [[0,1,10],[0,2,1],[1,2,2]], M = 6, N = 3 Output: 13 Explanation: The nodes that
 * are reachable in the final graph after M = 6 moves are indicated below.
 *
 * &lt;p&gt;Example 2:
 *
 * &lt;p&gt;Input: edges = [[0,1,4],[1,2,6],[0,2,8],[1,3,1]], M = 10, N = 4 Output: 23
 *
 * &lt;p&gt;Note:
 *
 * &lt;p&gt;0 &lt;= edges.length &lt;= 10000 0 &lt;= edges[i][0] &lt; edges[i][1] &lt; N There does not exist any i != j
 * for which edges[i][0] == edges[j][0] and edges[i][1] == edges[j][1]. The original graph has no
 * parallel edges. 0 &lt;= edges[i][2] &lt;= 10000 0 &lt;= M &lt;= 10^9 1 &lt;= N &lt;= 3000 A reachable node is a
 * node that can be travelled to using at most M moves starting from node 0.
 *
 * &lt;p&gt;Solution: O(E log N) E is the length of edges and N is the number of nodes. The n nodes on a
 * edge form a weight and thus the graph becomes a weighted graph. Keep track of number of moves
 * available and run a Dijkstra's algorithm.
 */</comment>
<class><specifier>public</specifier> class <name>ReachableNodesInSubdividedGraph</name> <block>{

  <comment type="block" format="javadoc">/**
   * Main method
   *
   * @param args
   */</comment>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>int</name><index>[]</index><index>[]</index></name></type> <name>edges</name> <init>= <expr><block>{<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1000</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ReachableNodesInSubdividedGraph</name><argument_list>()</argument_list></call><operator>.</operator><call><name>reachableNodes</name><argument_list>(<argument><expr><name>edges</name></expr></argument>, <argument><expr><literal type="number">200</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <class><specifier>static</specifier> class <name>Node</name> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>w</name></decl>;</decl_stmt>

    <constructor><name>Node</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>n</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>w</name></name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>
  }</block></class>

  <function><type><specifier>public</specifier> <name>int</name></type> <name>reachableNodes</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index><index>[]</index></name></type> <name>edges</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>M</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>N</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>Node</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>graph</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name><name>int</name><index>[]</index></name></type> <name>e</name> <range>: <expr><name>edges</name></expr></range></decl></init>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name><name>graph</name><operator>.</operator><name>putIfAbsent</name></name><argument_list>(<argument><expr><name><name>e</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>graph</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>e</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>add</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Node</name><argument_list>(<argument><expr><name><name>e</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>e</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>graph</name><operator>.</operator><name>putIfAbsent</name></name><argument_list>(<argument><expr><name><name>e</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>graph</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>e</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>add</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Node</name><argument_list>(<argument><expr><name><name>e</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>e</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <decl_stmt><decl><type><name><name>PriorityQueue</name><argument_list type="generic">&lt;<argument><name>Node</name></argument>&gt;</argument_list></name></type> <name>pq</name> <init>= <expr><operator>new</operator> <call><name><name>PriorityQueue</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>Comparator</name><operator>.</operator><name>comparingInt</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>o</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>o</name><operator>.</operator><name>w</name></name></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>distance</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>pq</name><operator>.</operator><name>offer</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Node</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while <condition>(<expr><operator>!</operator><call><name><name>pq</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>Node</name></type> <name>curr</name> <init>= <expr><call><name><name>pq</name><operator>.</operator><name>poll</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>distance</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name><name>curr</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>count</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>distance</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>curr</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>curr</name><operator>.</operator><name>w</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Node</name></argument>&gt;</argument_list></name></type> <name>children</name> <init>= <expr><call><name><name>graph</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>curr</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>children</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
          <for>for <control>(<init><decl><type><name>Node</name></type> <name>c</name> <range>: <expr><name>children</name></expr></range></decl></init>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>distance</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name><name>c</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
              <decl_stmt><decl><type><name>int</name></type> <name>availableMoves</name> <init>= <expr><name>M</name> <operator>-</operator> <name><name>curr</name><operator>.</operator><name>w</name></name></expr></init></decl>;</decl_stmt>
              <decl_stmt><decl><type><name>int</name></type> <name>nodesInBetween</name> <init>= <expr><name><name>c</name><operator>.</operator><name>w</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
              <if_stmt><if>if <condition>(<expr><name>nodesInBetween</name> <operator>&gt;=</operator> <name>availableMoves</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>count</name> <operator>+=</operator> <name>availableMoves</name></expr>;</expr_stmt>
              </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>count</name> <operator>+=</operator> <name>nodesInBetween</name></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>availableMoves</name> <operator>&gt;=</operator> <name><name>c</name><operator>.</operator><name>w</name></name></expr>)</condition> <block>{<block_content>
                  <decl_stmt><decl><type><name>Node</name></type> <name>child</name> <init>= <expr><operator>new</operator> <call><name>Node</name><argument_list>(<argument><expr><name><name>c</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><call><name><name>distance</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>curr</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>c</name><operator>.</operator><name>w</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                  <expr_stmt><expr><call><name><name>pq</name><operator>.</operator><name>offer</name></name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
              </block_content>}</block></else></if_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
              <decl_stmt><decl><type><name>int</name></type> <name>childAvailableMoves</name> <init>= <expr><name>M</name> <operator>-</operator> <call><name><name>distance</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>c</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
              <decl_stmt><decl><type><name>int</name></type> <name>nodesInBetween</name> <init>= <expr><name><name>c</name><operator>.</operator><name>w</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
              <decl_stmt><decl><type><name>int</name></type> <name>unvisitedNodes</name> <init>= <expr><name>nodesInBetween</name> <operator>-</operator> <name>childAvailableMoves</name></expr></init></decl>;</decl_stmt>
              <if_stmt><if>if <condition>(<expr><name>unvisitedNodes</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>availableMovesForCurr</name> <init>= <expr><name>M</name> <operator>-</operator> <call><name><name>distance</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>curr</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>count</name> <operator>+=</operator>
                    <operator>(</operator><ternary><condition><expr><name>unvisitedNodes</name> <operator>&gt;=</operator> <name>availableMovesForCurr</name></expr>
                        ?</condition><then> <expr><name>availableMovesForCurr</name></expr>
                        </then><else>: <expr><name>unvisitedNodes</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
              </block_content>}</block></if></if_stmt>
            </block_content>}</block></else></if_stmt>
          </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
    <return>return <expr><name>count</name></expr>;</return>
  </block_content>}</block></function>
}</block></class>
</unit>
