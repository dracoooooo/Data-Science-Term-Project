<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\array\array\RevealCardsInIncreasingOrder.java"><package>package <name>array</name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayDeque</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Created by gouthamvidyapradhan on 12/08/2019 In a deck of cards, every card has a unique integer.
 * You can order the deck in any order you want.
 *
 * &lt;p&gt;Initially, all the cards start face down (unrevealed) in one deck.
 *
 * &lt;p&gt;Now, you do the following steps repeatedly, until all cards are revealed:
 *
 * &lt;p&gt;Take the top card of the deck, reveal it, and take it out of the deck. If there are still
 * cards in the deck, put the next top card of the deck at the bottom of the deck. If there are
 * still unrevealed cards, go back to step 1. Otherwise, stop. Return an ordering of the deck that
 * would reveal the cards in increasing order.
 *
 * &lt;p&gt;The first entry in the answer is considered to be the top of the deck.
 *
 * &lt;p&gt;Example 1:
 *
 * &lt;p&gt;Input: [17,13,11,2,3,5,7] Output: [2,13,3,11,5,17,7] Explanation: We get the deck in the order
 * [17,13,11,2,3,5,7] (this order doesn't matter), and reorder it. After reordering, the deck starts
 * as [2,13,3,11,5,17,7], where 2 is the top of the deck. We reveal 2, and move 13 to the bottom.
 * The deck is now [3,11,5,17,7,13]. We reveal 3, and move 11 to the bottom. The deck is now
 * [5,17,7,13,11]. We reveal 5, and move 17 to the bottom. The deck is now [7,13,11,17]. We reveal
 * 7, and move 13 to the bottom. The deck is now [11,17,13]. We reveal 11, and move 17 to the
 * bottom. The deck is now [13,17]. We reveal 13, and move 17 to the bottom. The deck is now [17].
 * We reveal 17. Since all the cards revealed are in increasing order, the answer is correct.
 *
 * &lt;p&gt;Note:
 *
 * &lt;p&gt;1 &lt;= A.length &lt;= 1000 1 &lt;= A[i] &lt;= 10^6 A[i] != A[j] for all i != j
 *
 * &lt;p&gt;Solution: O(N) General idea is to start from the last element and build the array of element
 * in the backwards order. Use a doubly-ended queue which allows you to poll from either end of a
 * queue.
 */</comment>
<class><specifier>public</specifier> class <name>RevealCardsInIncreasingOrder</name> <block>{
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>A</name> <init>= <expr><block>{<expr><literal type="number">17</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>R</name> <init>= <expr><operator>new</operator> <call><name>RevealCardsInIncreasingOrder</name><argument_list>()</argument_list></call><operator>.</operator><call><name>deckRevealedIncreasing</name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name><name>int</name><index>[]</index></name></type> <name>deckRevealedIncreasing</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>deck</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>Arrays</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><name>deck</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>ArrayDeque</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>queue</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayDeque</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>deck</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name><name>queue</name><operator>.</operator><name>offer</name></name><argument_list>(<argument><expr><name><name>deck</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>temp</name> <init>= <expr><call><name><name>queue</name><operator>.</operator><name>pollFirst</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>queue</name><operator>.</operator><name>offer</name></name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>answer</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[<expr><name><name>deck</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><operator>!</operator><call><name><name>queue</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>answer</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name><name>queue</name><operator>.</operator><name>pollLast</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
    <return>return <expr><name>answer</name></expr>;</return>
  </block_content>}</block></function>
}</block></class>
</unit>
