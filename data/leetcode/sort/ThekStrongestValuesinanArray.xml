<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\sort\ThekStrongestValuesinanArray.java"><class><specifier>public</specifier> class <name>ThekStrongestValuesinanArray</name> <block>{
    <function><type><specifier>public</specifier> <name><name>int</name><index>[]</index></name></type> <name>getStrongest</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>arr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>Arrays</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><name>arr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>L</name> <init>= <expr><name><name>arr</name><operator>.</operator><name>length</name></name></expr></init></decl>;</decl_stmt>
        
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>median</name> <init>= <expr><name><name>arr</name><index>[<expr><operator>(</operator><name>L</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        
        <return>return <expr><call><name><name>Arrays</name><operator>.</operator><name>copyOfRange</name></name><argument_list>(<argument><expr><call><name><name>Arrays</name><operator>.</operator><name>stream</name></name><argument_list>(<argument><expr><name>arr</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>boxed</name><argument_list>()</argument_list></call><operator>.</operator><call><name>sorted</name><argument_list>(<argument><expr><lambda><parameter_list>(<parameter><decl><name>a</name></decl></parameter>, <parameter><decl><name>b</name></decl></parameter>)</parameter_list> -&gt;<block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>abs</name></name><argument_list>(<argument><expr><name>a</name> <operator>-</operator> <name>median</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>y</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>abs</name></name><argument_list>(<argument><expr><name>b</name> <operator>-</operator> <name>median</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><ternary><condition><expr><name>x</name> <operator>==</operator> <name>y</name></expr> ?</condition><then> <expr><name>b</name> <operator>-</operator> <name>a</name></expr> </then><else>: <expr><name>y</name> <operator>-</operator> <name>x</name></expr></else></ternary></expr>;</return>
        </block_content>}</block></lambda></expr></argument>)</argument_list></call><operator>.</operator><call><name>mapToInt</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>i</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name>i</name></expr></block_content></block></lambda></expr></argument>)</argument_list></call><operator>.</operator><call><name>toArray</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
}</block></class>
</unit>
