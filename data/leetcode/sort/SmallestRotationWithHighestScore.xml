<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\sort\SmallestRotationWithHighestScore.java"><package>package <name>heap</name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Comparator</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>PriorityQueue</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Created by gouthamvidyapradhan on 06/04/2019 Given an array A, we may rotate it by a non-negative
 * integer K so that the array becomes A[K], A[K+1], A{K+2], ... A[A.length - 1], A[0], A[1], ...,
 * A[K-1]. Afterward, any entries that are less than or equal to their index are worth 1 point.
 *
 * &lt;p&gt;For example, if we have [2, 4, 1, 3, 0], and we rotate by K = 2, it becomes [1, 3, 0, 2, 4].
 * This is worth 3 points because 1 &gt; 0 [no points], 3 &gt; 1 [no points], 0 &lt;= 2 [one point], 2 &lt;= 3
 * [one point], 4 &lt;= 4 [one point].
 *
 * &lt;p&gt;Over all possible rotations, return the rotation index K that corresponds to the highest score
 * we could receive. If there are multiple answers, return the smallest such index K.
 *
 * &lt;p&gt;Example 1: Input: [2, 3, 1, 4, 0] Output: 3 Explanation: Scores for each K are listed below: K
 * = 0, A = [2,3,1,4,0], score 2 K = 1, A = [3,1,4,0,2], score 3 K = 2, A = [1,4,0,2,3], score 3 K =
 * 3, A = [4,0,2,3,1], score 4 K = 4, A = [0,2,3,1,4], score 3 So we should choose K = 3, which has
 * the highest score.
 *
 * &lt;p&gt;Example 2: Input: [1, 3, 0, 2, 4] Output: 0 Explanation: A will always have 3 points no matter
 * how it shifts. So we will choose the smallest K, which is 0. Note:
 *
 * &lt;p&gt;A will have length at most 20000. A[i] will be in the range [0, A.length].
 *
 * &lt;p&gt;Solution O(NLogN). The key insight to this problem is to notice that the point of a number
 * changes to 1 from 0 if the position changes to A.length - 1 and similarly the point changes to 1
 * from 0 if the position changes to a index = NUM - 1. Maintain a priority queue with
 * rotation_count (the number of rotation required to change its points from either 0 to 1 or from 1
 * to 0), pop all the indices from priority queue which has rotation_count equal to current rotation
 * count and update the rotation_count to its next value. Maintain a max count and the rotation
 * index pair and return rotation index as the answer.
 */</comment>
<class><specifier>public</specifier> class <name>SmallestRotationWithHighestScore</name> <block>{

  <class><specifier>private</specifier> class <name>Node</name> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>r</name></decl>, <decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>

    <constructor><name>Node</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>i</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>n</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>r</name></name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>v</name></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>
  }</block></class>
  <comment type="block" format="javadoc">/**
   * Main method
   *
   * @param args
   */</comment>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>A</name> <init>= <expr><block>{<expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SmallestRotationWithHighestScore</name><argument_list>()</argument_list></call><operator>.</operator><call><name>bestRotation</name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>int</name></type> <name>bestRotation</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>A</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>PriorityQueue</name><argument_list type="generic">&lt;<argument><name>Node</name></argument>&gt;</argument_list></name></type> <name>pq</name> <init>= <expr><operator>new</operator> <call><name><name>PriorityQueue</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>Comparator</name><operator>.</operator><name>comparingInt</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>o</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>o</name><operator>.</operator><name>r</name></name></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>curr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>A</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>num</name> <init>= <expr><name><name>A</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>r</name> <init>= <expr><name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>num</name> <operator>&lt;=</operator> <name>i</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>v</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>curr</name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>num</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>r</name> <operator>=</operator> <ternary><condition><expr><name>v</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><operator>(</operator><name>i</name> <operator>-</operator> <name>num</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name><name>pq</name><operator>.</operator><name>offer</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Node</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <decl_stmt><decl><type><name>int</name></type> <name>R</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>max</name> <init>= <expr><name>curr</name></expr></init></decl>, <decl><type ref="prev"/><name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>R</name> <operator>&lt;</operator> <name><name>A</name><operator>.</operator><name>length</name></name></expr>)</condition> <block>{<block_content>
      <while>while <condition>(<expr><call><name><name>pq</name><operator>.</operator><name>peek</name></name><argument_list>()</argument_list></call><operator>.</operator><name>r</name> <operator>-</operator> <name>R</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>Node</name></type> <name>top</name> <init>= <expr><call><name><name>pq</name><operator>.</operator><name>poll</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>top</name><operator>.</operator><name>v</name></name> <operator>=</operator> <operator>(</operator><name><name>top</name><operator>.</operator><name>v</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>top</name><operator>.</operator><name>i</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>top</name><operator>.</operator><name>i</name></name> <operator>-</operator> <name>R</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name><name>A</name><operator>.</operator><name>length</name></name> <operator>+</operator> <operator>(</operator><name><name>top</name><operator>.</operator><name>i</name></name> <operator>-</operator> <name>R</name><operator>)</operator><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><name><name>top</name><operator>.</operator><name>i</name></name> <operator>-</operator> <name>R</name><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>top</name><operator>.</operator><name>r</name></name> <operator>=</operator> <ternary><condition><expr><name><name>top</name><operator>.</operator><name>v</name></name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>top</name><operator>.</operator><name>i</name></name> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><operator>(</operator><name><name>top</name><operator>.</operator><name>i</name></name> <operator>-</operator> <name><name>top</name><operator>.</operator><name>n</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>top</name><operator>.</operator><name>r</name></name> <operator>+=</operator> <name>R</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>curr</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>top</name><operator>.</operator><name>v</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>curr</name> <operator>-</operator> <literal type="number">1</literal></expr> </then><else>: <expr><name>curr</name> <operator>+</operator> <literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>pq</name><operator>.</operator><name>offer</name></name><argument_list>(<argument><expr><name>top</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></while>
      <if_stmt><if>if <condition>(<expr><name>curr</name> <operator>&gt;</operator> <name>max</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>ans</name> <operator>=</operator> <name>R</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>max</name> <operator>=</operator> <name>curr</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>R</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>
    <return>return <expr><name>ans</name></expr>;</return>
  </block_content>}</block></function>
}</block></class>
</unit>
