<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\sort\MaximumPerformanceofaTeam.java"><class><specifier>public</specifier> class <name>MaximumPerformanceofaTeam</name> <block>{
    <function><type><specifier>public</specifier> <name>int</name></type> <name>maxPerformance</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>speed</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>efficiency</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>)</parameter_list> <block>{<block_content>
        
    
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Engineer</name></argument>&gt;</argument_list></name></type> <name>engineers</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>engineers</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Engineer</name><argument_list>(<argument><expr><name><name>speed</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>efficiency</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        
        
        <expr_stmt><expr><call><name><name>engineers</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><lambda><parameter_list>(<parameter><decl><name>a</name></decl></parameter>, <parameter><decl><name>b</name></decl></parameter>)</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>b</name><operator>.</operator><name>efficiency</name></name> <operator>-</operator> <name><name>a</name><operator>.</operator><name>efficiency</name></name></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <comment type="line">//will keep slowest members at the top, fastest ones stay in the team longest</comment>
        <decl_stmt><decl><type><name><name>PriorityQueue</name><argument_list type="generic">&lt;<argument><name>Engineer</name></argument>&gt;</argument_list></name></type> <name>currentTeam</name> <init>= <expr><operator>new</operator> <call><name><name>PriorityQueue</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><lambda><parameter_list>(<parameter><decl><name>a</name></decl></parameter>, <parameter><decl><name>b</name></decl></parameter>)</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>a</name><operator>.</operator><name>speed</name></name> <operator>-</operator> <name><name>b</name><operator>.</operator><name>speed</name></name></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        
        <comment type="line">//now iterate the engineers by most efficient to least, and add them to the currentTeam</comment>
        
        <decl_stmt><decl><type><name>long</name></type> <name>teamSpeed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>maxPerformance</name> <init>= <expr><name><name>Long</name><operator>.</operator><name>MIN_VALUE</name></name></expr></init></decl>;</decl_stmt>
        
        <for>for<control>(<init><decl><type><name>Engineer</name></type> <name>newHire</name> <range>: <expr><name>engineers</name></expr></range></decl></init>)</control><block>{<block_content>
            
            
            <if_stmt><if>if<condition>(<expr><call><name><name>currentTeam</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>k</name></expr>)</condition><block>{<block_content>
                
                
                <decl_stmt><decl><type><name>Engineer</name></type> <name>slowGuy</name> <init>= <expr><call><name><name>currentTeam</name><operator>.</operator><name>poll</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                
                <comment type="line">//System.out.println("slowGuy: " + slowGuy.efficiency + " " + slowGuy.speed);</comment>
                <comment type="line">//now we must remove the slow guys speed from our total speed</comment>
                
                <expr_stmt><expr><name>teamSpeed</name> <operator>-=</operator> <name><name>slowGuy</name><operator>.</operator><name>speed</name></name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            
            <expr_stmt><expr><call><name><name>currentTeam</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>newHire</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            
            <expr_stmt><expr><name>teamSpeed</name> <operator>+=</operator> <name><name>newHire</name><operator>.</operator><name>speed</name></name></expr>;</expr_stmt>
            

            <decl_stmt><decl><type><name>long</name></type> <name>performanceWithNewGuy</name> <init>= <expr><name>teamSpeed</name> <operator>*</operator> <operator>(</operator><name>long</name><operator>)</operator> <name><name>newHire</name><operator>.</operator><name>efficiency</name></name></expr></init></decl>;</decl_stmt>
            
            <comment type="line">//check wether the performance has been imporved br bringing on the new hire</comment>
            <expr_stmt><expr><name>maxPerformance</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name>maxPerformance</name></expr></argument>, <argument><expr><name>performanceWithNewGuy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        
       <return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>maxPerformance</name> <operator>%</operator> <name>MOD</name><operator>)</operator></expr>;</return>
    </block_content>}</block></function>
    
    <decl_stmt><decl><type><name>int</name></type> <name>MOD</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
    
    <class>class <name>Engineer</name><block>{
        
        <decl_stmt><decl><type><name>int</name></type> <name>speed</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>efficiency</name></decl>;</decl_stmt>
        
        <constructor><specifier>public</specifier> <name>Engineer</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>speed</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>efficiency</name></decl></parameter>)</parameter_list><block>{<block_content>
            
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>speed</name></name> <operator>=</operator> <name>speed</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>efficiency</name></name> <operator>=</operator> <name>efficiency</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>
    }</block></class>
}</block></class>
</unit>
