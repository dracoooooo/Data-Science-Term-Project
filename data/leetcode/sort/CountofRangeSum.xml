<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\sort\CountofRangeSum.java"><class><specifier>public</specifier> class <name>CountofRangeSum</name> <block>{
    <function><type><specifier>public</specifier> <name>int</name></type> <name>countRangeSum</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>nums</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lower</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>upper</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>nums</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name><name>nums</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    
        <decl_stmt><decl><type><name><name>long</name><index>[]</index></name></type> <name>preSums</name> <init>= <expr><operator>new</operator> <name><name>long</name><index>[<expr><name><name>nums</name><operator>.</operator><name>length</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>  
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>preSums</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>preSums</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>preSums</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>nums</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for> 
        
        <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>result</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>  
        <expr_stmt><expr><call><name>mergeSort</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>preSums</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>preSums</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>lower</name></expr></argument>, <argument><expr><name>upper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name><name>result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>
    </block_content>}</block></function>
    
    <function><type><specifier>private</specifier> <name><name>long</name><index>[]</index></name></type> <name>mergeSort</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>result</name></decl></parameter>, <parameter><decl><type><name><name>long</name><index>[]</index></name></type> <name>preSums</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lower</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>upper</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>l</name> <operator>==</operator> <name>r</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>new</operator> <name><name>long</name><index>[]</index></name><block>{<expr><name><name>preSums</name><index>[<expr><name>l</name></expr>]</index></name></expr>}</block></expr>;</return></block_content></block></if></if_stmt>
        
        <decl_stmt><decl><type><name>int</name></type> <name>mid</name> <init>= <expr><name>l</name> <operator>+</operator> <operator>(</operator><name>r</name> <operator>-</operator> <name>l</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>long</name><index>[]</index></name></type> <name>left</name> <init>= <expr><call><name>mergeSort</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>preSums</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>mid</name></expr></argument>, <argument><expr><name>lower</name></expr></argument>, <argument><expr><name>upper</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>long</name><index>[]</index></name></type> <name>right</name> <init>= <expr><call><name>mergeSort</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>preSums</name></expr></argument>, <argument><expr><name>mid</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>lower</name></expr></argument>, <argument><expr><name>upper</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    
        <decl_stmt><decl><type><name><name>long</name><index>[]</index></name></type> <name>merged</name> <init>= <expr><operator>new</operator> <name><name>long</name><index>[<expr><name><name>left</name><operator>.</operator><name>length</name></name> <operator>+</operator> <name><name>right</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>start</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>end</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>left</name><operator>.</operator><name>length</name></name> <operator>||</operator> <name>j</name> <operator>&lt;</operator> <name><name>right</name><operator>.</operator><name>length</name></name></expr>;</condition><incr/>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>j</name> <operator>==</operator> <name><name>right</name><operator>.</operator><name>length</name></name> <operator>||</operator> <operator>(</operator><name>i</name> <operator>&lt;</operator> <name><name>left</name><operator>.</operator><name>length</name></name> <operator>&amp;&amp;</operator> <name><name>left</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;=</operator> <name><name>right</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator></expr>)</condition> <block>{<block_content>
                <while>while <condition>(<expr><name>start</name> <operator>&lt;</operator> <name><name>right</name><operator>.</operator><name>length</name></name> <operator>&amp;&amp;</operator> <name><name>right</name><index>[<expr><name>start</name></expr>]</index></name> <operator>-</operator> <name><name>left</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name>lower</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>start</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
                <while>while <condition>(<expr><name>end</name> <operator>&lt;</operator> <name><name>right</name><operator>.</operator><name>length</name></name> <operator>&amp;&amp;</operator> <name><name>right</name><index>[<expr><name>end</name></expr>]</index></name> <operator>-</operator> <name><name>left</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;=</operator> <name>upper</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>end</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>    
                <expr_stmt><expr><name><name>result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name>end</name> <operator>-</operator> <name>start</name></expr>;</expr_stmt>  
                <expr_stmt><expr><name><name>merged</name><index>[<expr><name>i</name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>=</operator> <name><name>left</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name><name>merged</name><index>[<expr><name>i</name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>=</operator> <name><name>right</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>merged</name></expr>;</return>
    </block_content>}</block></function>
}</block></class>
</unit>
