<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\array\array\MaxChunksToMakeSortedII.java"><class><specifier>public</specifier> class <name>MaxChunksToMakeSortedII</name> <block>{
    <function><type><specifier>public</specifier> <name>int</name></type> <name>maxChunksToSorted</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>arr</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>count</name> <init>= <expr><operator>new</operator> <call><name>HashMap</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Pair</name></argument>&gt;</argument_list></name></type> <name>counted</name> <init>= <expr><operator>new</operator> <call><name>ArrayList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>x</name><range>: <expr><name>arr</name></expr></range></decl></init>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name><name>count</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><call><name><name>count</name><operator>.</operator><name>getOrDefault</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>counted</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Pair</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><call><name><name>count</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Pair</name></argument>&gt;</argument_list></name></type> <name>expect</name> <init>= <expr><operator>new</operator> <call><name>ArrayList</name><argument_list>(<argument><expr><name>counted</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Collections</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><name>expect</name></expr></argument>, <argument><expr><lambda><parameter_list>(<parameter><decl><name>a</name></decl></parameter>, <parameter><decl><name>b</name></decl></parameter>)</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>a</name><operator>.</operator><name>compare</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Pair</name></type> <name>cur</name> <init>= <expr><call><name><name>counted</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>arr</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>Pair</name></type> <name>X</name> <init>= <expr><call><name><name>counted</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>Y</name> <init>= <expr><call><name><name>expect</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>X</name><operator>.</operator><name>compare</name></name><argument_list>(<argument><expr><name>cur</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>cur</name> <operator>=</operator> <name>X</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name><name>cur</name><operator>.</operator><name>compare</name></name><argument_list>(<argument><expr><name>Y</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>ans</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></for>

        <return>return <expr><name>ans</name></expr>;</return>
    </block_content>}</block></function>
    <class>class <name>Pair</name> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>val</name></decl>, <decl><type ref="prev"/><name>count</name></decl>;</decl_stmt>
        <constructor><name>Pair</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name>val</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt> <expr_stmt><expr><name>count</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>
        <function><type><name>int</name></type> <name>compare</name><parameter_list>(<parameter><decl><type><name>Pair</name></type> <name>that</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <return>return <expr><ternary><condition><expr><name><name>this</name><operator>.</operator><name>val</name></name> <operator>!=</operator> <name><name>that</name><operator>.</operator><name>val</name></name></expr> ?</condition><then> <expr><name><name>this</name><operator>.</operator><name>val</name></name> <operator>-</operator> <name><name>that</name><operator>.</operator><name>val</name></name></expr> </then><else>: <expr><name><name>this</name><operator>.</operator><name>count</name></name> <operator>-</operator> <name><name>that</name><operator>.</operator><name>count</name></name></expr></else></ternary></expr>;</return>
        </block_content>}</block></function>
    }</block></class>
}</block></class>
</unit>
