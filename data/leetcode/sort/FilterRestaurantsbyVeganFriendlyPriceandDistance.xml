<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\sort\FilterRestaurantsbyVeganFriendlyPriceandDistance.java"><class><specifier>public</specifier> class <name>FilterRestaurantsbyVeganFriendlyPriceandDistance</name> <block>{
    <function><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>filterRestaurants</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index><index>[]</index></name></type> <name>restaurants</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>veganFriendly</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxPrice</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxDistance</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>int</name><index>[]</index></name></argument>&gt;</argument_list></name></type> <name>list</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">//Remove all restaurents that not satisfying conditions</comment>
        <for>for<control>(<init><decl><type><name><name>int</name><index>[]</index></name></type> <name>arr</name><range>: <expr><name>restaurants</name></expr></range></decl></init>)</control> <block>{<block_content>
            <if_stmt><if>if<condition>(<expr><operator>(</operator><name>veganFriendly</name> <operator>==</operator> <name><name>arr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>||</operator> <name>veganFriendly</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> 
              <operator>&amp;&amp;</operator> <name>maxPrice</name> <operator>&gt;=</operator> <name><name>arr</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name>maxDistance</name> <operator>&gt;=</operator> <name><name>arr</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>arr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        
        <comment type="line">//Sort valid restaurents</comment>
        <expr_stmt><expr><call><name><name>Collections</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><lambda><parameter_list>(<parameter><decl><name>a</name></decl></parameter>,<parameter><decl><name>b</name></decl></parameter>)</parameter_list> -&gt;<block type="pseudo"><block_content> 
            <expr><operator>(</operator><ternary><condition><expr><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>==</operator><name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> ?</condition><then> <expr><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-</operator><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> </then><else>: <expr><name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-</operator><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></else></ternary><operator>)</operator></expr></block_content></block></lambda></expr></argument>
        )</argument_list></call></expr>;</expr_stmt>
        
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name><name>int</name><index>[]</index></name></type> <name>arr</name><range>: <expr><name>list</name></expr></range></decl></init>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>arr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        
        <return>return <expr><name>result</name></expr>;</return>
    </block_content>}</block></function>
}</block></class>
</unit>
