<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\sort\FreqStack.java"><package>package <name>heap</name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Created by gouthamvidyapradhan on 30/04/2019 Implement FreqStack, a class which simulates the
 * operation of a stack-like data structure.
 *
 * &lt;p&gt;FreqStack has two functions:
 *
 * &lt;p&gt;push(int x), which pushes an integer x onto the stack. pop(), which removes and returns the
 * most frequent element in the stack. If there is a tie for most frequent element, the element
 * closest to the top of the stack is removed and returned.
 *
 * &lt;p&gt;Example 1:
 *
 * &lt;p&gt;Input: ["FreqStack","push","push","push","push","push","push","pop","pop","pop","pop"],
 * [[],[5],[7],[5],[7],[4],[5],[],[],[],[]] Output: [null,null,null,null,null,null,null,5,7,5,4]
 * Explanation: After making six .push operations, the stack is [5,7,5,7,4,5] from bottom to top.
 * Then:
 *
 * &lt;p&gt;pop() -&gt; returns 5, as 5 is the most frequent. The stack becomes [5,7,5,7,4].
 *
 * &lt;p&gt;pop() -&gt; returns 7, as 5 and 7 is the most frequent, but 7 is closest to the top. The stack
 * becomes [5,7,5,4].
 *
 * &lt;p&gt;pop() -&gt; returns 5. The stack becomes [5,7,4].
 *
 * &lt;p&gt;pop() -&gt; returns 4. The stack becomes [5,7].
 *
 * &lt;p&gt;Note:
 *
 * &lt;p&gt;Calls to FreqStack.push(int x) will be such that 0 &lt;= x &lt;= 10^9. It is guaranteed that
 * FreqStack.pop() won't be called if the stack has zero elements. The total number of
 * FreqStack.push calls will not exceed 10000 in a single test case. The total number of
 * FreqStack.pop calls will not exceed 10000 in a single test case. The total number of
 * FreqStack.push and FreqStack.pop calls will not exceed 150000 across all test cases.
 *
 * &lt;p&gt;Solution: push O(log N) pop O(log N) Maintain a priority queue with a FreqNode where each
 * FreqNode contains a frequency and a stack with (value and pushCount). Each stack in a priority
 * queue contains same set of values. Every time when a value is to be added to the stack a new Node
 * is created and pushed to stack which contains the push value and pushCount.
 *
 * &lt;p&gt;Example: For the below push operation push 5, push 5, push 5, push 6, push 6, push 7 the state
 * of priority stack will be 3 : 5(0) -&gt; 5(1) -&gt; 5(2) 2 : 6(3) -&gt; 6(4) 1 : 7(5)
 *
 * &lt;p&gt;When a push operation is invoked we have to identify in which stack the value has to go in
 * therefore maintain a hashmap with push-value as key and value contains the reference to FreqNode
 * in priority queue. Remove this FreqNode from priority queue and update the stack.
 *
 * &lt;p&gt;When a pop operation is invoked remove the FreqNode from the top of the priority queue and pop
 * the value from top of its stack.
 */</comment>
<class><specifier>public</specifier> class <name>FreqStack</name> <block>{

  <comment type="block" format="javadoc">/**
   * Main method
   *
   * @param args
   */</comment>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>FreqStack</name></type> <name>freqStack</name> <init>= <expr><operator>new</operator> <call><name>FreqStack</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>freqStack</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>freqStack</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>freqStack</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>freqStack</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>freqStack</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name><name>freqStack</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>freqStack</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name><name>freqStack</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name><name>freqStack</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>freqStack</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>freqStack</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name><name>freqStack</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name><name>freqStack</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name><name>freqStack</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name><name>freqStack</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name><name>freqStack</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <class>class <name>Node</name> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>val</name></decl>, <decl><type ref="prev"/><name>pos</name></decl>;</decl_stmt>

    <constructor><name>Node</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pushCount</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>val</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>pos</name></name> <operator>=</operator> <name>pushCount</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>
  }</block></class>

  <class>class <name>FreqNode</name> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>freq</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>Stack</name><argument_list type="generic">&lt;<argument><name>Node</name></argument>&gt;</argument_list></name></type> <name>stack</name></decl>;</decl_stmt>

    <constructor><name>FreqNode</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>freq</name></decl></parameter>, <parameter><decl><type><name><name>Stack</name><argument_list type="generic">&lt;<argument><name>Node</name></argument>&gt;</argument_list></name></type> <name>stack</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>freq</name></name> <operator>=</operator> <name>freq</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>stack</name></name> <operator>=</operator> <name>stack</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>getFreq</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><name>freq</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>getTop</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><ternary><condition><expr><operator>!</operator><call><name><name>stack</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><call><name><name>stack</name><operator>.</operator><name>peek</name></name><argument_list>()</argument_list></call><operator>.</operator><name>pos</name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>push</name><parameter_list>(<parameter><decl><type><name>Node</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name>freq</name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>stack</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>Node</name></type> <name>pop</name><parameter_list>()</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name>freq</name><operator>--</operator></expr>;</expr_stmt>
      <return>return <expr><call><name><name>stack</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>
  }</block></class>

  <decl_stmt><decl><type><specifier>private</specifier> <name><name>PriorityQueue</name><argument_list type="generic">&lt;<argument><name>FreqNode</name></argument>&gt;</argument_list></name></type> <name>priorityQueue</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>, <argument><name>FreqNode</name></argument>&gt;</argument_list></name></type> <name>map</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>pushCount</name></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>FreqStack</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>priorityQueue</name> <operator>=</operator>
        <operator>new</operator> <call><name><name>PriorityQueue</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(
            <argument><expr><lambda><parameter_list>(<parameter><decl><name>o1</name></decl></parameter>, <parameter><decl><name>o2</name></decl></parameter>)</parameter_list> -&gt; <block>{<block_content>
              <if_stmt><if>if <condition>(<expr><name><name>o1</name><operator>.</operator><name>freq</name></name> <operator>==</operator> <name><name>o2</name><operator>.</operator><name>freq</name></name></expr>)</condition> <block>{<block_content>
                <return>return <expr><call><name><name>Integer</name><operator>.</operator><name>compare</name></name><argument_list>(<argument><expr><call><name><name>o2</name><operator>.</operator><name>getTop</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>o1</name><operator>.</operator><name>getTop</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
              </block_content>}</block></if> <else>else <block>{<block_content>
                <return>return <expr><call><name><name>Integer</name><operator>.</operator><name>compare</name></name><argument_list>(<argument><expr><name><name>o2</name><operator>.</operator><name>freq</name></name></expr></argument>, <argument><expr><name><name>o1</name><operator>.</operator><name>freq</name></name></expr></argument>)</argument_list></call></expr>;</return>
              </block_content>}</block></else></if_stmt>
            </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>map</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pushCount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>push</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>pushCount</name><operator>++</operator></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>Node</name></type> <name>node</name> <init>= <expr><operator>new</operator> <call><name>Node</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>pushCount</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FreqNode</name></type> <name>freqNode</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>map</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>freqNode</name> <operator>=</operator> <call><name><name>map</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>priorityQueue</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>freqNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>freqNode</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <decl_stmt><decl><type><name><name>Stack</name><argument_list type="generic">&lt;<argument><name>Node</name></argument>&gt;</argument_list></name></type> <name>stack</name> <init>= <expr><operator>new</operator> <call><name><name>Stack</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>stack</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>freqNode</name> <operator>=</operator> <operator>new</operator> <call><name>FreqNode</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>stack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>freqNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name><name>priorityQueue</name><operator>.</operator><name>offer</name></name><argument_list>(<argument><expr><name>freqNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>int</name></type> <name>pop</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>FreqNode</name></type> <name>freqNode</name> <init>= <expr><call><name><name>priorityQueue</name><operator>.</operator><name>poll</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Node</name></type> <name>topNode</name> <init>= <expr><call><name><name>freqNode</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>freqNode</name><operator>.</operator><name>freq</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name><name>topNode</name><operator>.</operator><name>val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name><name>priorityQueue</name><operator>.</operator><name>offer</name></name><argument_list>(<argument><expr><name>freqNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><name><name>topNode</name><operator>.</operator><name>val</name></name></expr>;</return>
  </block_content>}</block></function>
}</block></class>
</unit>
