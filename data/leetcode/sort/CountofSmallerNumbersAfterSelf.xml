<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\sort\CountofSmallerNumbersAfterSelf.java"><class><specifier>public</specifier> class <name>CountofSmallerNumbersAfterSelf</name> <block>{
    <function><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>countSmaller</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>nums</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>nums</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name><name>nums</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        
        <comment type="line">// indexArray contains indices in original array and</comment>
        <comment type="line">// it will be sorted by corresponding number in the original array</comment>
        <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>indexArray</name> <init>= <expr><call><name>initializeArray</name><argument_list>(<argument><expr><name>nums</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    
        <comment type="line">// countArray is actually the return array</comment>
        <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>countArray</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[<expr><name><name>nums</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        
        <comment type="line">// helperArray is the helper for merge sort</comment>
        <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>helper</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[<expr><name><name>nums</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        
        <expr_stmt><expr><call><name>mergeSort</name><argument_list>(<argument><expr><name>nums</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>nums</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>indexArray</name></expr></argument>, <argument><expr><name>countArray</name></expr></argument>, <argument><expr><name>helper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <return>return <expr><call><name>convertToList</name><argument_list>(<argument><expr><name>countArray</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
    
    <function><type><specifier>private</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>convertToList</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>array</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>list</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>ele</name> <range>: <expr><name>array</name></expr></range></decl></init>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>Integer</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>ele</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>list</name></expr>;</return>
    </block_content>}</block></function>
    
    <function><type><specifier>private</specifier> <name><name>int</name><index>[]</index></name></type> <name>initializeArray</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>nums</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>res</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[<expr><name><name>nums</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>nums</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><name><name>res</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>res</name></expr>;</return>
    </block_content>}</block></function>
    
    <function><type><specifier>private</specifier> <name>void</name></type> <name>mergeSort</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>nums</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>left</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>right</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>indexArray</name></decl></parameter>,
                           <parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>countArray</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>helper</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>left</name> <operator>&gt;=</operator> <name>right</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
        
        <decl_stmt><decl><type><name>int</name></type> <name>mid</name> <init>= <expr><name>left</name> <operator>+</operator> <operator>(</operator><name>right</name> <operator>-</operator> <name>left</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>mergeSort</name><argument_list>(<argument><expr><name>nums</name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><name>mid</name></expr></argument>, <argument><expr><name>indexArray</name></expr></argument>, <argument><expr><name>countArray</name></expr></argument>, <argument><expr><name>helper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>mergeSort</name><argument_list>(<argument><expr><name>nums</name></expr></argument>, <argument><expr><name>mid</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>right</name></expr></argument>, <argument><expr><name>indexArray</name></expr></argument>, <argument><expr><name>countArray</name></expr></argument>, <argument><expr><name>helper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <expr_stmt><expr><call><name>merge</name><argument_list>(<argument><expr><name>nums</name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><name>mid</name></expr></argument>, <argument><expr><name>right</name></expr></argument>, <argument><expr><name>indexArray</name></expr></argument>, <argument><expr><name>countArray</name></expr></argument>, <argument><expr><name>helper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>
    
    <function><type><specifier>private</specifier> <name>void</name></type> <name>merge</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>nums</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>left</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>right</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>indexArray</name></decl></parameter>, 
                      <parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>countArray</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>helper</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name>copyIndex</name><argument_list>(<argument><expr><name>indexArray</name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><name>right</name></expr></argument>, <argument><expr><name>helper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>ls</name> <init>= <expr><name>left</name></expr></init></decl>, <decl><type ref="prev"/><name>rs</name> <init>= <expr><name>mid</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>cur</name> <init>= <expr><name>left</name></expr></init></decl>;</decl_stmt>
        
        <while>while <condition>(<expr><name>ls</name> <operator>&lt;</operator> <name>mid</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>rs</name> <operator>&gt;</operator> <name>right</name> <operator>||</operator> <name><name>nums</name><index>[<expr><name><name>helper</name><index>[<expr><name>ls</name></expr>]</index></name></expr>]</index></name> <operator>&lt;=</operator> <name><name>nums</name><index>[<expr><name><name>helper</name><index>[<expr><name>rs</name></expr>]</index></name></expr>]</index></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>countArray</name><index>[<expr><name><name>helper</name><index>[<expr><name>ls</name></expr>]</index></name></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>rs</name> <operator>-</operator> <operator>(</operator><name>mid</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
				
                <expr_stmt><expr><name><name>indexArray</name><index>[<expr><name>cur</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>helper</name><index>[<expr><name>ls</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name><name>indexArray</name><index>[<expr><name>cur</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>helper</name><index>[<expr><name>rs</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></while>
    </block_content>}</block></function>
    
    <function><type><specifier>private</specifier> <name>void</name></type> <name>copyIndex</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>indexArray</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>left</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>right</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>helper</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>left</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>right</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><name><name>helper</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>indexArray</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></function>
}</block></class>
</unit>
