<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\sort\AdvantageShuffle.java"><class><specifier>public</specifier> class <name>AdvantageShuffle</name> <block>{
    <function><type><specifier>public</specifier> <name><name>int</name><index>[]</index></name></type> <name>advantageCount</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>A</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>B</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>sortedA</name> <init>= <expr><call><name><name>A</name><operator>.</operator><name>clone</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Arrays</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><name>sortedA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>sortedB</name> <init>= <expr><call><name><name>B</name><operator>.</operator><name>clone</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Arrays</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><name>sortedB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// assigned[b] = list of a that are assigned to beat b</comment>
        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>, <argument><name><name>Deque</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>assigned</name> <init>= <expr><operator>new</operator> <call><name>HashMap</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>b</name><range>: <expr><name>B</name></expr></range></decl></init>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>assigned</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>LinkedList</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        <comment type="line">// remaining = list of a that are not assigned to any b</comment>
        <decl_stmt><decl><type><name><name>Deque</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>remaining</name> <init>= <expr><operator>new</operator> <call><name>LinkedList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// populate (assigned, remaining) appropriately</comment>
        <comment type="line">// sortedB[j] is always the smallest unassigned element in B</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>a</name><range>: <expr><name>sortedA</name></expr></range></decl></init>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>a</name> <operator>&gt;</operator> <name><name>sortedB</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>assigned</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>sortedB</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>add</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name><name>remaining</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></for>

        <comment type="line">// Reconstruct the answer from annotations (assigned, remaining)</comment>
        <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>ans</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[<expr><name><name>B</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>B</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
            <comment type="line">// if there is some a assigned to b...</comment>
            <if_stmt><if>if <condition>(<expr><call><name><name>assigned</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>B</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name><name>assigned</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>B</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>pop</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name><name>remaining</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>ans</name></expr>;</return>
    </block_content>}</block></function>
}</block></class>
</unit>
