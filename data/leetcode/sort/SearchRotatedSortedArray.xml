<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\search\binary_search\SearchRotatedSortedArray.java"><package>package <name>binary_search</name>;</package>

<comment type="block" format="javadoc">/**
 * Created by gouthamvidyapradhan on 10/04/2017. Suppose an array sorted in ascending order is
 * rotated at some pivot unknown to you beforehand.
 *
 * &lt;p&gt;(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).
 *
 * &lt;p&gt;You are given a target value to search. If found in the array return its index, otherwise
 * return -1.
 *
 * &lt;p&gt;You may assume no duplicate exists in the array.
 */</comment>
<class><specifier>public</specifier> class <name>SearchRotatedSortedArray</name> <block>{
  <comment type="block" format="javadoc">/**
   * Main method
   *
   * @param args
   * @throws Exception
   */</comment>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>A</name> <init>= <expr><block>{<expr><literal type="number">5</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SearchRotatedSortedArray</name><argument_list>()</argument_list></call><operator>.</operator><call><name>search</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>int</name></type> <name>search</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>nums</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>target</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>nums</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>nums</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><ternary><condition><expr><operator>(</operator><name><name>nums</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>target</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>low</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>high</name> <init>= <expr><name><name>nums</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>low</name> <operator>&lt;</operator> <name>high</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>mid</name> <init>= <expr><operator>(</operator><name>low</name> <operator>+</operator> <name>high</name><operator>)</operator> <operator>&gt;&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>nums</name><index>[<expr><name>mid</name></expr>]</index></name> <operator>==</operator> <name>target</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>mid</name></expr>;</return></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>nums</name><index>[<expr><name>mid</name></expr>]</index></name> <operator>&lt;=</operator> <name><name>nums</name><index>[<expr><name>low</name></expr>]</index></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>target</name> <operator>&gt;</operator> <name><name>nums</name><index>[<expr><name>mid</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name>target</name> <operator>&lt;=</operator> <name><name>nums</name><index>[<expr><name>high</name></expr>]</index></name><operator>)</operator>
          <operator>||</operator> <operator>(</operator><name><name>nums</name><index>[<expr><name>low</name></expr>]</index></name> <operator>&lt;=</operator> <name><name>nums</name><index>[<expr><name>mid</name></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>target</name> <argument_list type="generic">&lt; <argument><name><name>nums</name><index>[<expr><name>low</name></expr>]</index></name> <operator>||</operator> <name>target</name></argument> &gt;</argument_list></name> <name><name>nums</name><index>[<expr><name>mid</name></expr>]</index></name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>low</name> <operator>=</operator> <name>mid</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
      <else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>high</name> <operator>=</operator> <name>mid</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></while>
    <return>return <expr><ternary><condition><expr><operator>(</operator><name><name>nums</name><index>[<expr><name>low</name></expr>]</index></name> <operator>==</operator> <name>target</name><operator>)</operator></expr> ?</condition><then> <expr><name>low</name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
  </block_content>}</block></function>
}</block></class>
</unit>
