<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\sort\ReversePairs.java"><class><specifier>public</specifier> class <name>ReversePairs</name> <block>{
    <function><type><specifier>private</specifier> <name>int</name></type> <name>merge</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>A</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>M</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>l</name></expr></init></decl>, <decl><type ref="prev"/><name>t</name> <init>= <expr><name>l</name></expr></init></decl>, <decl><type ref="prev"/><name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>m</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>r</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <while>while<condition>(<expr><name>t</name> <operator>&lt;=</operator> <name>m</name> <operator>&amp;&amp;</operator> <name><name>A</name><index>[<expr><name>t</name></expr>]</index></name> <operator>&lt;=</operator> <literal type="number">2L</literal> <operator>*</operator> <name><name>A</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>t</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
            <expr_stmt><expr><name>res</name> <operator>+=</operator> <name>m</name> <operator>-</operator> <name>t</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <while>while<condition>(<expr><name>i</name> <operator>&lt;=</operator> <name>m</name> <operator>&amp;&amp;</operator> <name><name>A</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;=</operator> <name><name>A</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>M</name><index>[<expr><name>k</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>A</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></while>
            <expr_stmt><expr><name><name>M</name><index>[<expr><name>k</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>A</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
        </block_content>}</block></for>
        <while>while<condition>(<expr><name>i</name> <operator>&lt;=</operator> <name>m</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>M</name><index>[<expr><name>k</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>A</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></while>
        <for>for<control>(<init><expr><name>i</name> <operator>=</operator> <name>l</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>r</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>A</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>M</name><index>[<expr><name>i</name> <operator>-</operator> <name>l</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
        <return>return <expr><name>res</name></expr>;</return>
    </block_content>}</block></function>
    <function><type><specifier>private</specifier> <name>int</name></type> <name>mergeSort</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>A</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>M</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><name>l</name> <operator>&gt;=</operator> <name>r</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>m</name> <init>= <expr><name>l</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>r</name><operator>-</operator><name>l</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name>mergeSort</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>M</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>mergeSort</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>m</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>M</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>merge</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>M</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>reversePairs</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>nums</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>mergeSort</name><argument_list>(<argument><expr><name>nums</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>nums</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>int</name><index>[<expr><name><name>nums</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
}</block></class>
</unit>
