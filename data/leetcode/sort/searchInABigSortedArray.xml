<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\sort\searchInABigSortedArray.java"><comment type="line">// Source : http://www.lintcode.com/en/problem/search-in-a-big-sorted-array/</comment>
<comment type="line">// Inspired by : http://www.jiuzhang.com/solutions/search-in-a-big-sorted-array/</comment>
<comment type="line">// Author : Lei Cao</comment>
<comment type="line">// Date   : 2015-10-05</comment>

<comment type="block" format="javadoc">/**********************************************************************************
 *
 * Given a big sorted array, find the first index of a target number. Your algorithm should be in O(log k), where k is the first index of the target number.
 *
 * Return -1, if the number doesn't exist in the array.
 *
 * Example
 * Given [1, 3, 6, 9, 21], and target = 3, return 1.
 *
 * Challenge
 * O(log k), k is the first index of the given target number.
 *
 **********************************************************************************/</comment>

<package>package <name>searchInABigSortedArray</name>;</package>

<comment type="block" format="javadoc">/**
 * Created by leicao on 5/10/15.
 */</comment>
<class><specifier>public</specifier> class <name>searchInABigSortedArray</name> <block>{
    <function><type><specifier>public</specifier> <name>int</name></type> <name>searchBigSortedArray</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>A</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>target</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>A</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name><name>A</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>start</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>end</name> <init>= <expr><name><name>A</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>upperBound</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

        <comment type="line">// @TODO The logic here needs to be reviewed.</comment>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>Math</name><operator>.</operator><name>sqrt</name></name><argument_list>(<argument><expr><name><name>A</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>upperBound</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>end</name> <operator>=</operator> <name><name>A</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>A</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <name>upperBound</name> <operator>&amp;&amp;</operator> <name><name>A</name><index>[<expr><name>upperBound</name></expr>]</index></name> <operator>&gt;</operator> <name>target</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>end</name> <operator>=</operator> <name>upperBound</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>upperBound</name> <operator>=</operator> <name>upperBound</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        </block_content>}</block></for>

        <while>while <condition>(<expr><name>start</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>mid</name> <init>= <expr><name>start</name> <operator>+</operator> <operator>(</operator><name>end</name> <operator>-</operator> <name>start</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>A</name><index>[<expr><name>mid</name></expr>]</index></name> <operator>==</operator> <name>target</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>end</name> <operator>=</operator> <name>mid</name></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>A</name><index>[<expr><name>mid</name></expr>]</index></name> <operator>&lt;</operator> <name>target</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>start</name> <operator>=</operator> <name>mid</name></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>end</name> <operator>=</operator> <name>mid</name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></while>

        <if_stmt><if>if <condition>(<expr><name><name>A</name><index>[<expr><name>start</name></expr>]</index></name> <operator>==</operator> <name>target</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>start</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>A</name><index>[<expr><name>end</name></expr>]</index></name> <operator>==</operator> <name>target</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>end</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></function>
}</block></class>
</unit>
