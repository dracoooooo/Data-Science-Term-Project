<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\sort\FindKthSmallestPairDistance.java"><class><specifier>public</specifier> class <name>FindKthSmallestPairDistance</name> <block>{
    <function><type><specifier>public</specifier> <name>int</name></type> <name>smallestDistancePair</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>nums</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>Arrays</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><name>nums</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>PriorityQueue</name><argument_list type="generic">&lt;<argument><name>Node</name></argument>&gt;</argument_list></name></type> <name>heap</name> <init>= <expr><operator>new</operator> <call><name><name>PriorityQueue</name><argument_list type="generic">&lt;<argument><name>Node</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>nums</name><operator>.</operator><name>length</name></name></expr></argument>,
            <argument><expr><name><name>Comparator</name><operator>.</operator></name>&lt;<name>Node</name><operator>&gt;</operator> <call><name>comparingInt</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>node</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>nums</name><index>[<expr><name><name>node</name><operator>.</operator><name>nei</name></name></expr>]</index></name> <operator>-</operator> <name><name>nums</name><index>[<expr><name><name>node</name><operator>.</operator><name>root</name></name></expr>]</index></name></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name><name>nums</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name><name>heap</name><operator>.</operator><name>offer</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Node</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <decl_stmt><decl><type><name>Node</name></type> <name>node</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init>;</init> <condition><expr><name>k</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>k</name></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><name>node</name> <operator>=</operator> <call><name><name>heap</name><operator>.</operator><name>poll</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>node</name><operator>.</operator><name>nei</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name><name>nums</name><operator>.</operator><name>length</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>heap</name><operator>.</operator><name>offer</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Node</name><argument_list>(<argument><expr><name><name>node</name><operator>.</operator><name>root</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>.</operator><name>nei</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <return>return <expr><name><name>nums</name><index>[<expr><name><name>node</name><operator>.</operator><name>nei</name></name></expr>]</index></name> <operator>-</operator> <name><name>nums</name><index>[<expr><name><name>node</name><operator>.</operator><name>root</name></name></expr>]</index></name></expr>;</return>
    </block_content>}</block></function>
    <class>class <name>Node</name> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>root</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>nei</name></decl>;</decl_stmt>
        <constructor><name>Node</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name>root</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>nei</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>
    }</block></class>
}</block></class>

</unit>
