<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\search\binary_search\KokoEatingBananas.java"><package>package <name>binary_search</name>;</package>

<comment type="block" format="javadoc">/**
 * Created by gouthamvidyapradhan on 23/08/2019 Koko loves to eat bananas. There are N piles of
 * bananas, the i-th pile has piles[i] bananas. The guards have gone and will come back in H hours.
 *
 * &lt;p&gt;Koko can decide her bananas-per-hour eating speed of K. Each hour, she chooses some pile of
 * bananas, and eats K bananas from that pile. If the pile has less than K bananas, she eats all of
 * them instead, and won't eat any more bananas during this hour.
 *
 * &lt;p&gt;Koko likes to eat slowly, but still wants to finish eating all the bananas before the guards
 * come back.
 *
 * &lt;p&gt;Return the minimum integer K such that she can eat all the bananas within H hours.
 *
 * &lt;p&gt;Example 1:
 *
 * &lt;p&gt;Input: piles = [3,6,7,11], H = 8 Output: 4 Example 2:
 *
 * &lt;p&gt;Input: piles = [30,11,23,4,20], H = 5 Output: 30 Example 3:
 *
 * &lt;p&gt;Input: piles = [30,11,23,4,20], H = 6 Output: 23
 *
 * &lt;p&gt;Note:
 *
 * &lt;p&gt;1 &lt;= piles.length &lt;= 10^4 piles.length &lt;= H &lt;= 10^9 1 &lt;= piles[i] &lt;= 10^9
 *
 * &lt;p&gt;Solution: O(N x log Max(piles[i])) Binary search for the minimum possible value between (1 and
 * max(piles[i]))
 */</comment>
<class><specifier>public</specifier> class <name>KokoEatingBananas</name> <block>{
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>A</name> <init>= <expr><block>{<expr><literal type="number">312884470</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>KokoEatingBananas</name><argument_list>()</argument_list></call><operator>.</operator><call><name>minEatingSpeed</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">968709470</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>int</name></type> <name>minEatingSpeed</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>piles</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>H</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>max</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>piles</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name>max</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name>max</name></expr></argument>, <argument><expr><name><name>piles</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <if_stmt><if>if <condition>(<expr><name>H</name> <operator>==</operator> <name><name>piles</name><operator>.</operator><name>length</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>max</name></expr>;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>h</name> <init>= <expr><name>max</name></expr></init></decl>, <decl><type ref="prev"/><name>l</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>answer</name> <init>= <expr><name>H</name></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>l</name> <operator>&lt;=</operator> <name>h</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>m</name> <init>= <expr><name>l</name> <operator>+</operator> <operator>(</operator><name>h</name> <operator>-</operator> <name>l</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>boolean</name></type> <name>status</name> <init>= <expr><call><name>check</name><argument_list>(<argument><expr><name>piles</name></expr></argument>, <argument><expr><name>H</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>status</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>answer</name> <operator>=</operator> <name>m</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>h</name> <operator>=</operator> <name>m</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>l</name> <operator>=</operator> <name>m</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></while>
    <return>return <expr><name>answer</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>boolean</name></type> <name>check</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>piles</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>H</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>p</name> <range>: <expr><name>piles</name></expr></range></decl></init>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>p</name> <operator>&lt;=</operator> <name>k</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>H</name><operator>--</operator></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>q</name> <init>= <expr><name>p</name> <operator>/</operator> <name>k</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>%</operator> <name>k</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>q</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>H</name> <operator>-=</operator> <name>q</name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>H</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
  </block_content>}</block></function>
}</block></class>
</unit>
