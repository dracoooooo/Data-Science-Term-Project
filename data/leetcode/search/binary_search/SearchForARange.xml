<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\search\binary_search\SearchForARange.java"><package>package <name>binary_search</name>;</package>

<comment type="block" format="javadoc">/**
 * Created by gouthamvidyapradhan on 20/05/2017. Given an array of integers sorted in ascending
 * order, find the starting and ending position of a given target value.
 *
 * &lt;p&gt;Your algorithm's runtime complexity must be in the order of O(log n).
 *
 * &lt;p&gt;If the target is not found in the array, return [-1, -1].
 *
 * &lt;p&gt;For example, Given [5, 7, 7, 8, 8, 10] and target value 8, return [3, 4].
 *
 * &lt;p&gt;Solution: Works with worst case time complexity of O(log n). Recursively binary search to find
 * the target index.
 */</comment>
<class><specifier>public</specifier> class <name>SearchForARange</name> <block>{
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>test</name> <init>= <expr><block>{
      <expr><literal type="number">5</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">90</literal></expr>, <expr><literal type="number">101</literal></expr>, <expr><literal type="number">101</literal></expr>, <expr><literal type="number">101</literal></expr>,
      <expr><literal type="number">200</literal></expr>, <expr><literal type="number">200</literal></expr>, <expr><literal type="number">200</literal></expr>, <expr><literal type="number">200</literal></expr>, <expr><literal type="number">200</literal></expr>, <expr><literal type="number">200</literal></expr>
    }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name>SearchForARange</name><argument_list>()</argument_list></call><operator>.</operator><call><name>searchRange</name><argument_list>(<argument><expr><name>test</name></expr></argument>, <argument><expr><literal type="number">200</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <range>: <expr><name>result</name></expr></range></decl></init>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>print</name></name><argument_list>(<argument><expr><name>i</name> <operator>+</operator> <literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name><name>int</name><index>[]</index></name></type> <name>searchRange</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>nums</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>target</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>low</name> <init>= <expr><call><name>findIndex</name><argument_list>(<argument><expr><name>nums</name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>high</name> <init>= <expr><call><name>findIndex</name><argument_list>(<argument><expr><name>nums</name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>result</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>low</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>result</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>high</name></expr>;</expr_stmt>
    <return>return <expr><name>result</name></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Find index
   *
   * @param nums nums array
   * @param target target
   * @param isLowerIndex true if target is to find lower index, false otherwise
   * @return index
   */</comment>
  <function><type><specifier>private</specifier> <name>int</name></type> <name>findIndex</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>nums</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isLowerIndex</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>s</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>e</name> <init>= <expr><name><name>nums</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>s</name> <operator>&lt;=</operator> <name>e</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>m</name> <init>= <expr><name>s</name> <operator>+</operator> <operator>(</operator><name>e</name> <operator>-</operator> <name>s</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>nums</name><index>[<expr><name>m</name></expr>]</index></name> <operator>==</operator> <name>target</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <name>m</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>isLowerIndex</name></expr>)</condition><block type="pseudo"><block_content>
          <expr_stmt><expr><name>e</name> <operator>=</operator> <name>m</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if> <comment type="line">// if searching for the lower index then search the lower bound,</comment>
        <comment type="line">// else search the upper bound</comment>
        <else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>s</name> <operator>=</operator> <name>m</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>nums</name><index>[<expr><name>m</name></expr>]</index></name> <operator>&lt;</operator> <name>target</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>s</name> <operator>=</operator> <name>m</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>e</name> <operator>=</operator> <name>m</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></while>
    <return>return <expr><name>result</name></expr>;</return>
  </block_content>}</block></function>
}</block></class>
</unit>
