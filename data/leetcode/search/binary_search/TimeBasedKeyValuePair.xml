<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\search\binary_search\TimeBasedKeyValuePair.java"><package>package <name>binary_search</name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Created by gouthamvidyapradhan on 07/05/2019 Create a timebased key-value store class TimeMap,
 * that supports two operations.
 *
 * &lt;p&gt;1. set(string key, string value, int timestamp)
 *
 * &lt;p&gt;Stores the key and value, along with the given timestamp. 2. get(string key, int timestamp)
 *
 * &lt;p&gt;Returns a value such that set(key, value, timestamp_prev) was called previously, with
 * timestamp_prev &lt;= timestamp. If there are multiple such values, it returns the one with the
 * largest timestamp_prev. If there are no values, it returns the empty string ("").
 *
 * &lt;p&gt;Example 1:
 *
 * &lt;p&gt;Input: inputs = ["TimeMap","set","get","get","set","get","get"], inputs =
 * [[],["foo","bar",1],["foo",1],["foo",3],["foo","bar2",4],["foo",4],["foo",5]] Output:
 * [null,null,"bar","bar",null,"bar2","bar2"] Explanation: TimeMap kv; kv.set("foo", "bar", 1); //
 * store the key "foo" and value "bar" along with timestamp = 1 kv.get("foo", 1); // output "bar"
 * kv.get("foo", 3); // output "bar" since there is no value corresponding to foo at timestamp 3 and
 * timestamp 2, then the only value is at timestamp 1 ie "bar" kv.set("foo", "bar2", 4);
 * kv.get("foo", 4); // output "bar2" kv.get("foo", 5); //output "bar2"
 *
 * &lt;p&gt;Example 2:
 *
 * &lt;p&gt;Input: inputs = ["TimeMap","set","set","get","get","get","get","get"], inputs =
 * [[],["love","high",10],["love","low",20],["love",5],["love",10],["love",15],["love",20],["love",25]]
 * Output: [null,null,null,"","high","high","low","low"]
 *
 * &lt;p&gt;Note:
 *
 * &lt;p&gt;All key/value strings are lowercase. All key/value strings have length in the range [1, 100]
 * The timestamps for all TimeMap.set operations are strictly increasing. 1 &lt;= timestamp &lt;= 10^7
 * TimeMap.set and TimeMap.get functions will be called a total of 120000 times (combined) per test
 * case.
 *
 * &lt;p&gt;Solution O(log N) where N is the number of values for the same key (but different timestamp)
 * Idea is to use the HashMap to store the unique key and a TreeMap as value containing all
 * different timestamps and value. Use the floor function in treemap to get the value for a given
 * timestamp.
 */</comment>
<class><specifier>public</specifier> class <name>TimeBasedKeyValuePair</name> <block>{

  <decl_stmt><decl><type><specifier>private</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>TreeMap</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>map</name></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>TimeBasedKeyValuePair</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>map</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>set</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>timestamp</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>putIfAbsent</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>TreeMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>TreeMap</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>treeMap</name> <init>= <expr><call><name><name>map</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>treeMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>String</name></type> <name>get</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>timestamp</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>map</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><literal type="string">""</literal></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <decl_stmt><decl><type><name><name>TreeMap</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>treeMap</name> <init>= <expr><call><name><name>map</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <init>= <expr><call><name><name>treeMap</name><operator>.</operator><name>floorEntry</name></name><argument_list>(<argument><expr><name>timestamp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>entry</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="string">""</literal></expr>;</return>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <return>return <expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr>;</return>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>TimeBasedKeyValuePair</name></type> <name>task</name> <init>= <expr><operator>new</operator> <call><name>TimeBasedKeyValuePair</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>task</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"foo"</literal></expr></argument>, <argument><expr><literal type="string">"bar"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name><name>task</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"foo"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name><name>task</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"foo"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name><name>task</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"foo"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>task</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="string">"foo"</literal></expr></argument>, <argument><expr><literal type="string">"bar2"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name><name>task</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"foo"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name><name>task</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"foo"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name><name>task</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="string">"foo"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>
}</block></class>
</unit>
