<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\search\binary_search\PowXN.java"><package>package <name>binary_search</name>;</package>

<comment type="block" format="javadoc">/**
 * Created by gouthamvidyapradhan on 23/05/2017.
 *
 * &lt;p&gt;Implement pow(x, n).
 *
 * &lt;p&gt;Solution: Works with O(log n)
 */</comment>
<class><specifier>public</specifier> class <name>PowXN</name> <block>{
  <comment type="block" format="javadoc">/**
   * Main method
   *
   * @param args
   * @throws Exception
   */</comment>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>/</operator> <operator>new</operator> <call><name>PowXN</name><argument_list>()</argument_list></call><operator>.</operator><call><name>myPow</name><argument_list>(<argument><expr><literal type="number">2.00000</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2147483648</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>double</name></type> <name>myPow</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1D</literal></expr>;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>long</name></type> <name>N</name> <init>= <expr><name>n</name></expr></init></decl>;</decl_stmt> <comment type="line">// use long to avoid overflow.</comment>
    <return>return <expr><call><name>solve</name><argument_list>(<argument><expr><ternary><condition><expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>(</operator><literal type="number">1</literal> <operator>/</operator> <name>x</name><operator>)</operator></expr> </then><else>: <expr><name>x</name></expr></else></ternary></expr></argument>, <argument><expr><ternary><condition><expr><name>N</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>(</operator><name>N</name> <operator>*</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr> </then><else>: <expr><name>N</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>double</name></type> <name>solve</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>x</name></expr>;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>val</name> <init>= <expr><call><name>solve</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>n</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><name>val</name> <operator>*</operator> <name>val</name> <operator>*</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>n</name> <operator>%</operator> <literal type="number">2</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><name>x</name></expr></else></ternary><operator>)</operator></expr>;</return>
  </block_content>}</block></function>
}</block></class>
</unit>
