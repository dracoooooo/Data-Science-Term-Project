<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\search\binary_search\FindInMountainArray.java"><class><specifier>public</specifier> class <name>FindInMountainArray</name> <block>{
    <function><type><specifier>public</specifier> <name>int</name></type> <name>findInMountainArray</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>MountainArray</name></type> <name>a</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>peak</name><init>=<expr><call><name>findPeak</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line">//Devide array in two parts from Peak element and check them both </comment>
       <decl_stmt><decl><type><name>int</name></type> <name>result</name><init>= <expr><call><name>binarySearch</name><argument_list>(<argument><expr><name>t</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>peak</name></expr></argument>,<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
         <if_stmt><if>if<condition>(<expr><name>result</name><operator>==</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><block>{<block_content>
             <expr_stmt><expr><name>result</name><operator>=</operator><call><name>binarySearch</name><argument_list>(<argument><expr><name>t</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>peak</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><call><name><name>a</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         </block_content>}</block></if></if_stmt>
        <return>return <expr><name>result</name></expr>;</return> 
     </block_content>}</block></function>
     
     <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>findPeak</name><parameter_list>(<parameter><decl><type><name>MountainArray</name></type> <name>a</name></decl></parameter>)</parameter_list><block>{<block_content>
         <decl_stmt><decl><type><name>int</name></type> <name>l</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>r</name><init>=<expr><call><name><name>a</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
         <while>while<condition>(<expr><name>l</name><operator>&lt;</operator><name>r</name></expr>)</condition><block>{<block_content>
             <decl_stmt><decl><type><name>int</name></type> <name>mid</name><init>=<expr><name>l</name><operator>+</operator><operator>(</operator><name>r</name><operator>-</operator><name>l</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
             <if_stmt><if>if<condition>(<expr><call><name><name>a</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>mid</name></expr></argument>)</argument_list></call><operator>&lt;</operator><call><name><name>a</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>mid</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                 <expr_stmt><expr><name>l</name><operator>=</operator><name>mid</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
             <else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>r</name><operator>=</operator><name>mid</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
         </block_content>}</block></while>
         <return>return <expr><name>l</name></expr>;</return>
         
     </block_content>}</block></function>
     <function><type><specifier>public</specifier> <specifier>static</specifier>  <name>int</name></type> <name>binarySearch</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>t</name></decl></parameter> ,<parameter><decl><type><name>MountainArray</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>,<parameter><decl><type><name>boolean</name></type> <name>increasing</name></decl></parameter>)</parameter_list><block>{<block_content>
         <while>while<condition>(<expr><name>l</name><operator>&lt;=</operator><name>r</name></expr>)</condition><block>{<block_content>
             <decl_stmt><decl><type><name>int</name></type> <name>mid</name><init>=<expr><name>l</name><operator>+</operator><operator>(</operator><name>r</name><operator>-</operator><name>l</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
              <if_stmt><if>if<condition>(<expr><name>t</name><operator>==</operator><call><name><name>a</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>mid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content><return>return <expr><name>mid</name></expr>;</return></block_content></block></if></if_stmt>
 
             <if_stmt><if>if<condition>(<expr><name>increasing</name></expr>)</condition><block>{<block_content>
                  <if_stmt><if>if<condition>(<expr><call><name><name>a</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>mid</name></expr></argument>)</argument_list></call><operator>&lt;</operator><name>t</name></expr>)</condition><block type="pseudo"><block_content>
                     <expr_stmt><expr><name>l</name><operator>=</operator><name>mid</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
                 <else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>r</name><operator>=</operator><name>mid</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
                     
             </block_content>}</block></if><else>else <block>{<block_content>
                  <if_stmt><if>if<condition>(<expr><call><name><name>a</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>mid</name></expr></argument>)</argument_list></call><operator>&lt;</operator><name>t</name></expr>)</condition><block type="pseudo"><block_content>
                     <expr_stmt><expr><name>r</name><operator>=</operator><name>mid</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
                 <else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>l</name><operator>=</operator><name>mid</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
 
             </block_content>}</block></else></if_stmt>
         </block_content>}</block></while>
         <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
     </block_content>}</block></function>
}</block></class>
</unit>
