<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\search\searchA2DMatrixII\SearchA2DMatrixII.java"><comment type="line">// Source : https://leetcode.com/problems/search-a-2d-matrix-ii/description/</comment>
<comment type="line">// Author : Tianming Cao</comment>
<comment type="line">// Date   : 2018-01-27</comment>
<comment type="block" format="javadoc">/**********************************************************************************
 * Write an efficient algorithm that searches for a value in an m x n matrix. 
 * This matrix has the following properties:
 * 
 * Integers in each row are sorted in ascending from left to right.
 * Integers in each column are sorted in ascending from top to bottom.
 * For example,
 * 
 * Consider the following matrix:
 * 
 * [
 *   [1,   4,  7, 11, 15],
 *   [2,   5,  8, 12, 19],
 *   [3,   6,  9, 16, 22],
 *   [10, 13, 14, 17, 24],
 *   [18, 21, 23, 26, 30]
 * ]
 * Given target = 5, return true.
 * 
 * Given target = 20, return false.
 *
 **********************************************************************************/</comment>
<package>package <name>searchA2DMatrixII</name>;</package>
<comment type="block" format="javadoc">/**********************************************************************************
 * This probleam is similar to problem 74(https://leetcode.com/problems/search-a-2d-matrix/description/).
 * One solution is:
 * Compare rightTopNumber with target to judge rowIndex and colIndex which place to move,
 * until thay out of range or find target.
 * Another solution is using binarySearch.
 **********************************************************************************/</comment>
<class><specifier>public</specifier> class <name>SearchA2DMatrixII</name> <block>{
	<function><type><specifier>public</specifier> <name>boolean</name></type> <name>searchMatrix</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index><index>[]</index></name></type> <name>matrix</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>target</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>matrix</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name><name>matrix</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>matrix</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<return>return <expr><literal type="boolean">false</literal></expr>;</return>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type> <name>m</name><init>=<expr><name><name>matrix</name><operator>.</operator><name>length</name></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>n</name><init>=<expr><name><name>matrix</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>length</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>row</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>col</name><init>=<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
			<while>while<condition>(<expr><name>row</name><operator>&lt;</operator><name>m</name><operator>&amp;&amp;</operator><name>col</name><operator>&gt;=</operator><literal type="number">0</literal></expr>)</condition><block>{<block_content>
				<decl_stmt><decl><type><name>int</name></type> <name>rightTopNumber</name><init>=<expr><name><name>matrix</name><index>[<expr><name>row</name></expr>]</index><index>[<expr><name>col</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
				<if_stmt><if>if<condition>(<expr><name>rightTopNumber</name><operator>==</operator><name>target</name></expr>)</condition><block>{<block_content>
					<return>return <expr><literal type="boolean">true</literal></expr>;</return>
				</block_content>}</block></if><if type="elseif">else if<condition>(<expr><name>target</name><operator>&gt;</operator><name>rightTopNumber</name></expr>)</condition><block>{<block_content>
					<expr_stmt><expr><name>row</name><operator>++</operator></expr>;</expr_stmt>
				</block_content>}</block></if><else>else<block>{<block_content>
					<expr_stmt><expr><name>col</name><operator>--</operator></expr>;</expr_stmt>
				</block_content>}</block></else></if_stmt>
			</block_content>}</block></while>
			<return>return <expr><literal type="boolean">false</literal></expr>;</return>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></function>

}</block></class>
</unit>
