<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\search\searchInRotatedSortedArray\searchInRotatedSortedArray.java"><comment type="line">// Source : https://oj.leetcode.com/problems/search-in-rotated-sorted-array/</comment>
<comment type="line">// Inspired by : http://www.jiuzhang.com/solutions/search-in-rotated-sorted-array/</comment>
<comment type="line">// Author : Lei Cao</comment>
<comment type="line">// Date   : 2015-10-03</comment>

<comment type="block" format="javadoc">/**********************************************************************************
 *
 * Suppose a sorted array is rotated at some pivot unknown to you beforehand.
 *
 * (i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).
 *
 * You are given a target value to search. If found in the array return its index, otherwise return -1.
 *
 * You may assume no duplicate exists in the array.
 *
 **********************************************************************************/</comment>

<package>package <name>searchInRotatedSortedArray</name>;</package>

<class><specifier>public</specifier> class <name>searchInRotatedSortedArray</name> <block>{
    <comment type="block" format="javadoc">/**
     * start [....1....] rotated pivot [....2...] end
     * @param nums
     * @param target
     * @return
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>search</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>nums</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>target</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>nums</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name><name>nums</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>start</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>end</name> <init>= <expr><name><name>nums</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><name>start</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>mid</name> <init>= <expr><name>start</name> <operator>+</operator> <operator>(</operator><name>end</name> <operator>-</operator> <name>start</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>nums</name><index>[<expr><name>mid</name></expr>]</index></name> <operator>==</operator> <name>target</name></expr>)</condition> <block>{<block_content>
                <return>return <expr><name>mid</name></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>nums</name><index>[<expr><name>start</name></expr>]</index></name> <operator>&lt;=</operator> <name><name>nums</name><index>[<expr><name>mid</name></expr>]</index></name></expr>)</condition> <block>{<block_content> <comment type="line">// in higher part</comment>
                <if_stmt><if>if <condition>(<expr><name><name>nums</name><index>[<expr><name>start</name></expr>]</index></name> <operator>&lt;=</operator> <name>target</name> <operator>&amp;&amp;</operator> <name>target</name> <operator>&lt;=</operator> <name><name>nums</name><index>[<expr><name>mid</name></expr>]</index></name></expr>)</condition> <block>{<block_content> <comment type="line">// target within the start and mid.</comment>
                    <expr_stmt><expr><name>end</name> <operator>=</operator> <name>mid</name></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><name>start</name> <operator>=</operator> <name>mid</name></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>nums</name><index>[<expr><name>mid</name></expr>]</index></name> <operator>&lt;=</operator> <name>target</name> <operator>&amp;&amp;</operator> <name>target</name> <operator>&lt;=</operator> <name><name>nums</name><index>[<expr><name><name>nums</name><operator>.</operator><name>length</name></name> <operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content> <comment type="line">// target within the mid and the end</comment>
                    <expr_stmt><expr><name>start</name> <operator>=</operator> <name>mid</name></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><name>end</name> <operator>=</operator> <name>mid</name></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></while>

        <if_stmt><if>if <condition>(<expr><name><name>nums</name><index>[<expr><name>start</name></expr>]</index></name> <operator>==</operator> <name>target</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>start</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>nums</name><index>[<expr><name>end</name></expr>]</index></name> <operator>==</operator> <name>target</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>end</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></function>
}</block></class>
</unit>
