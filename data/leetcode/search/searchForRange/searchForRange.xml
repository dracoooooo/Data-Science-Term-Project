<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\search\searchForRange\searchForRange.java"><comment type="line">// Source : https://oj.leetcode.com/problems/search-for-a-range/</comment>
<comment type="line">// Inspired by : http://www.jiuzhang.com/solutions/search-for-a-range/</comment>
<comment type="line">// Author : Lei Cao</comment>
<comment type="line">// Date   : 2015-10-03</comment>

<comment type="block" format="javadoc">/**********************************************************************************
 *
 * Given a sorted array of integers, find the starting and ending position of a given target value.
 *
 * Your algorithm's runtime complexity must be in the order of O(log n).
 *
 * If the target is not found in the array, return [-1, -1].
 *
 * For example,
 * Given [5, 7, 7, 8, 8, 10] and target value 8,
 * return [3, 4].
 *
 *
 **********************************************************************************/</comment>

<package>package <name>searchForRange</name>;</package>

<class><specifier>public</specifier> class <name>searchForRange</name> <block>{
    <function><type><specifier>public</specifier> <name><name>int</name><index>[]</index></name></type> <name>searchRange</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>nums</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>target</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>result</name> <init>= <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>nums</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>result</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>start</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>end</name> <init>= <expr><name><name>nums</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><name>start</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>mid</name> <init>= <expr><name>start</name> <operator>+</operator> <operator>(</operator><name>end</name> <operator>-</operator> <name>start</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>nums</name><index>[<expr><name>mid</name></expr>]</index></name> <operator>&gt;=</operator> <name>target</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>end</name> <operator>=</operator> <name>mid</name></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>nums</name><index>[<expr><name>mid</name></expr>]</index></name> <operator>&lt;</operator> <name>target</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>start</name> <operator>=</operator> <name>mid</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></while>

        <if_stmt><if>if <condition>(<expr><name><name>nums</name><index>[<expr><name>start</name></expr>]</index></name> <operator>==</operator> <name>target</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>start</name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>nums</name><index>[<expr><name>end</name></expr>]</index></name> <operator>==</operator> <name>target</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>end</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>start</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>end</name> <operator>=</operator> <name><name>nums</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <while>while <condition>(<expr><name>start</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>mid</name> <init>= <expr><name>start</name> <operator>+</operator> <operator>(</operator><name>end</name> <operator>-</operator> <name>start</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>nums</name><index>[<expr><name>mid</name></expr>]</index></name> <operator>&lt;=</operator> <name>target</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>start</name> <operator>=</operator> <name>mid</name></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>end</name> <operator>=</operator> <name>mid</name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></while>
        <if_stmt><if>if <condition>(<expr><name><name>nums</name><index>[<expr><name>end</name></expr>]</index></name> <operator>==</operator> <name>target</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>result</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>end</name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>nums</name><index>[<expr><name>start</name></expr>]</index></name> <operator>==</operator> <name>target</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>result</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>start</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    </block_content>}</block></function>
}</block></class>
</unit>
