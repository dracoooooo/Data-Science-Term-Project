<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\search\search2DMatrix\search2DMatrix.java"><comment type="line">// Source : https://oj.leetcode.com/problems/search-a-2d-matrix/</comment>
<comment type="line">// Inspired by : http://www.jiuzhang.com/solutions/search-a-2d-matrix/</comment>
<comment type="line">// Author : Lei Cao</comment>
<comment type="line">// Date   : 2015-10-03</comment>

<comment type="block" format="javadoc">/**********************************************************************************
 *
 * Write an efficient algorithm that searches for a value in an m x n matrix.
 * This matrix has the following properties:
 *
 * Integers in each row are sorted from left to right.
 * The first integer of each row is greater than the last integer of the previous row.
 *
 * For example,
 *
 * Consider the following matrix:
 *
 * [
 *   [1,   3,  5,  7],
 *   [10, 11, 16, 20],
 *   [23, 30, 34, 50]
 * ]
 *
 * Given target = 3, return true.
 *
 **********************************************************************************/</comment>

<package>package <name>search2DMatrix</name>;</package>

<class><specifier>public</specifier> class <name>search2DMatrix</name> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>rows</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>cols</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>int</name><index>[]</index><index>[]</index></name></type> <name>m</name></decl>;</decl_stmt>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>searchMatrix</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index><index>[]</index></name></type> <name>matrix</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>target</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>matrix</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name><name>matrix</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>matrix</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name><name>matrix</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>m</name> <operator>=</operator> <name>matrix</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>rows</name> <operator>=</operator> <name><name>matrix</name><operator>.</operator><name>length</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>cols</name> <operator>=</operator> <name><name>matrix</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>length</name></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>start</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>end</name> <init>= <expr><name>rows</name> <operator>*</operator> <name>cols</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

        <while>while <condition>(<expr><name>start</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>mid</name> <init>= <expr><name>start</name> <operator>+</operator> <operator>(</operator><name>end</name> <operator>-</operator> <name>start</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>getValue</name><argument_list>(<argument><expr><name>mid</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>target</name></expr>)</condition> <block>{<block_content>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>getValue</name><argument_list>(<argument><expr><name>mid</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>target</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>start</name> <operator>=</operator> <name>mid</name></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>end</name> <operator>=</operator> <name>mid</name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></while>

        <if_stmt><if>if <condition>(<expr><call><name>getValue</name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>target</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>getValue</name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>target</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="block" format="javadoc">/**
     * Get the value of the 2D matrix from the index
     * @param index
     * @return
     */</comment>
    <function><type><specifier>private</specifier> <name>int</name></type> <name>getValue</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><name><name>m</name><index>[<expr><name>index</name> <operator>/</operator> <name>cols</name></expr>]</index><index>[<expr><name>index</name> <operator>%</operator> <name>cols</name></expr>]</index></name></expr>;</return>
    </block_content>}</block></function>
}</block></class>
</unit>
