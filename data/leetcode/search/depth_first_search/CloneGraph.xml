<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\search\depth_first_search\CloneGraph.java"><package>package <name>depth_first_search</name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Created by gouthamvidyapradhan on 18/01/2018. Clone an undirected graph. Each node in the graph
 * contains a label and a list of its neighbors.
 *
 * &lt;p&gt;OJ's undirected graph serialization: Nodes are labeled uniquely.
 *
 * &lt;p&gt;We use # as a separator for each node, and , as a separator for node label and each neighbor
 * of the node. As an example, consider the serialized graph {0,1,2#1,2#2,2}.
 *
 * &lt;p&gt;The graph has a total of three nodes, and therefore contains three parts as separated by #.
 *
 * &lt;p&gt;First node is labeled as 0. Connect node 0 to both nodes 1 and 2. Second node is labeled as 1.
 * Connect node 1 to node 2. Third node is labeled as 2. Connect node 2 to node 2 (itself), thus
 * forming a self-cycle. Visually, the graph looks like the following:
 *
 * &lt;p&gt;1 / \ / \ 0 --- 2 / \ \_/
 *
 * &lt;p&gt;Solution: O(V + E) maintain a hashmap of reference nodes and build the graph by dfs
 */</comment>
<class><specifier>public</specifier> class <name>CloneGraph</name> <block>{

  <class><specifier>static</specifier> class <name>UndirectedGraphNode</name> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>label</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>UndirectedGraphNode</name></argument>&gt;</argument_list></name></type> <name>neighbors</name></decl>;</decl_stmt>

    <constructor><name>UndirectedGraphNode</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name>label</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>neighbors</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>
  }</block></class>

  <decl_stmt><decl><type><specifier>private</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>, <argument><name>UndirectedGraphNode</name></argument>&gt;</argument_list></name></type> <name>map</name></decl>;</decl_stmt>
  <comment type="block" format="javadoc">/**
   * Main method
   *
   * @param args
   * @throws Exception
   */</comment>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>UndirectedGraphNode</name></type> <name>node</name> <init>= <expr><operator>new</operator> <call><name>UndirectedGraphNode</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>UndirectedGraphNode</name></type> <name>node1</name> <init>= <expr><operator>new</operator> <call><name>UndirectedGraphNode</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>UndirectedGraphNode</name></type> <name>node2</name> <init>= <expr><operator>new</operator> <call><name>UndirectedGraphNode</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>node</name><operator>.</operator><name>neighbors</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>node1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>node</name><operator>.</operator><name>neighbors</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>node2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>node1</name><operator>.</operator><name>neighbors</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>node1</name><operator>.</operator><name>neighbors</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>node2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>node2</name><operator>.</operator><name>neighbors</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>node2</name><operator>.</operator><name>neighbors</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>node1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>node2</name><operator>.</operator><name>neighbors</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>node2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>UndirectedGraphNode</name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name>CloneGraph</name><argument_list>()</argument_list></call><operator>.</operator><call><name>cloneGraph</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="line">// print result</comment>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>UndirectedGraphNode</name></type> <name>cloneGraph</name><parameter_list>(<parameter><decl><type><name>UndirectedGraphNode</name></type> <name>node</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>node</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>map</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>UndirectedGraphNode</name></type> <name>clone</name> <init>= <expr><operator>new</operator> <call><name>UndirectedGraphNode</name><argument_list>(<argument><expr><name><name>node</name><operator>.</operator><name>label</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>clone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>clone</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>UndirectedGraphNode</name></type> <name>original</name></decl></parameter>, <parameter><decl><type><name>UndirectedGraphNode</name></type> <name>clone</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>clone</name><operator>.</operator><name>label</name></name></expr></argument>, <argument><expr><name>clone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>UndirectedGraphNode</name></argument>&gt;</argument_list></name></type> <name>oChildren</name> <init>= <expr><name><name>original</name><operator>.</operator><name>neighbors</name></name></expr></init></decl>;</decl_stmt> <comment type="line">// original child nodes</comment>
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>UndirectedGraphNode</name></argument>&gt;</argument_list></name></type> <name>cChildren</name> <init>= <expr><name><name>clone</name><operator>.</operator><name>neighbors</name></name></expr></init></decl>;</decl_stmt> <comment type="line">// clone child nodes</comment>
    <for>for <control>(<init><decl><type><name>UndirectedGraphNode</name></type> <name>oChild</name> <range>: <expr><name>oChildren</name></expr></range></decl></init>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name><name>map</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name><name>oChild</name><operator>.</operator><name>label</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <comment type="line">// already visited node</comment>
        <expr_stmt><expr><call><name><name>cChildren</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>map</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>oChild</name><operator>.</operator><name>label</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <comment type="line">// a new node</comment>
        <decl_stmt><decl><type><name>UndirectedGraphNode</name></type> <name>newChildClone</name> <init>= <expr><operator>new</operator> <call><name>UndirectedGraphNode</name><argument_list>(<argument><expr><name><name>oChild</name><operator>.</operator><name>label</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>cChildren</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>newChildClone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>oChild</name></expr></argument>, <argument><expr><name>newChildClone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></function>
}</block></class>
</unit>
