<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\search\depth_first_search\ConnectingCitiesWithMinimumCost.java"><package>package <name>depth_first_search</name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Created by gouthamvidyapradhan on 26/11/2019 There are N cities numbered from 1 to N.
 *
 * &lt;p&gt;You are given connections, where each connections[i] = [city1, city2, cost] represents the
 * cost to connect city1 and city2 together. (A connection is bidirectional: connecting city1 and
 * city2 is the same as connecting city2 and city1.)
 *
 * &lt;p&gt;Return the minimum cost so that for every pair of cities, there exists a path of connections
 * (possibly of length 1) that connects those two cities together. The cost is the sum of the
 * connection costs used. If the task is impossible, return -1.
 *
 * &lt;p&gt;Example 1:
 *
 * &lt;p&gt;Input: N = 3, connections = [[1,2,5],[1,3,6],[2,3,1]] Output: 6 Explanation: Choosing any 2
 * edges will connect all cities so we choose the minimum 2. Example 2:
 *
 * &lt;p&gt;Input: N = 4, connections = [[1,2,3],[3,4,4]] Output: -1 Explanation: There is no way to
 * connect all cities even if all edges are used.
 *
 * &lt;p&gt;Note:
 *
 * &lt;p&gt;1 &lt;= N &lt;= 10000 1 &lt;= connections.length &lt;= 10000 1 &lt;= connections[i][0], connections[i][1] &lt;=
 * N 0 &lt;= connections[i][2] &lt;= 10^5 connections[i][0] != connections[i][1]
 */</comment>
<class><specifier>public</specifier> class <name>ConnectingCitiesWithMinimumCost</name> <block>{

  <comment type="block" format="javadoc">/** @author gouthamvidyapradhan Class to represent UnionFind Disjoint Set */</comment>
  <class><specifier>private</specifier> class <name>UnionFind</name> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>int</name><index>[]</index></name></type> <name>p</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name><name>int</name><index>[]</index></name></type> <name>rank</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>numOfDisjoinSet</name></decl>;</decl_stmt>

    <constructor><name>UnionFind</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>p</name></name> <operator>=</operator> <operator>new</operator> <name><name>int</name><index>[<expr><name>s</name></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>rank</name></name> <operator>=</operator> <operator>new</operator> <name><name>int</name><index>[<expr><name>s</name></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>numOfDisjoinSet</name></name> <operator>=</operator> <name>s</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <comment type="block" format="javadoc">/** Initialize with its same index as its parent */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>init</name><parameter_list>()</parameter_list> <block>{<block_content>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></for>
    </block_content>}</block></function>
    <comment type="block" format="javadoc">/**
     * Find the representative vertex
     *
     * @param i
     * @return
     */</comment>
    <function><type><specifier>private</specifier> <name>int</name></type> <name>findSet</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>i</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>findSet</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <return>return <expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return>
    </block_content>}</block></function>
    <comment type="block" format="javadoc">/**
     * Perform union of two vertex
     *
     * @param i
     * @param j
     * @return true if union is performed successfully, false otherwise
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>union</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><call><name>findSet</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><call><name>findSet</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>x</name> <operator>!=</operator> <name>y</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>rank</name><index>[<expr><name>x</name></expr>]</index></name> <operator>&gt;</operator> <name><name>rank</name><index>[<expr><name>y</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>p</name><index>[<expr><name>y</name></expr>]</index></name> <operator>=</operator> <name><name>p</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
        <else>else <block>{<block_content>
          <expr_stmt><expr><name><name>p</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>p</name><index>[<expr><name>y</name></expr>]</index></name></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name><name>rank</name><index>[<expr><name>x</name></expr>]</index></name> <operator>==</operator> <name><name>rank</name><index>[<expr><name>y</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>rank</name><index>[<expr><name>y</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="line">// increment the rank</comment>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><name>numOfDisjoinSet</name><operator>--</operator></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>
  }</block></class>

  <class><specifier>private</specifier> class <name>Edge</name> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>v1</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>v2</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>distance</name></decl>;</decl_stmt>

    <constructor><name>Edge</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>v1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>v2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>distance</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>v1</name></name> <operator>=</operator> <name>v1</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>v2</name></name> <operator>=</operator> <name>v2</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>distance</name></name> <operator>=</operator> <name>distance</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>
  }</block></class>

  <decl_stmt><decl><type><specifier>private</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Edge</name></argument>&gt;</argument_list></name></type> <name>edges</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>min</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>int</name><index>[]</index><index>[]</index></name></type> <name>A</name> <init>= <expr><block>{<expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ConnectingCitiesWithMinimumCost</name><argument_list>()</argument_list></call><operator>.</operator><call><name>minimumCost</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>int</name></type> <name>minimumCost</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>N</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index><index>[]</index></name></type> <name>connections</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>UnionFind</name></type> <name>uF</name> <init>= <expr><operator>new</operator> <call><name>UnionFind</name><argument_list>(<argument><expr><name>N</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>connections</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name><name>edges</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Edge</name><argument_list>(<argument><expr><name><name>connections</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>connections</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>connections</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name><name>edges</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><call><name><name>Comparator</name><operator>.</operator><name>comparingInt</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>o</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><name><name>o</name><operator>.</operator><name>distance</name></name></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>Edge</name></type> <name>e</name> <range>: <expr><name>edges</name></expr></range></decl></init>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name><name>uF</name><operator>.</operator><name>union</name></name><argument_list>(<argument><expr><name><name>e</name><operator>.</operator><name>v1</name></name></expr></argument>, <argument><expr><name><name>e</name><operator>.</operator><name>v2</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>min</name> <operator>+=</operator> <name><name>e</name><operator>.</operator><name>distance</name></name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>uF</name><operator>.</operator><name>numOfDisjoinSet</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>min</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></function>
}</block></class>
</unit>
