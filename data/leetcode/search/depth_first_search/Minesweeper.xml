<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\search\depth_first_search\Minesweeper.java"><package>package <name>depth_first_search</name>;</package>

<comment type="block" format="javadoc">/**
 * Created by pradhang on 3/28/2017. You are given a 2D char matrix representing the game board. 'M'
 * represents an unrevealed mine, 'E' represents an unrevealed empty square, 'B' represents a
 * revealed blank square that has no adjacent (above, below, left, right, and all 4 diagonals)
 * mines, digit ('1' to '8') represents how many mines are adjacent to this revealed square, and
 * finally 'X' represents a revealed mine.
 *
 * &lt;p&gt;Now given the next click position (row and column indices) among all the unrevealed squares
 * ('M' or 'E'), return the board after revealing this position according to the following rules:
 *
 * &lt;p&gt;If a mine ('M') is revealed, then the game is over - change it to 'X'. If an empty square
 * ('E') with no adjacent mines is revealed, then change it to revealed blank ('B') and all of its
 * adjacent unrevealed squares should be revealed recursively. If an empty square ('E') with at
 * least one adjacent mine is revealed, then change it to a digit ('1' to '8') representing the
 * number of adjacent mines. Return the board when no more squares will be revealed. Example 1:
 * Input:
 *
 * &lt;p&gt;[['E', 'E', 'E', 'E', 'E'], ['E', 'E', 'M', 'E', 'E'], ['E', 'E', 'E', 'E', 'E'], ['E', 'E',
 * 'E', 'E', 'E']]
 *
 * &lt;p&gt;Click : [3,0]
 *
 * &lt;p&gt;Output:
 *
 * &lt;p&gt;[['B', '1', 'E', '1', 'B'], ['B', '1', 'M', '1', 'B'], ['B', '1', '1', '1', 'B'], ['B', 'B',
 * 'B', 'B', 'B']]
 *
 * &lt;p&gt;Example 2: Input:
 *
 * &lt;p&gt;[['B', '1', 'E', '1', 'B'], ['B', '1', 'M', '1', 'B'], ['B', '1', '1', '1', 'B'], ['B', 'B',
 * 'B', 'B', 'B']]
 *
 * &lt;p&gt;Click : [1,2]
 *
 * &lt;p&gt;Output:
 *
 * &lt;p&gt;[['B', '1', 'E', '1', 'B'], ['B', '1', 'X', '1', 'B'], ['B', '1', '1', '1', 'B'], ['B', 'B',
 * 'B', 'B', 'B']]
 *
 * &lt;p&gt;Note: The range of the input matrix's height and width is [1,50]. The click position will only
 * be an unrevealed square ('M' or 'E'), which also means the input board contains at least one
 * clickable square. The input board won't be a stage when game is over (some mines have been
 * revealed). For simplicity, not mentioned rules should be ignored in this problem. For example,
 * you don't need to reveal all the unrevealed mines when the game is over, consider any cases that
 * you will win the game or flag any squares.
 */</comment>
<class><specifier>public</specifier> class <name>Minesweeper</name> <block>{
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>int</name><index>[]</index></name></type> <name>R</name> <init>= <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>int</name><index>[]</index></name></type> <name>C</name> <init>= <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <comment type="block" format="javadoc">/**
   * Main method
   *
   * @param args
   * @throws Exception
   */</comment>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name><name>char</name><index>[]</index><index>[]</index></name></type> <name>board</name> <init>= <expr><block>{
      <expr><block>{<expr><literal type="char">'E'</literal></expr>, <expr><literal type="char">'E'</literal></expr>, <expr><literal type="char">'E'</literal></expr>, <expr><literal type="char">'E'</literal></expr>, <expr><literal type="char">'E'</literal></expr>}</block></expr>,
      <expr><block>{<expr><literal type="char">'E'</literal></expr>, <expr><literal type="char">'E'</literal></expr>, <expr><literal type="char">'M'</literal></expr>, <expr><literal type="char">'E'</literal></expr>, <expr><literal type="char">'E'</literal></expr>}</block></expr>,
      <expr><block>{<expr><literal type="char">'E'</literal></expr>, <expr><literal type="char">'E'</literal></expr>, <expr><literal type="char">'E'</literal></expr>, <expr><literal type="char">'E'</literal></expr>, <expr><literal type="char">'E'</literal></expr>}</block></expr>,
      <expr><block>{<expr><literal type="char">'E'</literal></expr>, <expr><literal type="char">'E'</literal></expr>, <expr><literal type="char">'E'</literal></expr>, <expr><literal type="char">'E'</literal></expr>, <expr><literal type="char">'E'</literal></expr>}</block></expr>
    }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>click</name> <init>= <expr><block>{<expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><operator>new</operator> <call><name>Minesweeper</name><argument_list>()</argument_list></call><operator>.</operator><call><name>updateBoard</name><argument_list>(<argument><expr><name>board</name></expr></argument>, <argument><expr><name>click</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>board</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name><name>board</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name><name>char</name><index>[]</index><index>[]</index></name></type> <name>updateBoard</name><parameter_list>(<parameter><decl><type><name><name>char</name><index>[]</index><index>[]</index></name></type> <name>board</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>click</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><name><name>click</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><name><name>click</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>board</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>board</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name><name>char</name><index>[]</index><index>[]</index></name></type> <name>board</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>board</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><name>c</name></expr>]</index></name> <operator>==</operator> <literal type="char">'M'</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>board</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><name>c</name></expr>]</index></name> <operator>=</operator> <literal type="char">'X'</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>mineCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>newR</name> <init>= <expr><name>r</name> <operator>+</operator> <name><name>R</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>newC</name> <init>= <expr><name>c</name> <operator>+</operator> <name><name>C</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>newR</name> <operator>&gt;=</operator> <literal type="number">0</literal>
            <operator>&amp;&amp;</operator> <name>newC</name> <operator>&gt;=</operator> <literal type="number">0</literal>
            <operator>&amp;&amp;</operator> <name>newR</name> <operator>&lt;</operator> <name><name>board</name><operator>.</operator><name>length</name></name>
            <operator>&amp;&amp;</operator> <name>newC</name> <operator>&lt;</operator> <name><name>board</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>length</name>
            <operator>&amp;&amp;</operator> <name><name>board</name><index>[<expr><name>newR</name></expr>]</index><index>[<expr><name>newC</name></expr>]</index></name> <operator>==</operator> <literal type="char">'M'</literal></expr>)</condition><block type="pseudo"><block_content> <comment type="line">// boundary check</comment>
        <expr_stmt><expr><name>mineCount</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
      </block_content>}</block></for>
      <if_stmt><if>if <condition>(<expr><name>mineCount</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>board</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><name>c</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <operator>(</operator><name>mineCount</name> <operator>+</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
      <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>board</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><name>c</name></expr>]</index></name> <operator>=</operator> <literal type="char">'B'</literal></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
          <decl_stmt><decl><type><name>int</name></type> <name>newR</name> <init>= <expr><name>r</name> <operator>+</operator> <name><name>R</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>int</name></type> <name>newC</name> <init>= <expr><name>c</name> <operator>+</operator> <name><name>C</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
          <if_stmt><if>if <condition>(<expr><name>newR</name> <operator>&gt;=</operator> <literal type="number">0</literal>
              <operator>&amp;&amp;</operator> <name>newC</name> <operator>&gt;=</operator> <literal type="number">0</literal>
              <operator>&amp;&amp;</operator> <name>newR</name> <operator>&lt;</operator> <name><name>board</name><operator>.</operator><name>length</name></name>
              <operator>&amp;&amp;</operator> <name>newC</name> <operator>&lt;</operator> <name><name>board</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>length</name>
              <operator>&amp;&amp;</operator> <name><name>board</name><index>[<expr><name>newR</name></expr>]</index><index>[<expr><name>newC</name></expr>]</index></name> <operator>==</operator> <literal type="char">'E'</literal></expr>)</condition> <comment type="line">// boundary check</comment>
          <block>{<block_content>
            <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>board</name></expr></argument>, <argument><expr><name>newR</name></expr></argument>, <argument><expr><name>newC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></function>
}</block></class>
</unit>
