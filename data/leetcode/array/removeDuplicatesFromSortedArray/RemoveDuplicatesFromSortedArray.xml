<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\array\removeDuplicatesFromSortedArray\RemoveDuplicatesFromSortedArray.java"><comment type="line">// Source : https://leetcode.com/problems/remove-duplicates-from-sorted-array/description/</comment>
<comment type="line">// Author : Tianming Cao</comment>
<comment type="line">// Date   : 2018-02-02</comment>

<comment type="block" format="javadoc">/**********************************************************************************
 * Implement the following operations of a stack using queues.

 * Given a sorted array, remove the duplicates in-place such that each element appear only once and return the new length.

 * Do not allocate extra space for another array, 
 * you must do this by modifying the input array in-place with O(1) extra memory.

 * Example:

 * 	Given nums = [1,1,2],

 * 	Your function should return length = 2, with the first two elements of nums being 1 and 2 respectively.
 * 	It doesn't matter what you leave beyond the new length.
 * 
 **********************************************************************************/</comment>
<package>package <name>removeDuplicatesFromSortedArray</name>;</package>

<class><specifier>public</specifier> class <name>RemoveDuplicatesFromSortedArray</name> <block>{
	<function><type><specifier>public</specifier> <name>int</name></type> <name>removeDuplicates</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>nums</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>nums</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name><name>nums</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><name><name>nums</name><operator>.</operator><name>length</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>nums</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>nums</name><index>[<expr><name>len</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>nums</name><index>[<expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>nums</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>
		<return>return <expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
	</block_content>}</block></function>
}</block></class>
</unit>
