<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\array\array\BattleshipsInABoard.java"><package>package <name>array</name>;</package>

<comment type="block" format="javadoc">/**
 * Created by gouthamvidyapradhan on 12/08/2017. Given an 2D board, count how many battleships are
 * in it. The battleships are represented with 'X's, empty slots are represented with '.'s. You may
 * assume the following rules:
 *
 * &lt;p&gt;You receive a valid board, made of only battleships or empty slots. Battleships can only be
 * placed horizontally or vertically. In other words, they can only be made of the shape 1xN (1 row,
 * N columns) or Nx1 (N rows, 1 column), where N can be of any size. At least one horizontal or
 * vertical cell separates between two battleships - there are no adjacent battleships. Example:
 * X..X ...X ...X In the above board there are 2 battleships. Invalid Example: ...X XXXX ...X This
 * is an invalid board that you will not receive - as battleships will always have a cell separating
 * between them.
 *
 * &lt;p&gt;Follow up: Could you do it in one-pass, using only O(1) extra memory and without modifying the
 * value of the board?
 *
 * &lt;p&gt;Solution: The below solution works in one pass using only O(1) memory. Iterate through each
 * cell and add one to count if and only if the current cell equals 'X' and its adjacent upper and
 * left cell does not contain 'X'
 */</comment>
<class><specifier>public</specifier> class <name>BattleshipsInABoard</name> <block>{
  <comment type="block" format="javadoc">/**
   * Main method
   *
   * @param args
   * @throws Exception
   */</comment>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name><name>char</name><index>[]</index><index>[]</index></name></type> <name>board</name> <init>= <expr><block>{<expr><block>{<expr><literal type="char">'X'</literal></expr>, <expr><literal type="char">'.'</literal></expr>, <expr><literal type="char">'.'</literal></expr>, <expr><literal type="char">'X'</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="char">'.'</literal></expr>, <expr><literal type="char">'.'</literal></expr>, <expr><literal type="char">'.'</literal></expr>, <expr><literal type="char">'X'</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="char">'.'</literal></expr>, <expr><literal type="char">'.'</literal></expr>, <expr><literal type="char">'.'</literal></expr>, <expr><literal type="char">'X'</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>BattleshipsInABoard</name><argument_list>()</argument_list></call><operator>.</operator><call><name>countBattleships</name><argument_list>(<argument><expr><name>board</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>int</name></type> <name>countBattleships</name><parameter_list>(<parameter><decl><type><name><name>char</name><index>[]</index><index>[]</index></name></type> <name>board</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>board</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>board</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>length</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>board</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <literal type="char">'X'</literal></expr>)</condition> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <comment type="line">// check for the boundary condition</comment>
            <if_stmt><if>if <condition>(<expr><name><name>board</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <literal type="char">'X'</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
          </block_content>}</block></if></if_stmt>
          <if_stmt><if>if <condition>(<expr><name>j</name> <operator>-</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>board</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'X'</literal></expr>)</condition> <block>{<block_content>
              <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>
          </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
    </block_content>}</block></for>
    <return>return <expr><name>count</name></expr>;</return>
  </block_content>}</block></function>
}</block></class>
</unit>
