<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\array\array\FruitIntoBaskets.java"><package>package <name>array</name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Stack</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Created by gouthamvidyapradhan on 02/03/2019 In a row of trees, the i-th tree produces fruit with
 * type tree[i].
 *
 * &lt;p&gt;You start at any tree of your choice, then repeatedly perform the following steps:
 *
 * &lt;p&gt;Add one piece of fruit from this tree to your baskets. If you cannot, stop. Move to the next
 * tree to the right of the current tree. If there is no tree to the right, stop. Note that you do
 * not have any choice after the initial choice of starting tree: you must perform step 1, then step
 * 2, then back to step 1, then step 2, and so on until you stop.
 *
 * &lt;p&gt;You have two baskets, and each basket can carry any quantity of fruit, but you want each
 * basket to only carry one type of fruit each.
 *
 * &lt;p&gt;What is the total amount of fruit you can collect with this procedure?
 *
 * &lt;p&gt;Example 1:
 *
 * &lt;p&gt;Input: [1,2,1] Output: 3 Explanation: We can collect [1,2,1]. Example 2:
 *
 * &lt;p&gt;Input: [0,1,2,2] Output: 3 Explanation: We can collect [1,2,2]. If we started at the first
 * tree, we would only collect [0, 1]. Example 3:
 *
 * &lt;p&gt;Input: [1,2,3,2,2] Output: 4 Explanation: We can collect [2,3,2,2]. If we started at the first
 * tree, we would only collect [1, 2]. Example 4:
 *
 * &lt;p&gt;Input: [3,3,3,1,2,1,1,2,3,3,4] Output: 5 Explanation: We can collect [1,2,1,1,2]. If we
 * started at the first tree or the eighth tree, we would only collect 4 fruits.
 *
 * &lt;p&gt;Note:
 *
 * &lt;p&gt;1 &lt;= tree.length &lt;= 40000 0 &lt;= tree[i] &lt; tree.length
 */</comment>
<class><specifier>public</specifier> class <name>FruitIntoBaskets</name> <block>{

  <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>max</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <comment type="block" format="javadoc">/**
   * Main method
   *
   * @param args
   */</comment>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>trees</name> <init>= <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>FruitIntoBaskets</name><argument_list>()</argument_list></call><operator>.</operator><call><name>totalFruit</name><argument_list>(<argument><expr><name>trees</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>int</name></type> <name>totalFruit</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>tree</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>t1</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>t2</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>Stack</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>stack</name> <init>= <expr><operator>new</operator> <call><name><name>Stack</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <range>: <expr><name>tree</name></expr></range></decl></init>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>t1</name> <operator>||</operator> <name>i</name> <operator>==</operator> <name>t2</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>countAndMax</name><argument_list>(<argument><expr><name>stack</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>t1</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>t1</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>countAndMax</name><argument_list>(<argument><expr><name>stack</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>t2</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>t2</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>countAndMax</name><argument_list>(<argument><expr><name>stack</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <decl_stmt><decl><type><name><name>Stack</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>temp</name> <init>= <expr><operator>new</operator> <call><name><name>Stack</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name>t1</name> <operator>=</operator> <call><name><name>stack</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>countAndMax</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <while>while <condition>(<expr><operator>!</operator><call><name><name>stack</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>stack</name><operator>.</operator><name>peek</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>t1</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>countAndMax</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><call><name><name>stack</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></while>
          <expr_stmt><expr><name>t2</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>stack</name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>countAndMax</name><argument_list>(<argument><expr><name>stack</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>max</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>countAndMax</name><parameter_list>(<parameter><decl><type><name><name>Stack</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>stack</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>stack</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>max</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name>max</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>
}</block></class>
</unit>
