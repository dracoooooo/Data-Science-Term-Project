<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\array\array\MyCalendarThree.java"><package>package <name>array</name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Created by gouthamvidyapradhan on 12/03/2019 Implement a MyCalendarThree class to store your
 * events. A new event can always be added.
 *
 * &lt;p&gt;Your class will have one method, book(int start, int end). Formally, this represents a booking
 * on the half open interval [start, end), the range of real numbers x such that start &lt;= x &lt; end.
 *
 * &lt;p&gt;A K-booking happens when K events have some non-empty intersection (ie., there is some time
 * that is common to all K events.)
 *
 * &lt;p&gt;For each call to the method MyCalendar.book, return an integer K representing the largest
 * integer such that there exists a K-booking in the calendar.
 *
 * &lt;p&gt;Your class will be called like this: MyCalendarThree cal = new MyCalendarThree();
 * MyCalendarThree.book(start, end) Example 1:
 *
 * &lt;p&gt;MyCalendarThree(); MyCalendarThree.book(10, 20); // returns 1 MyCalendarThree.book(50, 60); //
 * returns 1 MyCalendarThree.book(10, 40); // returns 2 MyCalendarThree.book(5, 15); // returns 3
 * MyCalendarThree.book(5, 10); // returns 3 MyCalendarThree.book(25, 55); // returns 3 Explanation:
 * The first two events can be booked and are disjoint, so the maximum K-booking is a 1-booking. The
 * third event [10, 40) intersects the first event, and the maximum K-booking is a 2-booking. The
 * remaining events cause the maximum K-booking to be only a 3-booking. Note that the last event
 * locally causes a 2-booking, but the answer is still 3 because eg. [10, 20), [10, 40), and [5, 15)
 * are still triple booked.
 */</comment>
<class><specifier>public</specifier> class <name>MyCalendarThree</name> <block>{

  <decl_stmt><decl><type><specifier>private</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Node</name></argument>&gt;</argument_list></name></type> <name>events</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>max</name></decl>;</decl_stmt>

  <class><specifier>private</specifier> class <name>Node</name> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>index</name></decl>;</decl_stmt>

    <constructor><name>Node</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>n</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>index</name></name> <operator>=</operator> <name>index</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>getN</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><name>n</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>int</name></type> <name>getIndex</name><parameter_list>()</parameter_list> <block>{<block_content>
      <return>return <expr><name>index</name></expr>;</return>
    </block_content>}</block></function>
  }</block></class>

  <constructor><specifier>public</specifier> <name>MyCalendarThree</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>events</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>max</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></constructor>

  <comment type="block" format="javadoc">/**
   * Main method
   *
   * @param args
   */</comment>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>MyCalendarThree</name></type> <name>calendar</name> <init>= <expr><operator>new</operator> <call><name>MyCalendarThree</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name><name>calendar</name><operator>.</operator><name>book</name></name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name><name>calendar</name><operator>.</operator><name>book</name></name><argument_list>(<argument><expr><literal type="number">50</literal></expr></argument>, <argument><expr><literal type="number">60</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name><name>calendar</name><operator>.</operator><name>book</name></name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name><name>calendar</name><operator>.</operator><name>book</name></name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name><name>calendar</name><operator>.</operator><name>book</name></name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name><name>calendar</name><operator>.</operator><name>book</name></name><argument_list>(<argument><expr><literal type="number">25</literal></expr></argument>, <argument><expr><literal type="number">55</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>int</name></type> <name>book</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>end</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>events</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Node</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>events</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Node</name><argument_list>(<argument><expr><name>end</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>events</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><operator>(</operator><call><name><name>Comparator</name><operator>.</operator><name>comparing</name></name><argument_list>(<argument><expr><name>Node</name><operator>::</operator><name>getN</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>thenComparing</name><argument_list>(<argument><expr><name>Node</name><operator>::</operator><name>getIndex</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>Node</name></type> <name>node</name> <range>: <expr><name>events</name></expr></range></decl></init>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>node</name><operator>.</operator><name>index</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>node</name><operator>.</operator><name>n</name></name> <operator>&gt;=</operator> <name>end</name></expr>)</condition> <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>count</name> <operator>+=</operator> <ternary><condition><expr><name><name>node</name><operator>.</operator><name>index</name></name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>node</name><operator>.</operator><name>getN</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <name>start</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>max</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name>max</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>max</name></expr>;</return>
  </block_content>}</block></function>
}</block></class>
</unit>
