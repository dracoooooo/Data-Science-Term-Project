<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\array\array\CircularArrayLoop.java"><class><specifier>public</specifier> class <name>CircularArrayLoop</name> <block>{
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>circularArrayLoop</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>arr</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>,<argument><name>Integer</name></argument>&gt;</argument_list></name></type><name>map</name><init>=<expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>,<argument><name>Integer</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name><name>arr</name><operator>.</operator><name>length</name></name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>h</name><init>=<expr><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>si</name><init>=<expr><name>i</name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if<condition>(<expr><operator>!</operator><call><name><name>map</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>si</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content><comment type="line">//not previously visited</comment>
                <decl_stmt><decl><type><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>,<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>cmap</name><init>=<expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>,<argument><name>Integer</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>boolean</name></type> <name>ans</name><init>=<expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>ci</name><init>=<expr><name>si</name></expr></init></decl>;</decl_stmt> <comment type="line">//current index</comment>
                <decl_stmt><decl><type><name>int</name></type> <name>previ</name><init>=<expr><name>si</name></expr></init></decl>;</decl_stmt><comment type="line">//prev index</comment>
                <while>while<condition>(<expr><operator>!</operator><call><name><name>map</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>ci</name></expr></argument>)</argument_list></call><operator>&amp;&amp;</operator><operator>!</operator><call><name><name>cmap</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
                   <if_stmt><if>if<condition>(<expr><name>h</name><operator>*</operator><name><name>arr</name><index>[<expr><name>ci</name></expr>]</index></name><operator>&lt;=</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                       <break>break;</break></block_content></block></if></if_stmt>
                    <expr_stmt><expr><call><name><name>cmap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>ci</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   <expr_stmt><expr><name>previ</name><operator>=</operator><name>ci</name></expr>;</expr_stmt><comment type="line">//mark previous index</comment>
                    <expr_stmt><expr><name>ci</name><operator>=</operator><name>ci</name><operator>+</operator><name><name>arr</name><index>[<expr><name>ci</name></expr>]</index></name></expr>;</expr_stmt>
                    <if_stmt><if>if<condition>(<expr><name>ci</name><operator>&gt;=</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><name>ci</name><operator>=</operator><name>ci</name><operator>%</operator><name><name>arr</name><operator>.</operator><name>length</name></name></expr>;</expr_stmt></block_content></block></if>
                    <else>else<block>{<block_content>
                        <decl_stmt><decl><type><name>int</name></type> <name>steps</name><init>=<expr><operator>(</operator><name>ci</name><operator>*</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><name>ci</name><operator>=</operator><operator>(</operator><name><name>arr</name><operator>.</operator><name>length</name></name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>-</operator><operator>(</operator><name>steps</name><operator>%</operator><name><name>arr</name><operator>.</operator><name>length</name></name><operator>)</operator></expr>;</expr_stmt>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></while>
                <if_stmt><if>if<condition>(<expr><call><name><name>cmap</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>ci</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
                    <if_stmt><if>if<condition>(<expr><name>previ</name><operator>!=</operator><name>ci</name></expr>)</condition><block type="pseudo"><block_content> <comment type="line">//cycle found</comment>
                        <return>return<expr><operator>(</operator><literal type="boolean">true</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
                </block_content>}</block></if>
                <else>else <block>{<block_content> <comment type="line">//put all keys in the map</comment>
                   <for>for<control>(<init><decl><type><name>Integer</name></type> <name>key</name><range>:<expr><call><name><name>cmap</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control><block>{<block_content>
                       <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   </block_content>}</block></for> 
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <return>return<expr><operator>(</operator><literal type="boolean">false</literal><operator>)</operator></expr>;</return><comment type="line">//no cycle</comment>
    </block_content>}</block></function><comment type="line">//circularArrayLoop</comment>
 
}</block></class>
</unit>
