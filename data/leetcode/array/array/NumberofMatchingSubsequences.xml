<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\array\array\NumberofMatchingSubsequences.java"><class><specifier>public</specifier> class <name>NumberofMatchingSubsequences</name> <block>{
    <function><type><specifier>public</specifier> <name>int</name></type> <name>numMatchingSubseq</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>S</name></decl></parameter>, <parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>words</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Boolean</name></argument>&gt;</argument_list></name></type> <name>memo</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>checkTF</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
        <comment type="line">// go through all elements of string array</comment>
        <for>for<control>(<init><decl><type><name>String</name></type> <name>tmp</name><range>: <expr><name>words</name></expr></range></decl></init>)</control> <block>{<block_content>
            <comment type="line">// if HashMap already store the specific string</comment>
            <if_stmt><if>if<condition>(<expr><call><name><name>memo</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="boolean">true</literal></expr>)</condition> <block>{<block_content>
                <comment type="line">// if that string is True, then ans++, otherwise go to next loop.</comment>
                <if_stmt><if>if<condition>( <expr><call><name><name>memo</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="boolean">true</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>result</name><operator>++</operator></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>checkTF</name> <operator>=</operator> <call><name>check</name><argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// if element length is longer than original string, it must be false</comment>
            <if_stmt><if>if<condition>(<expr><call><name><name>S</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <call><name><name>tmp</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>checkTF</name> <operator>==</operator> <literal type="boolean">true</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>result</name><operator>++</operator></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <comment type="line">// add new string pattern in the HashMap</comment>
            <expr_stmt><expr><call><name><name>memo</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>checkTF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>result</name></expr>;</return>
    </block_content>}</block></function>
    <comment type="line">// two pointer method to check whether the target string is subsequence of original string.</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>check</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>S</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>target</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>cnt_1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>cnt_2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <while>while<condition>(<expr><name>cnt_1</name> <operator>!=</operator> <call><name><name>S</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>cnt_2</name> <operator>!=</operator> <call><name><name>target</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if<condition>(<expr><call><name><name>target</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>cnt_2</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name><name>S</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>cnt_1</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>cnt_1</name><operator>++</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>cnt_2</name><operator>++</operator></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else <block>{<block_content>
                <expr_stmt><expr><name>cnt_1</name><operator>++</operator></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></while>
        <if_stmt><if>if<condition>(<expr><name>cnt_2</name> <operator>==</operator> <call><name><name>target</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>
}</block></class>
</unit>
