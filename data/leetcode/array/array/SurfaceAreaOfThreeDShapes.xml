<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\array\array\SurfaceAreaOfThreeDShapes.java"><package>package <name>array</name>;</package>

<comment type="block" format="javadoc">/**
 * Created by gouthamvidyapradhan on 30/04/2019 On a N * N grid, we place some 1 * 1 * 1 cubes.
 *
 * &lt;p&gt;Each value v = grid[i][j] represents a tower of v cubes placed on top of grid cell (i, j).
 *
 * &lt;p&gt;Return the total surface area of the resulting shapes.
 *
 * &lt;p&gt;Example 1:
 *
 * &lt;p&gt;Input: [[2]] Output: 10 Example 2:
 *
 * &lt;p&gt;Input: [[1,2],[3,4]] Output: 34 Example 3:
 *
 * &lt;p&gt;Input: [[1,0],[0,2]] Output: 16 Example 4:
 *
 * &lt;p&gt;Input: [[1,1,1],[1,0,1],[1,1,1]] Output: 32 Example 5:
 *
 * &lt;p&gt;Input: [[2,2,2],[2,1,2],[2,2,2]] Output: 46
 *
 * &lt;p&gt;Note:
 *
 * &lt;p&gt;1 &lt;= N &lt;= 50 0 &lt;= grid[i][j] &lt;= 50
 *
 * &lt;p&gt;Solution: O(N x M) For each cell, check each adjacent cell and sum the value of (current cell
 * - adjacent cell) if the current cell value is greater than adjacent cell. For every cell which
 * has value grater then 0, the top surface area is by default 1 therefore add one to the sum of
 * each cell.
 */</comment>
<class><specifier>public</specifier> class <name>SurfaceAreaOfThreeDShapes</name> <block>{

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>int</name><index>[]</index></name></type> <name>R</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>int</name><index>[]</index></name></type> <name>C</name> <init>= <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <comment type="block" format="javadoc">/**
   * Main method
   *
   * @param args
   */</comment>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>int</name><index>[]</index><index>[]</index></name></type> <name>A</name> <init>= <expr><block>{<expr><block>{<expr><literal type="number">2</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SurfaceAreaOfThreeDShapes</name><argument_list>()</argument_list></call><operator>.</operator><call><name>surfaceArea</name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>int</name></type> <name>surfaceArea</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index><index>[]</index></name></type> <name>grid</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>grid</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>grid</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>length</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>cell</name> <init>= <expr><name><name>grid</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
          <decl_stmt><decl><type><name>int</name></type> <name>newR</name> <init>= <expr><name>i</name> <operator>+</operator> <name><name>R</name><index>[<expr><name>k</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>int</name></type> <name>newC</name> <init>= <expr><name>j</name> <operator>+</operator> <name><name>C</name><index>[<expr><name>k</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
          <if_stmt><if>if <condition>(<expr><name>newR</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>newC</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>newR</name> <operator>&lt;</operator> <name><name>grid</name><operator>.</operator><name>length</name></name> <operator>&amp;&amp;</operator> <name>newC</name> <operator>&lt;</operator> <name><name>grid</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>length</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>adjacent</name> <init>= <expr><name><name>grid</name><index>[<expr><name>newR</name></expr>]</index><index>[<expr><name>newC</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>cell</name> <operator>&gt;</operator> <name>adjacent</name></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><name>sum</name> <operator>+=</operator> <operator>(</operator><name>cell</name> <operator>-</operator> <name>adjacent</name><operator>)</operator></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
          </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>newR</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>newR</name> <operator>&gt;=</operator> <name><name>grid</name><operator>.</operator><name>length</name></name> <operator>||</operator> <name>newC</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>newC</name> <operator>&gt;=</operator> <name><name>grid</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>length</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>sum</name> <operator>+=</operator> <name>cell</name></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <if_stmt><if>if <condition>(<expr><name>cell</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>sum</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
    </block_content>}</block></for>
    <return>return <expr><name>sum</name></expr>;</return>
  </block_content>}</block></function>
}</block></class>
</unit>
