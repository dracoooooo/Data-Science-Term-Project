<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\array\array\FairCandySwap.java"><class><specifier>public</specifier> class <name>FairCandySwap</name> <block>{
    <function><type><specifier>public</specifier> <name><name>int</name><index>[]</index></name></type> <name>fairCandySwap</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>A</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>B</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>sa</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>sb</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>  <comment type="line">// sum of A, B respectively</comment>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>x</name><range>: <expr><name>A</name></expr></range></decl></init>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name>sa</name> <operator>+=</operator> <name>x</name></expr>;</expr_stmt></block_content></block></for>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>x</name><range>: <expr><name>B</name></expr></range></decl></init>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name>sb</name> <operator>+=</operator> <name>x</name></expr>;</expr_stmt></block_content></block></for>
        <decl_stmt><decl><type><name>int</name></type> <name>delta</name> <init>= <expr><operator>(</operator><name>sb</name> <operator>-</operator> <name>sa</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
        <comment type="line">// If Alice gives x, she expects to receive x + delta</comment>

        <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>setB</name> <init>= <expr><operator>new</operator> <call><name>HashSet</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>x</name><range>: <expr><name>B</name></expr></range></decl></init>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>setB</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        <for>for <control>(<init><decl><type><name>int</name></type> <name>x</name><range>: <expr><name>A</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>setB</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <name>delta</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><operator>new</operator> <name><name>int</name><index>[]</index></name><block>{<expr><name>x</name></expr>, <expr><name>x</name> <operator>+</operator> <name>delta</name></expr>}</block></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

        <throw>throw <expr><literal type="null">null</literal></expr>;</throw>
    </block_content>}</block></function>
}</block></class>
</unit>
