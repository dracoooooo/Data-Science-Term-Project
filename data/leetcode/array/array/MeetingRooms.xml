<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\array\array\MeetingRooms.java"><package>package <name>array</name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Created by gouthamvidyapradhan on 27/11/2017. Given an array of meeting time intervals consisting
 * of start and end times [[s1,e1],[s2,e2],...] (si &lt; ei), determine if a person could attend all
 * meetings.
 *
 * &lt;p&gt;For example, Given [[0, 30],[5, 10],[15, 20]], return false.
 *
 * &lt;p&gt;Solution: Sort the interval based on the start interval. Then, for every interval check if the
 * previous interval ends before the start of the current interval.
 */</comment>
<class><specifier>public</specifier> class <name>MeetingRooms</name> <block>{

  <class><specifier>public</specifier> <specifier>static</specifier> class <name>Interval</name> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>start</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>end</name></decl>;</decl_stmt>

    <constructor><name>Interval</name><parameter_list>()</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name>start</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>end</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <constructor><name>Interval</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name>start</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>end</name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>
  }</block></class>

  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>Interval</name></type> <name>i1</name> <init>= <expr><operator>new</operator> <call><name>Interval</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Interval</name></type> <name>i2</name> <init>= <expr><operator>new</operator> <call><name>Interval</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Interval</name></type> <name>i3</name> <init>= <expr><operator>new</operator> <call><name>Interval</name><argument_list>(<argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>Interval</name><index>[]</index></name></type> <name>intervals</name> <init>= <expr><block>{<expr><name>i1</name></expr>, <expr><name>i2</name></expr>, <expr><name>i3</name></expr>}</block></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>MeetingRooms</name><argument_list>()</argument_list></call><operator>.</operator><call><name>canAttendMeetings</name><argument_list>(<argument><expr><name>intervals</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>boolean</name></type> <name>canAttendMeetings</name><parameter_list>(<parameter><decl><type><name><name>Interval</name><index>[]</index></name></type> <name>intervals</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>Arrays</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><name>intervals</name></expr></argument>, <argument><expr><lambda><parameter_list>(<parameter><decl><name>a</name></decl></parameter>, <parameter><decl><name>b</name></decl></parameter>)</parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>Integer</name><operator>.</operator><name>compare</name></name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>start</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>start</name></name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>intervals</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>intervals</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>start</name> <operator>&lt;</operator> <name><name>intervals</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>end</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
  </block_content>}</block></function>
}</block></class>
</unit>
