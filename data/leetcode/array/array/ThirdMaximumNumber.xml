<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\array\array\ThirdMaximumNumber.java"><package>package <name>array</name>;</package>

<comment type="block" format="javadoc">/**
 * Created by gouthamvidyapradhan on 25/03/2017. Given a non-empty array of integers, return the
 * third maximum number in this array. If it does not exist, return the maximum number. The time
 * complexity must be in O(n).
 *
 * &lt;p&gt;Example 1: Input: [3, 2, 1]
 *
 * &lt;p&gt;Output: 1
 *
 * &lt;p&gt;Explanation: The third maximum is 1. Example 2: Input: [1, 2]
 *
 * &lt;p&gt;Output: 2
 *
 * &lt;p&gt;Explanation: The third maximum does not exist, so the maximum (2) is returned instead. Example
 * 3: Input: [2, 2, 3, 1]
 *
 * &lt;p&gt;Output: 1
 *
 * &lt;p&gt;Explanation: Note that the third maximum here means the third maximum distinct number. Both
 * numbers with value 2 are both considered as second maximum.
 */</comment>
<class><specifier>public</specifier> class <name>ThirdMaximumNumber</name> <block>{
  <comment type="block" format="javadoc">/**
   * Main method
   *
   * @param args
   * @throws Exception
   */</comment>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>a</name> <init>= <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ThirdMaximumNumber</name><argument_list>()</argument_list></call><operator>.</operator><call><name>thirdMax</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>int</name></type> <name>thirdMax</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>nums</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>long</name><index>[]</index></name></type> <name>max</name> <init>= <expr><block>{<expr><name><name>Long</name><operator>.</operator><name>MIN_VALUE</name></name></expr>, <expr><name><name>Long</name><operator>.</operator><name>MIN_VALUE</name></name></expr>, <expr><name><name>Long</name><operator>.</operator><name>MIN_VALUE</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>num</name> <range>: <expr><name>nums</name></expr></range></decl></init>)</control> <block>{<block_content>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>max</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&gt;</operator> <name>num</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><name><name>max</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name>num</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><name>j</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>temp1</name></decl>, <decl><type ref="prev"/><name>temp2</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>temp1</name> <operator>=</operator> <name>num</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
        <while>while <condition>(<expr><name>k</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>temp2</name> <operator>=</operator> <name><name>max</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>max</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name>temp1</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>temp1</name> <operator>=</operator> <name>temp2</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>k</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></while>
        <break>break;</break>
      </block_content>}</block></for>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>MIN_VALUE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><ternary><condition><expr><operator>(</operator><name>count</name> <operator>&gt;=</operator> <literal type="number">3</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>max</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr> </then><else>: <expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>max</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></else></ternary></expr>;</return>
  </block_content>}</block></function>
}</block></class>
</unit>
