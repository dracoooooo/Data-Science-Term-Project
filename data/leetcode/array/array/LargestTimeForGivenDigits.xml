<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\array\array\LargestTimeForGivenDigits.java"><package>package <name>array</name>;</package>

<comment type="block" format="javadoc">/**
 * Created by gouthamvidyapradhan on 06/08/2019 Given an array of 4 digits, return the largest 24
 * hour time that can be made.
 *
 * &lt;p&gt;The smallest 24 hour time is 00:00, and the largest is 23:59. Starting from 00:00, a time is
 * larger if more time has elapsed since midnight.
 *
 * &lt;p&gt;Return the answer as a string of length 5. If no valid time can be made, return an empty
 * string.
 *
 * &lt;p&gt;Example 1:
 *
 * &lt;p&gt;Input: [1,2,3,4] Output: "23:41" Example 2:
 *
 * &lt;p&gt;Input: [5,5,5,5] Output: ""
 *
 * &lt;p&gt;Note:
 *
 * &lt;p&gt;A.length == 4 0 &lt;= A[i] &lt;= 9 Solution O(N ^ 4) Check all combinations of time possible and
 * return the maximum possible as the answer.
 */</comment>
<class><specifier>public</specifier> class <name>LargestTimeForGivenDigits</name> <block>{
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>A</name> <init>= <expr><block>{<expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>LargestTimeForGivenDigits</name><argument_list>()</argument_list></call><operator>.</operator><call><name>largestTimeFromDigits</name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>String</name></type> <name>largestTimeFromDigits</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>A</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>max</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>result</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>A</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>A</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>A</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>j</name> <operator>==</operator> <name>i</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>A</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>A</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>A</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><name>k</name> <operator>==</operator> <name>i</name> <operator>||</operator> <name>k</name> <operator>==</operator> <name>j</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
          <if_stmt><if>if <condition>(<expr><name><name>A</name><index>[<expr><name>k</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
          <for>for <control>(<init><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>l</name> <operator>&lt;</operator> <name><name>A</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>l</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>l</name> <operator>==</operator> <name>i</name> <operator>||</operator> <name>l</name> <operator>==</operator> <name>j</name> <operator>||</operator> <name>l</name> <operator>==</operator> <name>k</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>value</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>A</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <name><name>A</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator> <operator>*</operator> <literal type="number">60</literal><operator>)</operator> <operator>+</operator> <name><name>A</name><index>[<expr><name>k</name></expr>]</index></name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <name><name>A</name><index>[<expr><name>l</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>value</name> <operator>&gt;</operator> <name>max</name></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><name>max</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
              <expr_stmt><expr><name>result</name> <operator>=</operator> <name><name>A</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="string">""</literal> <operator>+</operator> <name><name>A</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator> <literal type="string">":"</literal> <operator>+</operator> <name><name>A</name><index>[<expr><name>k</name></expr>]</index></name> <operator>+</operator> <literal type="string">""</literal> <operator>+</operator> <name><name>A</name><index>[<expr><name>l</name></expr>]</index></name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
          </block_content>}</block></for>
        </block_content>}</block></for>
      </block_content>}</block></for>
    </block_content>}</block></for>
    <return>return <expr><name>result</name></expr>;</return>
  </block_content>}</block></function>
}</block></class>
</unit>
