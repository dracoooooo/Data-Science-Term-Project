<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\array\array\IntersectionOfTwoArraysII.java"><class><specifier>public</specifier> class <name>IntersectionOfTwoArraysII</name> <block>{
    <function><type><specifier>public</specifier> <name><name>int</name><index>[]</index></name></type> <name>intersect</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>nums1</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>nums2</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>temp</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>arr</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        
        <for>for<control>(<init><decl><type><name>int</name></type> <name>itr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>itr</name> <operator>&lt;</operator> <name><name>nums1</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>itr</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>temp</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name><name>nums1</name><index>[<expr><name>itr</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>              <block>{<block_content> 
                <expr_stmt><expr><call><name><name>temp</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>nums1</name><index>[<expr><name>itr</name></expr>]</index></name></expr></argument>, <argument><expr><call><name><name>temp</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>nums1</name><index>[<expr><name>itr</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
            </block_content>}</block></if>  
            <else>else<block>{<block_content> 
                <expr_stmt><expr><call><name><name>temp</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>nums1</name><index>[<expr><name>itr</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
            </block_content>}</block></else></if_stmt> 
        </block_content>}</block></for>
        
        <for>for<control>(<init><decl><type><name>int</name></type> <name>itr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>itr</name> <operator>&lt;</operator> <name><name>nums2</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>itr</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
            <if_stmt><if>if<condition>(<expr><call><name><name>temp</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name><name>nums2</name><index>[<expr><name>itr</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name><name>temp</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>nums2</name><index>[<expr><name>itr</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if<condition>(<expr><name>n</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
                    <expr_stmt><expr><call><name><name>temp</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>nums2</name><index>[<expr><name>itr</name></expr>]</index></name></expr></argument>, <argument><expr><call><name><name>temp</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>nums2</name><index>[<expr><name>itr</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
                     <expr_stmt><expr><call><name><name>arr</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>nums2</name><index>[<expr><name>itr</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        
        <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>res</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[<expr><call><name><name>arr</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>itr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>itr</name> <operator>&lt;</operator> <call><name><name>arr</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>itr</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
            <expr_stmt><expr><name><name>res</name><index>[<expr><name>itr</name></expr>]</index></name> <operator>=</operator> <call><name><name>arr</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>itr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>res</name></expr>;</return>       
    </block_content>}</block></function>   
}</block></class>
</unit>
