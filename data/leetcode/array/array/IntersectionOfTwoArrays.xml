<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\array\array\IntersectionOfTwoArrays.java"><class>class <name>IntersectionOfTwoArrays</name> <block>{
  <function><type><specifier>public</specifier> <name><name>int</name><index>[]</index></name></type> <name>set_intersection</name><parameter_list>(<parameter><decl><type><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>set1</name></decl></parameter>, <parameter><decl><type><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>set2</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>int</name> <index>[]</index></name></type> <name>output</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[<expr><call><name><name>set1</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>Integer</name></type> <name>s</name> <range>: <expr><name>set1</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
      <if_stmt><if>if <condition>(<expr><call><name><name>set2</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>output</name><index>[<expr><name>idx</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

    <return>return <expr><call><name><name>Arrays</name><operator>.</operator><name>copyOf</name></name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name><name>int</name><index>[]</index></name></type> <name>intersection</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>nums1</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>nums2</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>set1</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>Integer</name></type> <name>n</name> <range>: <expr><name>nums1</name></expr></range></decl></init>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>set1</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
    <decl_stmt><decl><type><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>set2</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>Integer</name></type> <name>n</name> <range>: <expr><name>nums2</name></expr></range></decl></init>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>set2</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

    <if_stmt><if>if <condition>(<expr><call><name><name>set1</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>set2</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>set_intersection</name><argument_list>(<argument><expr><name>set1</name></expr></argument>, <argument><expr><name>set2</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
    <else>else<block type="pseudo"><block_content> <return>return <expr><call><name>set_intersection</name><argument_list>(<argument><expr><name>set2</name></expr></argument>, <argument><expr><name>set1</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
  </block_content>}</block></function>
}</block></class></unit>
