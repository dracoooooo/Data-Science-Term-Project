<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\array\array\MeetingScheduler.java"><package>package <name>array</name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Created by gouthamvidyapradhan on 19/11/2019 Given the availability time slots arrays slots1 and
 * slots2 of two people and a meeting duration duration, return the earliest time slot that works
 * for both of them and is of duration duration.
 *
 * &lt;p&gt;If there is no common time slot that satisfies the requirements, return an empty array.
 *
 * &lt;p&gt;The format of a time slot is an array of two elements [start, end] representing an inclusive
 * time range from start to end.
 *
 * &lt;p&gt;It is guaranteed that no two availability slots of the same person intersect with each other.
 * That is, for any two time slots [start1, end1] and [start2, end2] of the same person, either
 * start1 &gt; end2 or start2 &gt; end1.
 *
 * &lt;p&gt;Example 1:
 *
 * &lt;p&gt;Input: slots1 = [[10,50],[60,120],[140,210]], slots2 = [[0,15],[60,70]], duration = 8 Output:
 * [60,68] Example 2:
 *
 * &lt;p&gt;Input: slots1 = [[10,50],[60,120],[140,210]], slots2 = [[0,15],[60,70]], duration = 12 Output:
 * []
 *
 * &lt;p&gt;Constraints:
 *
 * &lt;p&gt;1 &lt;= slots1.length, slots2.length &lt;= 10^4 slots1[i].length, slots2[i].length == 2 slots1[i][0]
 * &lt; slots1[i][1] slots2[i][0] &lt; slots2[i][1] 0 &lt;= slots1[i][j], slots2[i][j] &lt;= 10^9 1 &lt;= duration
 * &lt;= 10^6
 */</comment>
<class><specifier>public</specifier> class <name>MeetingScheduler</name> <block>{
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>int</name><index>[]</index><index>[]</index></name></type> <name>slots1</name> <init>= <expr><block>{<expr><block>{<expr><literal type="number">10</literal></expr>, <expr><literal type="number">50</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">60</literal></expr>, <expr><literal type="number">120</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">140</literal></expr>, <expr><literal type="number">210</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>int</name><index>[]</index><index>[]</index></name></type> <name>slots2</name> <init>= <expr><block>{<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">15</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">60</literal></expr>, <expr><literal type="number">70</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name>MeetingScheduler</name><argument_list>()</argument_list></call><operator>.</operator><call><name>minAvailableDuration</name><argument_list>(<argument><expr><name>slots1</name></expr></argument>, <argument><expr><name>slots2</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <class><specifier>private</specifier> class <name>Node</name> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>s</name></decl>, <decl><type ref="prev"/><name>e</name></decl>, <decl><type ref="prev"/><name>type</name></decl>;</decl_stmt>

    <constructor><name>Node</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>e</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>s</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>e</name></name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>
  }</block></class>

  <function><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>minAvailableDuration</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index><index>[]</index></name></type> <name>slots1</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index><index>[]</index></name></type> <name>slots2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>duration</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>PriorityQueue</name><argument_list type="generic">&lt;<argument><name>Node</name></argument>&gt;</argument_list></name></type> <name>pq</name> <init>=
        <expr><operator>new</operator> <call><name><name>PriorityQueue</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(
            <argument><expr><lambda><parameter_list>(<parameter><decl><name>o1</name></decl></parameter>, <parameter><decl><name>o2</name></decl></parameter>)</parameter_list> -&gt; <block>{<block_content>
              <decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name><name>Integer</name><operator>.</operator><name>compare</name></name><argument_list>(<argument><expr><name><name>o1</name><operator>.</operator><name>s</name></name></expr></argument>, <argument><expr><name><name>o2</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
              <if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <return>return <expr><call><name><name>Integer</name><operator>.</operator><name>compare</name></name><argument_list>(<argument><expr><name><name>o1</name><operator>.</operator><name>e</name></name></expr></argument>, <argument><expr><name><name>o2</name><operator>.</operator><name>e</name></name></expr></argument>)</argument_list></call></expr>;</return>
              </block_content>}</block></if> <else>else<block type="pseudo"><block_content> <return>return <expr><name>r</name></expr>;</return></block_content></block></else></if_stmt>
            </block_content>}</block></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name><name>int</name><index>[]</index></name></type> <name>s</name> <range>: <expr><name>slots1</name></expr></range></decl></init>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name><name>pq</name><operator>.</operator><name>offer</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Node</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <for>for <control>(<init><decl><type><name><name>int</name><index>[]</index></name></type> <name>s</name> <range>: <expr><name>slots2</name></expr></range></decl></init>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name><name>pq</name><operator>.</operator><name>offer</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Node</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <decl_stmt><decl><type><name>Node</name></type> <name>prev</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><operator>!</operator><call><name><name>pq</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>Node</name></type> <name>node</name> <init>= <expr><call><name><name>pq</name><operator>.</operator><name>poll</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>prev</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>prev</name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>prev</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name><name>node</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>int</name></type> <name>s</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name><name>prev</name><operator>.</operator><name>s</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>int</name></type> <name>e</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><name><name>prev</name><operator>.</operator><name>e</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>.</operator><name>e</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <if_stmt><if>if <condition>(<expr><operator>(</operator><name>e</name> <operator>-</operator> <name>s</name><operator>)</operator> <operator>&gt;=</operator> <name>duration</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>s</name> <operator>+</operator> <name>duration</name></expr></argument>)</argument_list></call></expr>;</return>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>node</name><operator>.</operator><name>e</name></name> <operator>&gt;</operator> <name><name>prev</name><operator>.</operator><name>e</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>prev</name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></while>
    <return>return <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return>
  </block_content>}</block></function>
}</block></class>
</unit>
