<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\array\array\XofaKindinaDeckofCards.java"><class><specifier>public</specifier> class <name>XofaKindinaDeckofCards</name> <block>{
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>hasGroupsSizeX</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>deck</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>N</name> <init>= <expr><name><name>deck</name><operator>.</operator><name>length</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>count</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[<expr><literal type="number">10000</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>c</name><range>: <expr><name>deck</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>count</name><index>[<expr><name>c</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block_content></block></for>

        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>values</name> <init>= <expr><operator>new</operator> <call><name>ArrayList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10000</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
            <if_stmt><if>if <condition>(<expr><name><name>count</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>count</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

        <label><name>search</name>:</label> <for>for <control>(<init><decl><type><name>int</name></type> <name>X</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>X</name> <operator>&lt;=</operator> <name>N</name></expr>;</condition> <incr><expr><operator>++</operator><name>X</name></expr></incr>)</control><block type="pseudo"><block_content>
            <if_stmt><if>if <condition>(<expr><name>N</name> <operator>%</operator> <name>X</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>v</name><range>: <expr><name>values</name></expr></range></decl></init>)</control><block type="pseudo"><block_content>
                    <if_stmt><if>if <condition>(<expr><name>v</name> <operator>%</operator> <name>X</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                        <continue>continue <name>search</name>;</continue></block_content></block></if></if_stmt></block_content></block></for>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            </block_content>}</block></if></if_stmt></block_content></block></for>

        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>
}</block></class>
</unit>
