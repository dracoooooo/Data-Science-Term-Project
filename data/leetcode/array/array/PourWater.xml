<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\array\array\PourWater.java"><package>package <name>array</name>;</package>

<comment type="block" format="javadoc">/**
 * Created by gouthamvidyapradhan on 03/02/2018. We are given an elevation map, heights[i]
 * representing the height of the terrain at that index. The width at each index is 1. After V units
 * of water fall at index K, how much water is at each index?
 *
 * &lt;p&gt;Water first drops at index K and rests on top of the highest terrain or water at that index.
 * Then, it flows according to the following rules:
 *
 * &lt;p&gt;If the droplet would eventually fall by moving left, then move left. Otherwise, if the droplet
 * would eventually fall by moving right, then move right. Otherwise, rise at it's current position.
 * Here, "eventually fall" means that the droplet will eventually be at a lower level if it moves in
 * that direction. Also, "level" means the height of the terrain plus any water in that column. We
 * can assume there's infinitely high terrain on the two sides out of bounds of the array. Also,
 * there could not be partial water being spread out evenly on more than 1 grid block - each unit of
 * water has to be in exactly one block.
 *
 * &lt;p&gt;Example 1: Input: heights = [2,1,1,2,1,2,2], V = 4, K = 3 Output: [2,2,2,3,2,2,2] Explanation:
 * # # # # ## # ### ######### 0123456 &lt;- index
 *
 * &lt;p&gt;The first drop of water lands at index K = 3:
 *
 * &lt;p&gt;# # # w # ## # ### ######### 0123456
 *
 * &lt;p&gt;When moving left or right, the water can only move to the same level or a lower level. (By
 * level, we mean the total height of the terrain plus any water in that column.) Since moving left
 * will eventually make it fall, it moves left. (A droplet "made to fall" means go to a lower height
 * than it was at previously.)
 *
 * &lt;p&gt;# # # # ## w# ### ######### 0123456
 *
 * &lt;p&gt;Since moving left will not make it fall, it stays in place. The next droplet falls:
 *
 * &lt;p&gt;# # # w # ## w# ### ######### 0123456
 *
 * &lt;p&gt;Since the new droplet moving left will eventually make it fall, it moves left. Notice that the
 * droplet still preferred to move left, even though it could move right (and moving right makes it
 * fall quicker.)
 *
 * &lt;p&gt;# # # w # ## w# ### ######### 0123456
 *
 * &lt;p&gt;# # # # ##ww# ### ######### 0123456
 *
 * &lt;p&gt;After those steps, the third droplet falls. Since moving left would not eventually make it
 * fall, it tries to move right. Since moving right would eventually make it fall, it moves right.
 *
 * &lt;p&gt;# # # w # ##ww# ### ######### 0123456
 *
 * &lt;p&gt;# # # # ##ww#w### ######### 0123456
 *
 * &lt;p&gt;Finally, the fourth droplet falls. Since moving left would not eventually make it fall, it
 * tries to move right. Since moving right would not eventually make it fall, it stays in place:
 *
 * &lt;p&gt;# # # w # ##ww#w### ######### 0123456
 *
 * &lt;p&gt;The final answer is [2,2,2,3,2,2,2]:
 *
 * &lt;p&gt;# ####### ####### 0123456 Example 2: Input: heights = [1,2,3,4], V = 2, K = 2 Output:
 * [2,3,3,4] Explanation: The last droplet settles at index 1, since moving further left would not
 * cause it to eventually fall to a lower height. Example 3: Input: heights = [3,1,3], V = 5, K = 1
 * Output: [4,4,4] Note:
 *
 * &lt;p&gt;heights will have length in [1, 100] and contain integers in [0, 99]. V will be in range [0,
 * 2000]. K will be in range [0, heights.length - 1].
 *
 * &lt;p&gt;Solution: Check first left and then right to see if there are any lower levels, if yes then
 * drop the water at this point. Else maintain the drop at the start position
 */</comment>
<class><specifier>public</specifier> class <name>PourWater</name> <block>{

  <comment type="block" format="javadoc">/**
   * Main method
   *
   * @param args
   * @throws Exception
   */</comment>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>A</name> <init>= <expr><block>{<expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name>PourWater</name><argument_list>()</argument_list></call><operator>.</operator><call><name>pourWater</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <range>: <expr><name>result</name></expr></range></decl></init>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>print</name></name><argument_list>(<argument><expr><name>i</name> <operator>+</operator> <literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name><name>int</name><index>[]</index></name></type> <name>pourWater</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>heights</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>V</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>K</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <while>while <condition>(<expr><name>V</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>heights</name><index>[<expr><name>K</name></expr>]</index></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><name>K</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>min</name> <init>= <expr><name><name>heights</name><index>[<expr><name>K</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>K</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>heights</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;</operator> <name>min</name></expr>)</condition> <block>{<block_content>
          <break>break;</break>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>heights</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>min</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>min</name> <operator>=</operator> <name><name>heights</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name>index</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
      <if_stmt><if>if <condition>(<expr><name>index</name> <operator>==</operator> <name>K</name></expr>)</condition> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>K</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>heights</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><name><name>heights</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;</operator> <name>min</name></expr>)</condition> <block>{<block_content>
            <break>break;</break>
          </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>heights</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>min</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>min</name> <operator>=</operator> <name><name>heights</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>index</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>index</name> <operator>!=</operator> <name>K</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>heights</name><index>[<expr><name>K</name></expr>]</index></name><operator>--</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>heights</name><index>[<expr><name>index</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
    <return>return <expr><name>heights</name></expr>;</return>
  </block_content>}</block></function>
}</block></class>
</unit>
