<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\array\array\MinimumTimeDifference.java"><package>package <name>array</name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>stream</name><operator>.</operator><name>Collectors</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Created by gouthamvidyapradhan on 30/07/2019 Given a list of 24-hour clock time points in
 * "Hour:Minutes" format, find the minimum minutes difference between any two time points in the
 * list. Example 1: Input: ["23:59","00:00"] Output: 1 Note: The number of time points in the given
 * list is at least 2 and won't exceed 20000. The input time is legal and ranges from 00:00 to
 * 23:59.
 *
 * &lt;p&gt;Solution: O(N log N) convert each time value of the form hh:mm to minutes and sort the array.
 * For every pair (i, j) where j = i + 1 (also for the case where i = 0 and j = N - 1) check the
 * minute difference and return the minimum time difference as the answer.
 */</comment>
<class><specifier>public</specifier> class <name>MinimumTimeDifference</name> <block>{
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>list</name> <init>= <expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><literal type="string">"23:59"</literal></expr></argument>, <argument><expr><literal type="string">"00:00"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>MinimumTimeDifference</name><argument_list>()</argument_list></call><operator>.</operator><call><name>findMinDifference</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>int</name></type> <name>findMinDifference</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>timePoints</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>timeInMinutes</name> <init>=
        <expr><call><name><name>timePoints</name>
            <operator>.</operator><name>stream</name></name><argument_list>()</argument_list></call>
            <operator>.</operator><call><name>map</name><argument_list>(
                <argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>t</name></decl></parameter></parameter_list> -&gt; <block>{<block_content>
                  <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>strings</name> <init>= <expr><call><name><name>t</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                  <return>return <expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><name><name>strings</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">60</literal> <operator>+</operator> <call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><name><name>strings</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
                </block_content>}</block></lambda></expr></argument>)</argument_list></call>
            <operator>.</operator><call><name>sorted</name><argument_list>(<argument><expr><name>Integer</name><operator>::</operator><name>compareTo</name></expr></argument>)</argument_list></call>
            <operator>.</operator><call><name>collect</name><argument_list>(<argument><expr><call><name><name>Collectors</name><operator>.</operator><name>toList</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>min</name> <init>= <expr><name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>l</name> <init>= <expr><call><name><name>timeInMinutes</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>l</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>prev</name> <init>= <expr><call><name><name>timeInMinutes</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>curr</name> <init>= <expr><call><name><name>timeInMinutes</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>min</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><name>min</name></expr></argument>, <argument><expr><name>curr</name> <operator>-</operator> <name>prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>min</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><name>min</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><literal type="number">24</literal> <operator>*</operator> <literal type="number">60</literal><operator>)</operator> <operator>-</operator> <name>curr</name><operator>)</operator> <operator>+</operator> <name>prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <decl_stmt><decl><type><name>int</name></type> <name>prev</name> <init>= <expr><call><name><name>timeInMinutes</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>curr</name> <init>= <expr><call><name><name>timeInMinutes</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>timeInMinutes</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>min</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><name>min</name></expr></argument>, <argument><expr><name>curr</name> <operator>-</operator> <name>prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>min</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><name>min</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><literal type="number">24</literal> <operator>*</operator> <literal type="number">60</literal><operator>)</operator> <operator>-</operator> <name>curr</name><operator>)</operator> <operator>+</operator> <name>prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>min</name></expr>;</return>
  </block_content>}</block></function>
}</block></class>
</unit>
