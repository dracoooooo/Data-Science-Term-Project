<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\array\array\SumofSubarrayMinimums.java"><class><specifier>public</specifier> class <name>SumofSubarrayMinimums</name> <block>{
    <function><type><specifier>public</specifier> <name>int</name></type> <name>sumSubarrayMins</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>A</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>MOD</name> <init>= <expr><literal type="number">1_000_000_007</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>N</name> <init>= <expr><name><name>A</name><operator>.</operator><name>length</name></name></expr></init></decl>;</decl_stmt>

        <comment type="line">// prev has i* - 1 in increasing order of A[i* - 1]</comment>
        <comment type="line">// where i* is the answer to query j</comment>
        <decl_stmt><decl><type><name><name>Stack</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>stack</name> <init>= <expr><operator>new</operator> <call><name>Stack</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>prev</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[<expr><name>N</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
            <while>while <condition>(<expr><operator>!</operator><call><name><name>stack</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name><name>A</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;=</operator> <name><name>A</name><index>[<expr><call><name><name>stack</name><operator>.</operator><name>peek</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>stack</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></while>
            <expr_stmt><expr><name><name>prev</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><call><name><name>stack</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><call><name><name>stack</name><operator>.</operator><name>peek</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>stack</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <comment type="line">// next has k* + 1 in increasing order of A[k* + 1]</comment>
        <comment type="line">// where k* is the answer to query j</comment>
        <expr_stmt><expr><name>stack</name> <operator>=</operator> <operator>new</operator> <call><name>Stack</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>next</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[<expr><name>N</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><name>N</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>k</name></expr></incr>)</control> <block>{<block_content>
            <while>while <condition>(<expr><operator>!</operator><call><name><name>stack</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name><name>A</name><index>[<expr><name>k</name></expr>]</index></name> <operator>&lt;</operator> <name><name>A</name><index>[<expr><call><name><name>stack</name><operator>.</operator><name>peek</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name><name>stack</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></while>
            <expr_stmt><expr><name><name>next</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><call><name><name>stack</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name>N</name></expr> </then><else>: <expr><call><name><name>stack</name><operator>.</operator><name>peek</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>stack</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <comment type="line">// Use prev/next array to count answer</comment>
        <decl_stmt><decl><type><name>long</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><name>ans</name> <operator>+=</operator> <operator>(</operator><name>i</name> <operator>-</operator> <name><name>prev</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>*</operator> <operator>(</operator><name><name>next</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name>i</name><operator>)</operator> <operator>%</operator> <name>MOD</name> <operator>*</operator> <name><name>A</name><index>[<expr><name>i</name></expr>]</index></name> <operator>%</operator> <name>MOD</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>ans</name> <operator>%=</operator> <name>MOD</name></expr>;</expr_stmt>
        </block_content>}</block></for>
        <return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <name>ans</name></expr>;</return>

    </block_content>}</block></function>
}</block></class>
</unit>
