<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\array\array\EmployeeFreeTime.java"><package>package <name>array</name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Created by gouthamvidyapradhan on 08/03/2019 We are given a list schedule of employees, which
 * represents the working time for each employee.
 *
 * &lt;p&gt;Each employee has a list of non-overlapping Intervals, and these intervals are in sorted
 * order.
 *
 * &lt;p&gt;Return the list of finite intervals representing common, positive-length free time for all
 * employees, also in sorted order.
 *
 * &lt;p&gt;Example 1: Input: schedule = [[[1,2],[5,6]],[[1,3]],[[4,10]]] Output: [[3,4]] Explanation:
 * There are a total of three employees, and all common free time intervals would be [-inf, 1], [3,
 * 4], [10, inf]. We discard any intervals that contain inf as they aren't finite. Example 2: Input:
 * schedule = [[[1,3],[6,7]],[[2,4]],[[2,5],[9,12]]] Output: [[5,6],[7,9]] (Even though we are
 * representing Intervals in the form [x, y], the objects inside are Intervals, not lists or arrays.
 * For example, schedule[0][0].start = 1, schedule[0][0].end = 2, and schedule[0][0][0] is not
 * defined.)
 *
 * &lt;p&gt;Also, we wouldn't include intervals like [5, 5] in our answer, as they have zero length.
 *
 * &lt;p&gt;Note:
 *
 * &lt;p&gt;schedule and schedule[i] are lists with lengths in range [1, 50]. 0 &lt;= schedule[i].start &lt;
 * schedule[i].end &lt;= 10^8.
 *
 * &lt;p&gt;Solution: O(L X N x N) Where L is the number of schedules, N is the length of schedules for
 * each employee. Merge all the intervals to form a single merged array, now by using this array
 * form a result array with the intervals which form the free time.
 */</comment>
<class><specifier>public</specifier> class <name>EmployeeFreeTime</name> <block>{

  <class><specifier>public</specifier> <specifier>static</specifier> class <name>Interval</name> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>start</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>end</name></decl>;</decl_stmt>

    <constructor><name>Interval</name><parameter_list>()</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name>start</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>end</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <constructor><name>Interval</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name>start</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>end</name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>
  }</block></class>

  <comment type="block" format="javadoc">/**
   * Main method
   *
   * @param args
   */</comment>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>Interval</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>schedule</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Interval</name></argument>&gt;</argument_list></name></type> <name>ints1</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>ints1</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Interval</name><argument_list>(<argument><expr><literal type="number">45</literal></expr></argument>, <argument><expr><literal type="number">56</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ints1</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Interval</name><argument_list>(<argument><expr><literal type="number">89</literal></expr></argument>, <argument><expr><literal type="number">96</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Interval</name></argument>&gt;</argument_list></name></type> <name>ints3</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>ints3</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Interval</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">21</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ints3</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Interval</name><argument_list>(<argument><expr><literal type="number">57</literal></expr></argument>, <argument><expr><literal type="number">74</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>schedule</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>ints1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>schedule</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>ints3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Interval</name></argument>&gt;</argument_list></name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name>EmployeeFreeTime</name><argument_list>()</argument_list></call><operator>.</operator><call><name>employeeFreeTime</name><argument_list>(<argument><expr><name>schedule</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>Interval</name></type> <name>i</name> <range>: <expr><name>result</name></expr></range></decl></init>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name><name>i</name><operator>.</operator><name>start</name></name> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <name><name>i</name><operator>.</operator><name>end</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Interval</name></argument>&gt;</argument_list></name></type> <name>employeeFreeTime</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>Interval</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>schedule</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name><name>schedule</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Interval</name></argument>&gt;</argument_list></name></type> <name>merged</name> <init>= <expr><call><name><name>schedule</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>l</name> <init>= <expr><call><name><name>schedule</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>l</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Interval</name></argument>&gt;</argument_list></name></type> <name>employeeInt</name> <init>= <expr><call><name><name>schedule</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>Interval</name></type> <name>in</name> <range>: <expr><name>employeeInt</name></expr></range></decl></init>)</control> <block>{<block_content>
        <expr_stmt><expr><name>merged</name> <operator>=</operator> <call><name>merge</name><argument_list>(<argument><expr><name>merged</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
    </block_content>}</block></for>
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Interval</name></argument>&gt;</argument_list></name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>l</name> <init>= <expr><call><name><name>merged</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>l</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name><name>merged</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><name>end</name> <operator>!=</operator> <call><name><name>merged</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><name>start</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Interval</name><argument_list>(<argument><expr><call><name><name>merged</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><name>end</name></expr></argument>, <argument><expr><call><name><name>merged</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><name>start</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>result</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Interval</name></argument>&gt;</argument_list></name></type> <name>merge</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Interval</name></argument>&gt;</argument_list></name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>Interval</name></type> <name>interval</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Interval</name></argument>&gt;</argument_list></name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>l</name> <init>= <expr><call><name><name>list</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>l</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>Interval</name></type> <name>curr</name> <init>= <expr><call><name><name>list</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>interval</name><operator>.</operator><name>start</name></name> <operator>&gt;=</operator> <name><name>curr</name><operator>.</operator><name>start</name></name> <operator>&amp;&amp;</operator> <name><name>interval</name><operator>.</operator><name>end</name></name> <operator>&lt;=</operator> <name><name>curr</name><operator>.</operator><name>end</name></name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>list</name></expr>;</return>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>interval</name><operator>.</operator><name>start</name></name> <operator>&gt;=</operator> <name><name>curr</name><operator>.</operator><name>start</name></name> <operator>&amp;&amp;</operator> <name><name>interval</name><operator>.</operator><name>start</name></name> <operator>&lt;=</operator> <name><name>curr</name><operator>.</operator><name>end</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>interval</name> <operator>=</operator> <operator>new</operator> <call><name>Interval</name><argument_list>(<argument><expr><name><name>curr</name><operator>.</operator><name>start</name></name></expr></argument>, <argument><expr><name><name>interval</name><operator>.</operator><name>end</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>interval</name><operator>.</operator><name>end</name></name> <operator>&gt;=</operator> <name><name>curr</name><operator>.</operator><name>start</name></name> <operator>&amp;&amp;</operator> <name><name>interval</name><operator>.</operator><name>end</name></name> <operator>&lt;=</operator> <name><name>curr</name><operator>.</operator><name>end</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>interval</name> <operator>=</operator> <operator>new</operator> <call><name>Interval</name><argument_list>(<argument><expr><name><name>interval</name><operator>.</operator><name>start</name></name></expr></argument>, <argument><expr><name><name>curr</name><operator>.</operator><name>end</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>interval</name><operator>.</operator><name>end</name></name> <operator>&lt;</operator> <name><name>curr</name><operator>.</operator><name>start</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>interval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>i</name></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>l</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
          <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>list</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>result</name></expr>;</return>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>interval</name><operator>.</operator><name>start</name></name> <operator>&gt;</operator> <name><name>curr</name><operator>.</operator><name>end</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>curr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>interval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>result</name></expr>;</return>
  </block_content>}</block></function>
}</block></class>
</unit>
