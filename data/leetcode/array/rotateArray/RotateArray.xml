<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\array\rotateArray\RotateArray.java"><comment type="line">// Source : https://leetcode.com/problems/rotate-array/description/</comment>
<comment type="line">// Author : Tianming Cao</comment>
<comment type="line">// Date   : 2018-02-02</comment>

<comment type="block" format="javadoc">/**********************************************************************************
 * Rotate an array of n elements to the right by k steps.
 * 
 * For example, with n = 7 and k = 3, the array [1,2,3,4,5,6,7] is rotated to [5,6,7,1,2,3,4].
 * 
 * Note:
 * Try to come up as many solutions as you can, there are at least 3 different ways to solve this problem.
 * 
 * Hint:
 * Could you do it in-place with O(1) extra space?
 * Related problem: Reverse Words in a String II
 * 
 **********************************************************************************/</comment>
<package>package <name>rotateArray</name>;</package>
<comment type="block" format="javadoc">/**********************************************************************************
 *
 * For example, with n = 9 and k = 4, the array is [1,2,3,4,5,6,7,8,9]
 * The train of thought is:
 *  1. Reverse 1-5 to [5,4,3,2,1]
 *  2. Reverse 6-9 to [9,8,7,6]
 *  3. Reverse the entire array [5,4,3,2,1,9,8,7,6] to [6,7,8,9,1,2,3,4,5]
 * It's a liner time and in-place algorithm
 * 
 **********************************************************************************/</comment>
<class><specifier>public</specifier> class <name>RotateArray</name> <block>{

	<function><type><specifier>public</specifier> <name>void</name></type> <name>rotate</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>nums</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<comment type="line">//bounds check</comment>
		<if_stmt><if>if <condition>(<expr><name>nums</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name><name>nums</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>k</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><name><name>nums</name><operator>.</operator><name>length</name></name></expr></init></decl>;</decl_stmt>
		<comment type="line">//k may be larger than n</comment>
		<expr_stmt><expr><name>k</name> <operator>=</operator> <name>k</name> <operator>%</operator> <name>n</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>rotateRange</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>n</name> <operator>-</operator> <name>k</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>nums</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>rotateRange</name><argument_list>(<argument><expr><name>n</name> <operator>-</operator> <name>k</name></expr></argument>, <argument><expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>nums</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>rotateRange</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>nums</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></function>
	
	<function><type><specifier>private</specifier> <name>void</name></type> <name>rotateRange</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>end</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>array</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>start</name></expr></init></decl>, <decl><type ref="prev"/><name>j</name> <init>= <expr><name>end</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>j</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>j</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
			<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></function>
	<function><type><specifier>private</specifier> <name>void</name></type> <name>swap</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>array</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list> <block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>t</name> <init>= <expr><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>array</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>array</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
	</block_content>}</block></function>
	
}</block></class>
</unit>
