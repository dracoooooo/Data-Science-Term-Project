<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\tree\WordLadderII.java"><package>package <name>breadth_first_search</name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Created by gouthamvidyapradhan on 24/03/2017. Given two words (beginWord and endWord), and a
 * dictionary's word list, find all shortest transformation sequence(s) from beginWord to endWord,
 * such that:
 *
 * &lt;p&gt;Only one letter can be changed at a time Each transformed word must exist in the word list.
 * Note that beginWord is not a transformed word. For example,
 *
 * &lt;p&gt;Given: beginWord = "hit" endWord = "cog" wordList = ["hot","dot","dog","lot","log","cog"]
 * Return [ ["hit","hot","dot","dog","cog"], ["hit","hot","lot","log","cog"] ] Note: Return an empty
 * list if there is no such transformation sequence. All words have the same length. All words
 * contain only lowercase alphabetic characters. You may assume no duplicates in the word list. You
 * may assume beginWord and endWord are non-empty and are not the same.
 */</comment>
<class><specifier>public</specifier> class <name>WordLadderII</name> <block>{

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name><name>Queue</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>queue</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayDeque</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>dictionary</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>CONST</name> <init>= <expr><literal type="string">"abcdefghijklmnopqrstuvwxyz"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>graph</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>minDistance</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="block" format="javadoc">/**
   * Main method
   *
   * @param args
   * @throws Exception
   */</comment>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>dic</name> <init>=
        <expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(
            <argument><expr><literal type="string">"kid"</literal></expr></argument>, <argument><expr><literal type="string">"tag"</literal></expr></argument>, <argument><expr><literal type="string">"pup"</literal></expr></argument>, <argument><expr><literal type="string">"ail"</literal></expr></argument>, <argument><expr><literal type="string">"tun"</literal></expr></argument>, <argument><expr><literal type="string">"woo"</literal></expr></argument>, <argument><expr><literal type="string">"erg"</literal></expr></argument>, <argument><expr><literal type="string">"luz"</literal></expr></argument>, <argument><expr><literal type="string">"brr"</literal></expr></argument>, <argument><expr><literal type="string">"gay"</literal></expr></argument>, <argument><expr><literal type="string">"sip"</literal></expr></argument>, <argument><expr><literal type="string">"kay"</literal></expr></argument>,
            <argument><expr><literal type="string">"per"</literal></expr></argument>, <argument><expr><literal type="string">"val"</literal></expr></argument>, <argument><expr><literal type="string">"mes"</literal></expr></argument>, <argument><expr><literal type="string">"ohs"</literal></expr></argument>, <argument><expr><literal type="string">"now"</literal></expr></argument>, <argument><expr><literal type="string">"boa"</literal></expr></argument>, <argument><expr><literal type="string">"cet"</literal></expr></argument>, <argument><expr><literal type="string">"pal"</literal></expr></argument>, <argument><expr><literal type="string">"bar"</literal></expr></argument>, <argument><expr><literal type="string">"die"</literal></expr></argument>, <argument><expr><literal type="string">"war"</literal></expr></argument>, <argument><expr><literal type="string">"hay"</literal></expr></argument>,
            <argument><expr><literal type="string">"eco"</literal></expr></argument>, <argument><expr><literal type="string">"pub"</literal></expr></argument>, <argument><expr><literal type="string">"lob"</literal></expr></argument>, <argument><expr><literal type="string">"rue"</literal></expr></argument>, <argument><expr><literal type="string">"fry"</literal></expr></argument>, <argument><expr><literal type="string">"lit"</literal></expr></argument>, <argument><expr><literal type="string">"rex"</literal></expr></argument>, <argument><expr><literal type="string">"jan"</literal></expr></argument>, <argument><expr><literal type="string">"cot"</literal></expr></argument>, <argument><expr><literal type="string">"bid"</literal></expr></argument>, <argument><expr><literal type="string">"ali"</literal></expr></argument>, <argument><expr><literal type="string">"pay"</literal></expr></argument>,
            <argument><expr><literal type="string">"col"</literal></expr></argument>, <argument><expr><literal type="string">"gum"</literal></expr></argument>, <argument><expr><literal type="string">"ger"</literal></expr></argument>, <argument><expr><literal type="string">"row"</literal></expr></argument>, <argument><expr><literal type="string">"won"</literal></expr></argument>, <argument><expr><literal type="string">"dan"</literal></expr></argument>, <argument><expr><literal type="string">"rum"</literal></expr></argument>, <argument><expr><literal type="string">"fad"</literal></expr></argument>, <argument><expr><literal type="string">"tut"</literal></expr></argument>, <argument><expr><literal type="string">"sag"</literal></expr></argument>, <argument><expr><literal type="string">"yip"</literal></expr></argument>, <argument><expr><literal type="string">"sui"</literal></expr></argument>,
            <argument><expr><literal type="string">"ark"</literal></expr></argument>, <argument><expr><literal type="string">"has"</literal></expr></argument>, <argument><expr><literal type="string">"zip"</literal></expr></argument>, <argument><expr><literal type="string">"fez"</literal></expr></argument>, <argument><expr><literal type="string">"own"</literal></expr></argument>, <argument><expr><literal type="string">"ump"</literal></expr></argument>, <argument><expr><literal type="string">"dis"</literal></expr></argument>, <argument><expr><literal type="string">"ads"</literal></expr></argument>, <argument><expr><literal type="string">"max"</literal></expr></argument>, <argument><expr><literal type="string">"jaw"</literal></expr></argument>, <argument><expr><literal type="string">"out"</literal></expr></argument>, <argument><expr><literal type="string">"btu"</literal></expr></argument>,
            <argument><expr><literal type="string">"ana"</literal></expr></argument>, <argument><expr><literal type="string">"gap"</literal></expr></argument>, <argument><expr><literal type="string">"cry"</literal></expr></argument>, <argument><expr><literal type="string">"led"</literal></expr></argument>, <argument><expr><literal type="string">"abe"</literal></expr></argument>, <argument><expr><literal type="string">"box"</literal></expr></argument>, <argument><expr><literal type="string">"ore"</literal></expr></argument>, <argument><expr><literal type="string">"pig"</literal></expr></argument>, <argument><expr><literal type="string">"fie"</literal></expr></argument>, <argument><expr><literal type="string">"toy"</literal></expr></argument>, <argument><expr><literal type="string">"fat"</literal></expr></argument>, <argument><expr><literal type="string">"cal"</literal></expr></argument>,
            <argument><expr><literal type="string">"lie"</literal></expr></argument>, <argument><expr><literal type="string">"noh"</literal></expr></argument>, <argument><expr><literal type="string">"sew"</literal></expr></argument>, <argument><expr><literal type="string">"ono"</literal></expr></argument>, <argument><expr><literal type="string">"tam"</literal></expr></argument>, <argument><expr><literal type="string">"flu"</literal></expr></argument>, <argument><expr><literal type="string">"mgm"</literal></expr></argument>, <argument><expr><literal type="string">"ply"</literal></expr></argument>, <argument><expr><literal type="string">"awe"</literal></expr></argument>, <argument><expr><literal type="string">"pry"</literal></expr></argument>, <argument><expr><literal type="string">"tit"</literal></expr></argument>, <argument><expr><literal type="string">"tie"</literal></expr></argument>,
            <argument><expr><literal type="string">"yet"</literal></expr></argument>, <argument><expr><literal type="string">"too"</literal></expr></argument>, <argument><expr><literal type="string">"tax"</literal></expr></argument>, <argument><expr><literal type="string">"jim"</literal></expr></argument>, <argument><expr><literal type="string">"san"</literal></expr></argument>, <argument><expr><literal type="string">"pan"</literal></expr></argument>, <argument><expr><literal type="string">"map"</literal></expr></argument>, <argument><expr><literal type="string">"ski"</literal></expr></argument>, <argument><expr><literal type="string">"ova"</literal></expr></argument>, <argument><expr><literal type="string">"wed"</literal></expr></argument>, <argument><expr><literal type="string">"non"</literal></expr></argument>, <argument><expr><literal type="string">"wac"</literal></expr></argument>,
            <argument><expr><literal type="string">"nut"</literal></expr></argument>, <argument><expr><literal type="string">"why"</literal></expr></argument>, <argument><expr><literal type="string">"bye"</literal></expr></argument>, <argument><expr><literal type="string">"lye"</literal></expr></argument>, <argument><expr><literal type="string">"oct"</literal></expr></argument>, <argument><expr><literal type="string">"old"</literal></expr></argument>, <argument><expr><literal type="string">"fin"</literal></expr></argument>, <argument><expr><literal type="string">"feb"</literal></expr></argument>, <argument><expr><literal type="string">"chi"</literal></expr></argument>, <argument><expr><literal type="string">"sap"</literal></expr></argument>, <argument><expr><literal type="string">"owl"</literal></expr></argument>, <argument><expr><literal type="string">"log"</literal></expr></argument>,
            <argument><expr><literal type="string">"tod"</literal></expr></argument>, <argument><expr><literal type="string">"dot"</literal></expr></argument>, <argument><expr><literal type="string">"bow"</literal></expr></argument>, <argument><expr><literal type="string">"fob"</literal></expr></argument>, <argument><expr><literal type="string">"for"</literal></expr></argument>, <argument><expr><literal type="string">"joe"</literal></expr></argument>, <argument><expr><literal type="string">"ivy"</literal></expr></argument>, <argument><expr><literal type="string">"fan"</literal></expr></argument>, <argument><expr><literal type="string">"age"</literal></expr></argument>, <argument><expr><literal type="string">"fax"</literal></expr></argument>, <argument><expr><literal type="string">"hip"</literal></expr></argument>, <argument><expr><literal type="string">"jib"</literal></expr></argument>,
            <argument><expr><literal type="string">"mel"</literal></expr></argument>, <argument><expr><literal type="string">"hus"</literal></expr></argument>, <argument><expr><literal type="string">"sob"</literal></expr></argument>, <argument><expr><literal type="string">"ifs"</literal></expr></argument>, <argument><expr><literal type="string">"tab"</literal></expr></argument>, <argument><expr><literal type="string">"ara"</literal></expr></argument>, <argument><expr><literal type="string">"dab"</literal></expr></argument>, <argument><expr><literal type="string">"jag"</literal></expr></argument>, <argument><expr><literal type="string">"jar"</literal></expr></argument>, <argument><expr><literal type="string">"arm"</literal></expr></argument>, <argument><expr><literal type="string">"lot"</literal></expr></argument>, <argument><expr><literal type="string">"tom"</literal></expr></argument>,
            <argument><expr><literal type="string">"sax"</literal></expr></argument>, <argument><expr><literal type="string">"tex"</literal></expr></argument>, <argument><expr><literal type="string">"yum"</literal></expr></argument>, <argument><expr><literal type="string">"pei"</literal></expr></argument>, <argument><expr><literal type="string">"wen"</literal></expr></argument>, <argument><expr><literal type="string">"wry"</literal></expr></argument>, <argument><expr><literal type="string">"ire"</literal></expr></argument>, <argument><expr><literal type="string">"irk"</literal></expr></argument>, <argument><expr><literal type="string">"far"</literal></expr></argument>, <argument><expr><literal type="string">"mew"</literal></expr></argument>, <argument><expr><literal type="string">"wit"</literal></expr></argument>, <argument><expr><literal type="string">"doe"</literal></expr></argument>,
            <argument><expr><literal type="string">"gas"</literal></expr></argument>, <argument><expr><literal type="string">"rte"</literal></expr></argument>, <argument><expr><literal type="string">"ian"</literal></expr></argument>, <argument><expr><literal type="string">"pot"</literal></expr></argument>, <argument><expr><literal type="string">"ask"</literal></expr></argument>, <argument><expr><literal type="string">"wag"</literal></expr></argument>, <argument><expr><literal type="string">"hag"</literal></expr></argument>, <argument><expr><literal type="string">"amy"</literal></expr></argument>, <argument><expr><literal type="string">"nag"</literal></expr></argument>, <argument><expr><literal type="string">"ron"</literal></expr></argument>, <argument><expr><literal type="string">"soy"</literal></expr></argument>, <argument><expr><literal type="string">"gin"</literal></expr></argument>,
            <argument><expr><literal type="string">"don"</literal></expr></argument>, <argument><expr><literal type="string">"tug"</literal></expr></argument>, <argument><expr><literal type="string">"fay"</literal></expr></argument>, <argument><expr><literal type="string">"vic"</literal></expr></argument>, <argument><expr><literal type="string">"boo"</literal></expr></argument>, <argument><expr><literal type="string">"nam"</literal></expr></argument>, <argument><expr><literal type="string">"ave"</literal></expr></argument>, <argument><expr><literal type="string">"buy"</literal></expr></argument>, <argument><expr><literal type="string">"sop"</literal></expr></argument>, <argument><expr><literal type="string">"but"</literal></expr></argument>, <argument><expr><literal type="string">"orb"</literal></expr></argument>, <argument><expr><literal type="string">"fen"</literal></expr></argument>,
            <argument><expr><literal type="string">"paw"</literal></expr></argument>, <argument><expr><literal type="string">"his"</literal></expr></argument>, <argument><expr><literal type="string">"sub"</literal></expr></argument>, <argument><expr><literal type="string">"bob"</literal></expr></argument>, <argument><expr><literal type="string">"yea"</literal></expr></argument>, <argument><expr><literal type="string">"oft"</literal></expr></argument>, <argument><expr><literal type="string">"inn"</literal></expr></argument>, <argument><expr><literal type="string">"rod"</literal></expr></argument>, <argument><expr><literal type="string">"yam"</literal></expr></argument>, <argument><expr><literal type="string">"pew"</literal></expr></argument>, <argument><expr><literal type="string">"web"</literal></expr></argument>, <argument><expr><literal type="string">"hod"</literal></expr></argument>,
            <argument><expr><literal type="string">"hun"</literal></expr></argument>, <argument><expr><literal type="string">"gyp"</literal></expr></argument>, <argument><expr><literal type="string">"wei"</literal></expr></argument>, <argument><expr><literal type="string">"wis"</literal></expr></argument>, <argument><expr><literal type="string">"rob"</literal></expr></argument>, <argument><expr><literal type="string">"gad"</literal></expr></argument>, <argument><expr><literal type="string">"pie"</literal></expr></argument>, <argument><expr><literal type="string">"mon"</literal></expr></argument>, <argument><expr><literal type="string">"dog"</literal></expr></argument>, <argument><expr><literal type="string">"bib"</literal></expr></argument>, <argument><expr><literal type="string">"rub"</literal></expr></argument>, <argument><expr><literal type="string">"ere"</literal></expr></argument>,
            <argument><expr><literal type="string">"dig"</literal></expr></argument>, <argument><expr><literal type="string">"era"</literal></expr></argument>, <argument><expr><literal type="string">"cat"</literal></expr></argument>, <argument><expr><literal type="string">"fox"</literal></expr></argument>, <argument><expr><literal type="string">"bee"</literal></expr></argument>, <argument><expr><literal type="string">"mod"</literal></expr></argument>, <argument><expr><literal type="string">"day"</literal></expr></argument>, <argument><expr><literal type="string">"apr"</literal></expr></argument>, <argument><expr><literal type="string">"vie"</literal></expr></argument>, <argument><expr><literal type="string">"nev"</literal></expr></argument>, <argument><expr><literal type="string">"jam"</literal></expr></argument>, <argument><expr><literal type="string">"pam"</literal></expr></argument>,
            <argument><expr><literal type="string">"new"</literal></expr></argument>, <argument><expr><literal type="string">"aye"</literal></expr></argument>, <argument><expr><literal type="string">"ani"</literal></expr></argument>, <argument><expr><literal type="string">"and"</literal></expr></argument>, <argument><expr><literal type="string">"ibm"</literal></expr></argument>, <argument><expr><literal type="string">"yap"</literal></expr></argument>, <argument><expr><literal type="string">"can"</literal></expr></argument>, <argument><expr><literal type="string">"pyx"</literal></expr></argument>, <argument><expr><literal type="string">"tar"</literal></expr></argument>, <argument><expr><literal type="string">"kin"</literal></expr></argument>, <argument><expr><literal type="string">"fog"</literal></expr></argument>, <argument><expr><literal type="string">"hum"</literal></expr></argument>,
            <argument><expr><literal type="string">"pip"</literal></expr></argument>, <argument><expr><literal type="string">"cup"</literal></expr></argument>, <argument><expr><literal type="string">"dye"</literal></expr></argument>, <argument><expr><literal type="string">"lyx"</literal></expr></argument>, <argument><expr><literal type="string">"jog"</literal></expr></argument>, <argument><expr><literal type="string">"nun"</literal></expr></argument>, <argument><expr><literal type="string">"par"</literal></expr></argument>, <argument><expr><literal type="string">"wan"</literal></expr></argument>, <argument><expr><literal type="string">"fey"</literal></expr></argument>, <argument><expr><literal type="string">"bus"</literal></expr></argument>, <argument><expr><literal type="string">"oak"</literal></expr></argument>, <argument><expr><literal type="string">"bad"</literal></expr></argument>,
            <argument><expr><literal type="string">"ats"</literal></expr></argument>, <argument><expr><literal type="string">"set"</literal></expr></argument>, <argument><expr><literal type="string">"qom"</literal></expr></argument>, <argument><expr><literal type="string">"vat"</literal></expr></argument>, <argument><expr><literal type="string">"eat"</literal></expr></argument>, <argument><expr><literal type="string">"pus"</literal></expr></argument>, <argument><expr><literal type="string">"rev"</literal></expr></argument>, <argument><expr><literal type="string">"axe"</literal></expr></argument>, <argument><expr><literal type="string">"ion"</literal></expr></argument>, <argument><expr><literal type="string">"six"</literal></expr></argument>, <argument><expr><literal type="string">"ila"</literal></expr></argument>, <argument><expr><literal type="string">"lao"</literal></expr></argument>,
            <argument><expr><literal type="string">"mom"</literal></expr></argument>, <argument><expr><literal type="string">"mas"</literal></expr></argument>, <argument><expr><literal type="string">"pro"</literal></expr></argument>, <argument><expr><literal type="string">"few"</literal></expr></argument>, <argument><expr><literal type="string">"opt"</literal></expr></argument>, <argument><expr><literal type="string">"poe"</literal></expr></argument>, <argument><expr><literal type="string">"art"</literal></expr></argument>, <argument><expr><literal type="string">"ash"</literal></expr></argument>, <argument><expr><literal type="string">"oar"</literal></expr></argument>, <argument><expr><literal type="string">"cap"</literal></expr></argument>, <argument><expr><literal type="string">"lop"</literal></expr></argument>, <argument><expr><literal type="string">"may"</literal></expr></argument>,
            <argument><expr><literal type="string">"shy"</literal></expr></argument>, <argument><expr><literal type="string">"rid"</literal></expr></argument>, <argument><expr><literal type="string">"bat"</literal></expr></argument>, <argument><expr><literal type="string">"sum"</literal></expr></argument>, <argument><expr><literal type="string">"rim"</literal></expr></argument>, <argument><expr><literal type="string">"fee"</literal></expr></argument>, <argument><expr><literal type="string">"bmw"</literal></expr></argument>, <argument><expr><literal type="string">"sky"</literal></expr></argument>, <argument><expr><literal type="string">"maj"</literal></expr></argument>, <argument><expr><literal type="string">"hue"</literal></expr></argument>, <argument><expr><literal type="string">"thy"</literal></expr></argument>, <argument><expr><literal type="string">"ava"</literal></expr></argument>,
            <argument><expr><literal type="string">"rap"</literal></expr></argument>, <argument><expr><literal type="string">"den"</literal></expr></argument>, <argument><expr><literal type="string">"fla"</literal></expr></argument>, <argument><expr><literal type="string">"auk"</literal></expr></argument>, <argument><expr><literal type="string">"cox"</literal></expr></argument>, <argument><expr><literal type="string">"ibo"</literal></expr></argument>, <argument><expr><literal type="string">"hey"</literal></expr></argument>, <argument><expr><literal type="string">"saw"</literal></expr></argument>, <argument><expr><literal type="string">"vim"</literal></expr></argument>, <argument><expr><literal type="string">"sec"</literal></expr></argument>, <argument><expr><literal type="string">"ltd"</literal></expr></argument>, <argument><expr><literal type="string">"you"</literal></expr></argument>,
            <argument><expr><literal type="string">"its"</literal></expr></argument>, <argument><expr><literal type="string">"tat"</literal></expr></argument>, <argument><expr><literal type="string">"dew"</literal></expr></argument>, <argument><expr><literal type="string">"eva"</literal></expr></argument>, <argument><expr><literal type="string">"tog"</literal></expr></argument>, <argument><expr><literal type="string">"ram"</literal></expr></argument>, <argument><expr><literal type="string">"let"</literal></expr></argument>, <argument><expr><literal type="string">"see"</literal></expr></argument>, <argument><expr><literal type="string">"zit"</literal></expr></argument>, <argument><expr><literal type="string">"maw"</literal></expr></argument>, <argument><expr><literal type="string">"nix"</literal></expr></argument>, <argument><expr><literal type="string">"ate"</literal></expr></argument>,
            <argument><expr><literal type="string">"gig"</literal></expr></argument>, <argument><expr><literal type="string">"rep"</literal></expr></argument>, <argument><expr><literal type="string">"owe"</literal></expr></argument>, <argument><expr><literal type="string">"ind"</literal></expr></argument>, <argument><expr><literal type="string">"hog"</literal></expr></argument>, <argument><expr><literal type="string">"eve"</literal></expr></argument>, <argument><expr><literal type="string">"sam"</literal></expr></argument>, <argument><expr><literal type="string">"zoo"</literal></expr></argument>, <argument><expr><literal type="string">"any"</literal></expr></argument>, <argument><expr><literal type="string">"dow"</literal></expr></argument>, <argument><expr><literal type="string">"cod"</literal></expr></argument>, <argument><expr><literal type="string">"bed"</literal></expr></argument>,
            <argument><expr><literal type="string">"vet"</literal></expr></argument>, <argument><expr><literal type="string">"ham"</literal></expr></argument>, <argument><expr><literal type="string">"sis"</literal></expr></argument>, <argument><expr><literal type="string">"hex"</literal></expr></argument>, <argument><expr><literal type="string">"via"</literal></expr></argument>, <argument><expr><literal type="string">"fir"</literal></expr></argument>, <argument><expr><literal type="string">"nod"</literal></expr></argument>, <argument><expr><literal type="string">"mao"</literal></expr></argument>, <argument><expr><literal type="string">"aug"</literal></expr></argument>, <argument><expr><literal type="string">"mum"</literal></expr></argument>, <argument><expr><literal type="string">"hoe"</literal></expr></argument>, <argument><expr><literal type="string">"bah"</literal></expr></argument>,
            <argument><expr><literal type="string">"hal"</literal></expr></argument>, <argument><expr><literal type="string">"keg"</literal></expr></argument>, <argument><expr><literal type="string">"hew"</literal></expr></argument>, <argument><expr><literal type="string">"zed"</literal></expr></argument>, <argument><expr><literal type="string">"tow"</literal></expr></argument>, <argument><expr><literal type="string">"gog"</literal></expr></argument>, <argument><expr><literal type="string">"ass"</literal></expr></argument>, <argument><expr><literal type="string">"dem"</literal></expr></argument>, <argument><expr><literal type="string">"who"</literal></expr></argument>, <argument><expr><literal type="string">"bet"</literal></expr></argument>, <argument><expr><literal type="string">"gos"</literal></expr></argument>, <argument><expr><literal type="string">"son"</literal></expr></argument>,
            <argument><expr><literal type="string">"ear"</literal></expr></argument>, <argument><expr><literal type="string">"spy"</literal></expr></argument>, <argument><expr><literal type="string">"kit"</literal></expr></argument>, <argument><expr><literal type="string">"boy"</literal></expr></argument>, <argument><expr><literal type="string">"due"</literal></expr></argument>, <argument><expr><literal type="string">"sen"</literal></expr></argument>, <argument><expr><literal type="string">"oaf"</literal></expr></argument>, <argument><expr><literal type="string">"mix"</literal></expr></argument>, <argument><expr><literal type="string">"hep"</literal></expr></argument>, <argument><expr><literal type="string">"fur"</literal></expr></argument>, <argument><expr><literal type="string">"ada"</literal></expr></argument>, <argument><expr><literal type="string">"bin"</literal></expr></argument>,
            <argument><expr><literal type="string">"nil"</literal></expr></argument>, <argument><expr><literal type="string">"mia"</literal></expr></argument>, <argument><expr><literal type="string">"ewe"</literal></expr></argument>, <argument><expr><literal type="string">"hit"</literal></expr></argument>, <argument><expr><literal type="string">"fix"</literal></expr></argument>, <argument><expr><literal type="string">"sad"</literal></expr></argument>, <argument><expr><literal type="string">"rib"</literal></expr></argument>, <argument><expr><literal type="string">"eye"</literal></expr></argument>, <argument><expr><literal type="string">"hop"</literal></expr></argument>, <argument><expr><literal type="string">"haw"</literal></expr></argument>, <argument><expr><literal type="string">"wax"</literal></expr></argument>, <argument><expr><literal type="string">"mid"</literal></expr></argument>,
            <argument><expr><literal type="string">"tad"</literal></expr></argument>, <argument><expr><literal type="string">"ken"</literal></expr></argument>, <argument><expr><literal type="string">"wad"</literal></expr></argument>, <argument><expr><literal type="string">"rye"</literal></expr></argument>, <argument><expr><literal type="string">"pap"</literal></expr></argument>, <argument><expr><literal type="string">"bog"</literal></expr></argument>, <argument><expr><literal type="string">"gut"</literal></expr></argument>, <argument><expr><literal type="string">"ito"</literal></expr></argument>, <argument><expr><literal type="string">"woe"</literal></expr></argument>, <argument><expr><literal type="string">"our"</literal></expr></argument>, <argument><expr><literal type="string">"ado"</literal></expr></argument>, <argument><expr><literal type="string">"sin"</literal></expr></argument>,
            <argument><expr><literal type="string">"mad"</literal></expr></argument>, <argument><expr><literal type="string">"ray"</literal></expr></argument>, <argument><expr><literal type="string">"hon"</literal></expr></argument>, <argument><expr><literal type="string">"roy"</literal></expr></argument>, <argument><expr><literal type="string">"dip"</literal></expr></argument>, <argument><expr><literal type="string">"hen"</literal></expr></argument>, <argument><expr><literal type="string">"iva"</literal></expr></argument>, <argument><expr><literal type="string">"lug"</literal></expr></argument>, <argument><expr><literal type="string">"asp"</literal></expr></argument>, <argument><expr><literal type="string">"hui"</literal></expr></argument>, <argument><expr><literal type="string">"yak"</literal></expr></argument>, <argument><expr><literal type="string">"bay"</literal></expr></argument>,
            <argument><expr><literal type="string">"poi"</literal></expr></argument>, <argument><expr><literal type="string">"yep"</literal></expr></argument>, <argument><expr><literal type="string">"bun"</literal></expr></argument>, <argument><expr><literal type="string">"try"</literal></expr></argument>, <argument><expr><literal type="string">"lad"</literal></expr></argument>, <argument><expr><literal type="string">"elm"</literal></expr></argument>, <argument><expr><literal type="string">"nat"</literal></expr></argument>, <argument><expr><literal type="string">"wyo"</literal></expr></argument>, <argument><expr><literal type="string">"gym"</literal></expr></argument>, <argument><expr><literal type="string">"dug"</literal></expr></argument>, <argument><expr><literal type="string">"toe"</literal></expr></argument>, <argument><expr><literal type="string">"dee"</literal></expr></argument>,
            <argument><expr><literal type="string">"wig"</literal></expr></argument>, <argument><expr><literal type="string">"sly"</literal></expr></argument>, <argument><expr><literal type="string">"rip"</literal></expr></argument>, <argument><expr><literal type="string">"geo"</literal></expr></argument>, <argument><expr><literal type="string">"cog"</literal></expr></argument>, <argument><expr><literal type="string">"pas"</literal></expr></argument>, <argument><expr><literal type="string">"zen"</literal></expr></argument>, <argument><expr><literal type="string">"odd"</literal></expr></argument>, <argument><expr><literal type="string">"nan"</literal></expr></argument>, <argument><expr><literal type="string">"lay"</literal></expr></argument>, <argument><expr><literal type="string">"pod"</literal></expr></argument>, <argument><expr><literal type="string">"fit"</literal></expr></argument>,
            <argument><expr><literal type="string">"hem"</literal></expr></argument>, <argument><expr><literal type="string">"joy"</literal></expr></argument>, <argument><expr><literal type="string">"bum"</literal></expr></argument>, <argument><expr><literal type="string">"rio"</literal></expr></argument>, <argument><expr><literal type="string">"yon"</literal></expr></argument>, <argument><expr><literal type="string">"dec"</literal></expr></argument>, <argument><expr><literal type="string">"leg"</literal></expr></argument>, <argument><expr><literal type="string">"put"</literal></expr></argument>, <argument><expr><literal type="string">"sue"</literal></expr></argument>, <argument><expr><literal type="string">"dim"</literal></expr></argument>, <argument><expr><literal type="string">"pet"</literal></expr></argument>, <argument><expr><literal type="string">"yaw"</literal></expr></argument>,
            <argument><expr><literal type="string">"nub"</literal></expr></argument>, <argument><expr><literal type="string">"bit"</literal></expr></argument>, <argument><expr><literal type="string">"bur"</literal></expr></argument>, <argument><expr><literal type="string">"sid"</literal></expr></argument>, <argument><expr><literal type="string">"sun"</literal></expr></argument>, <argument><expr><literal type="string">"oil"</literal></expr></argument>, <argument><expr><literal type="string">"red"</literal></expr></argument>, <argument><expr><literal type="string">"doc"</literal></expr></argument>, <argument><expr><literal type="string">"moe"</literal></expr></argument>, <argument><expr><literal type="string">"caw"</literal></expr></argument>, <argument><expr><literal type="string">"eel"</literal></expr></argument>, <argument><expr><literal type="string">"dix"</literal></expr></argument>,
            <argument><expr><literal type="string">"cub"</literal></expr></argument>, <argument><expr><literal type="string">"end"</literal></expr></argument>, <argument><expr><literal type="string">"gem"</literal></expr></argument>, <argument><expr><literal type="string">"off"</literal></expr></argument>, <argument><expr><literal type="string">"yew"</literal></expr></argument>, <argument><expr><literal type="string">"hug"</literal></expr></argument>, <argument><expr><literal type="string">"pop"</literal></expr></argument>, <argument><expr><literal type="string">"tub"</literal></expr></argument>, <argument><expr><literal type="string">"sgt"</literal></expr></argument>, <argument><expr><literal type="string">"lid"</literal></expr></argument>, <argument><expr><literal type="string">"pun"</literal></expr></argument>, <argument><expr><literal type="string">"ton"</literal></expr></argument>,
            <argument><expr><literal type="string">"sol"</literal></expr></argument>, <argument><expr><literal type="string">"din"</literal></expr></argument>, <argument><expr><literal type="string">"yup"</literal></expr></argument>, <argument><expr><literal type="string">"jab"</literal></expr></argument>, <argument><expr><literal type="string">"pea"</literal></expr></argument>, <argument><expr><literal type="string">"bug"</literal></expr></argument>, <argument><expr><literal type="string">"gag"</literal></expr></argument>, <argument><expr><literal type="string">"mil"</literal></expr></argument>, <argument><expr><literal type="string">"jig"</literal></expr></argument>, <argument><expr><literal type="string">"hub"</literal></expr></argument>, <argument><expr><literal type="string">"low"</literal></expr></argument>, <argument><expr><literal type="string">"did"</literal></expr></argument>,
            <argument><expr><literal type="string">"tin"</literal></expr></argument>, <argument><expr><literal type="string">"get"</literal></expr></argument>, <argument><expr><literal type="string">"gte"</literal></expr></argument>, <argument><expr><literal type="string">"sox"</literal></expr></argument>, <argument><expr><literal type="string">"lei"</literal></expr></argument>, <argument><expr><literal type="string">"mig"</literal></expr></argument>, <argument><expr><literal type="string">"fig"</literal></expr></argument>, <argument><expr><literal type="string">"lon"</literal></expr></argument>, <argument><expr><literal type="string">"use"</literal></expr></argument>, <argument><expr><literal type="string">"ban"</literal></expr></argument>, <argument><expr><literal type="string">"flo"</literal></expr></argument>, <argument><expr><literal type="string">"nov"</literal></expr></argument>,
            <argument><expr><literal type="string">"jut"</literal></expr></argument>, <argument><expr><literal type="string">"bag"</literal></expr></argument>, <argument><expr><literal type="string">"mir"</literal></expr></argument>, <argument><expr><literal type="string">"sty"</literal></expr></argument>, <argument><expr><literal type="string">"lap"</literal></expr></argument>, <argument><expr><literal type="string">"two"</literal></expr></argument>, <argument><expr><literal type="string">"ins"</literal></expr></argument>, <argument><expr><literal type="string">"con"</literal></expr></argument>, <argument><expr><literal type="string">"ant"</literal></expr></argument>, <argument><expr><literal type="string">"net"</literal></expr></argument>, <argument><expr><literal type="string">"tux"</literal></expr></argument>, <argument><expr><literal type="string">"ode"</literal></expr></argument>,
            <argument><expr><literal type="string">"stu"</literal></expr></argument>, <argument><expr><literal type="string">"mug"</literal></expr></argument>, <argument><expr><literal type="string">"cad"</literal></expr></argument>, <argument><expr><literal type="string">"nap"</literal></expr></argument>, <argument><expr><literal type="string">"gun"</literal></expr></argument>, <argument><expr><literal type="string">"fop"</literal></expr></argument>, <argument><expr><literal type="string">"tot"</literal></expr></argument>, <argument><expr><literal type="string">"sow"</literal></expr></argument>, <argument><expr><literal type="string">"sal"</literal></expr></argument>, <argument><expr><literal type="string">"sic"</literal></expr></argument>, <argument><expr><literal type="string">"ted"</literal></expr></argument>, <argument><expr><literal type="string">"wot"</literal></expr></argument>,
            <argument><expr><literal type="string">"del"</literal></expr></argument>, <argument><expr><literal type="string">"imp"</literal></expr></argument>, <argument><expr><literal type="string">"cob"</literal></expr></argument>, <argument><expr><literal type="string">"way"</literal></expr></argument>, <argument><expr><literal type="string">"ann"</literal></expr></argument>, <argument><expr><literal type="string">"tan"</literal></expr></argument>, <argument><expr><literal type="string">"mci"</literal></expr></argument>, <argument><expr><literal type="string">"job"</literal></expr></argument>, <argument><expr><literal type="string">"wet"</literal></expr></argument>, <argument><expr><literal type="string">"ism"</literal></expr></argument>, <argument><expr><literal type="string">"err"</literal></expr></argument>, <argument><expr><literal type="string">"him"</literal></expr></argument>,
            <argument><expr><literal type="string">"all"</literal></expr></argument>, <argument><expr><literal type="string">"pad"</literal></expr></argument>, <argument><expr><literal type="string">"hah"</literal></expr></argument>, <argument><expr><literal type="string">"hie"</literal></expr></argument>, <argument><expr><literal type="string">"aim"</literal></expr></argument>, <argument><expr><literal type="string">"ike"</literal></expr></argument>, <argument><expr><literal type="string">"jed"</literal></expr></argument>, <argument><expr><literal type="string">"ego"</literal></expr></argument>, <argument><expr><literal type="string">"mac"</literal></expr></argument>, <argument><expr><literal type="string">"baa"</literal></expr></argument>, <argument><expr><literal type="string">"min"</literal></expr></argument>, <argument><expr><literal type="string">"com"</literal></expr></argument>,
            <argument><expr><literal type="string">"ill"</literal></expr></argument>, <argument><expr><literal type="string">"was"</literal></expr></argument>, <argument><expr><literal type="string">"cab"</literal></expr></argument>, <argument><expr><literal type="string">"ago"</literal></expr></argument>, <argument><expr><literal type="string">"ina"</literal></expr></argument>, <argument><expr><literal type="string">"big"</literal></expr></argument>, <argument><expr><literal type="string">"ilk"</literal></expr></argument>, <argument><expr><literal type="string">"gal"</literal></expr></argument>, <argument><expr><literal type="string">"tap"</literal></expr></argument>, <argument><expr><literal type="string">"duh"</literal></expr></argument>, <argument><expr><literal type="string">"ola"</literal></expr></argument>, <argument><expr><literal type="string">"ran"</literal></expr></argument>,
            <argument><expr><literal type="string">"lab"</literal></expr></argument>, <argument><expr><literal type="string">"top"</literal></expr></argument>, <argument><expr><literal type="string">"gob"</literal></expr></argument>, <argument><expr><literal type="string">"hot"</literal></expr></argument>, <argument><expr><literal type="string">"ora"</literal></expr></argument>, <argument><expr><literal type="string">"tia"</literal></expr></argument>, <argument><expr><literal type="string">"kip"</literal></expr></argument>, <argument><expr><literal type="string">"han"</literal></expr></argument>, <argument><expr><literal type="string">"met"</literal></expr></argument>, <argument><expr><literal type="string">"hut"</literal></expr></argument>, <argument><expr><literal type="string">"she"</literal></expr></argument>, <argument><expr><literal type="string">"sac"</literal></expr></argument>,
            <argument><expr><literal type="string">"fed"</literal></expr></argument>, <argument><expr><literal type="string">"goo"</literal></expr></argument>, <argument><expr><literal type="string">"tee"</literal></expr></argument>, <argument><expr><literal type="string">"ell"</literal></expr></argument>, <argument><expr><literal type="string">"not"</literal></expr></argument>, <argument><expr><literal type="string">"act"</literal></expr></argument>, <argument><expr><literal type="string">"gil"</literal></expr></argument>, <argument><expr><literal type="string">"rut"</literal></expr></argument>, <argument><expr><literal type="string">"ala"</literal></expr></argument>, <argument><expr><literal type="string">"ape"</literal></expr></argument>, <argument><expr><literal type="string">"rig"</literal></expr></argument>, <argument><expr><literal type="string">"cid"</literal></expr></argument>,
            <argument><expr><literal type="string">"god"</literal></expr></argument>, <argument><expr><literal type="string">"duo"</literal></expr></argument>, <argument><expr><literal type="string">"lin"</literal></expr></argument>, <argument><expr><literal type="string">"aid"</literal></expr></argument>, <argument><expr><literal type="string">"gel"</literal></expr></argument>, <argument><expr><literal type="string">"awl"</literal></expr></argument>, <argument><expr><literal type="string">"lag"</literal></expr></argument>, <argument><expr><literal type="string">"elf"</literal></expr></argument>, <argument><expr><literal type="string">"liz"</literal></expr></argument>, <argument><expr><literal type="string">"ref"</literal></expr></argument>, <argument><expr><literal type="string">"aha"</literal></expr></argument>, <argument><expr><literal type="string">"fib"</literal></expr></argument>,
            <argument><expr><literal type="string">"oho"</literal></expr></argument>, <argument><expr><literal type="string">"tho"</literal></expr></argument>, <argument><expr><literal type="string">"her"</literal></expr></argument>, <argument><expr><literal type="string">"nor"</literal></expr></argument>, <argument><expr><literal type="string">"ace"</literal></expr></argument>, <argument><expr><literal type="string">"adz"</literal></expr></argument>, <argument><expr><literal type="string">"fun"</literal></expr></argument>, <argument><expr><literal type="string">"ned"</literal></expr></argument>, <argument><expr><literal type="string">"coo"</literal></expr></argument>, <argument><expr><literal type="string">"win"</literal></expr></argument>, <argument><expr><literal type="string">"tao"</literal></expr></argument>, <argument><expr><literal type="string">"coy"</literal></expr></argument>,
            <argument><expr><literal type="string">"van"</literal></expr></argument>, <argument><expr><literal type="string">"man"</literal></expr></argument>, <argument><expr><literal type="string">"pit"</literal></expr></argument>, <argument><expr><literal type="string">"guy"</literal></expr></argument>, <argument><expr><literal type="string">"foe"</literal></expr></argument>, <argument><expr><literal type="string">"hid"</literal></expr></argument>, <argument><expr><literal type="string">"mai"</literal></expr></argument>, <argument><expr><literal type="string">"sup"</literal></expr></argument>, <argument><expr><literal type="string">"jay"</literal></expr></argument>, <argument><expr><literal type="string">"hob"</literal></expr></argument>, <argument><expr><literal type="string">"mow"</literal></expr></argument>, <argument><expr><literal type="string">"jot"</literal></expr></argument>,
            <argument><expr><literal type="string">"are"</literal></expr></argument>, <argument><expr><literal type="string">"pol"</literal></expr></argument>, <argument><expr><literal type="string">"arc"</literal></expr></argument>, <argument><expr><literal type="string">"lax"</literal></expr></argument>, <argument><expr><literal type="string">"aft"</literal></expr></argument>, <argument><expr><literal type="string">"alb"</literal></expr></argument>, <argument><expr><literal type="string">"len"</literal></expr></argument>, <argument><expr><literal type="string">"air"</literal></expr></argument>, <argument><expr><literal type="string">"pug"</literal></expr></argument>, <argument><expr><literal type="string">"pox"</literal></expr></argument>, <argument><expr><literal type="string">"vow"</literal></expr></argument>, <argument><expr><literal type="string">"got"</literal></expr></argument>,
            <argument><expr><literal type="string">"meg"</literal></expr></argument>, <argument><expr><literal type="string">"zoe"</literal></expr></argument>, <argument><expr><literal type="string">"amp"</literal></expr></argument>, <argument><expr><literal type="string">"ale"</literal></expr></argument>, <argument><expr><literal type="string">"bud"</literal></expr></argument>, <argument><expr><literal type="string">"gee"</literal></expr></argument>, <argument><expr><literal type="string">"pin"</literal></expr></argument>, <argument><expr><literal type="string">"dun"</literal></expr></argument>, <argument><expr><literal type="string">"pat"</literal></expr></argument>, <argument><expr><literal type="string">"ten"</literal></expr></argument>, <argument><expr><literal type="string">"mob"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><operator>new</operator> <call><name>WordLadderII</name><argument_list>()</argument_list></call><operator>.</operator><call><name>findLadders</name><argument_list>(<argument><expr><literal type="string">"cet"</literal></expr></argument>, <argument><expr><literal type="string">"ism"</literal></expr></argument>, <argument><expr><name>dic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>findLadders</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>beginWord</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>endWord</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>wordList</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>dictionary</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><name>wordList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>bfs</name><argument_list>(<argument><expr><name>beginWord</name></expr></argument>, <argument><expr><name>endWord</name></expr></argument>, <argument><expr><name>wordList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>path</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>path</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>beginWord</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>beginWord</name></expr></argument>, <argument><expr><name>endWord</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>result</name></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Bfs
   *
   * @param beginWord begin word
   * @param endWord end word
   * @param wordList wordlist
   */</comment>
  <function><type><specifier>private</specifier> <name>void</name></type> <name>bfs</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>beginWord</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>endWord</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>wordList</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>queue</name><operator>.</operator><name>offer</name></name><argument_list>(<argument><expr><name>beginWord</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>minDistance</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>beginWord</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while <condition>(<expr><operator>!</operator><call><name><name>queue</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>String</name></type> <name>currWord</name> <init>= <expr><call><name><name>queue</name><operator>.</operator><name>poll</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>StringBuilder</name></type> <name>childSb</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>(<argument><expr><name>currWord</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>ln</name> <init>= <expr><call><name><name>childSb</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>ln</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>l</name> <init>= <expr><call><name><name>CONST</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>l</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
          <decl_stmt><decl><type><name>char</name></type> <name>old</name> <init>= <expr><call><name><name>childSb</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name><name>childSb</name><operator>.</operator><name>replace</name></name><argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>CONST</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <decl_stmt><decl><type><name>String</name></type> <name>child</name> <init>= <expr><call><name><name>childSb</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
          <if_stmt><if>if <condition>(<expr><call><name><name>dictionary</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>minDistance</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><call><name><name>minDistance</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><call><name><name>minDistance</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>currWord</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name>addChild</name><argument_list>(<argument><expr><name>currWord</name></expr></argument>, <argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>child</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>endWord</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>queue</name><operator>.</operator><name>offer</name></name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
              <if_stmt><if>if <condition>(<expr><call><name><name>minDistance</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>(</operator><call><name><name>minDistance</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>currWord</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>addChild</name><argument_list>(<argument><expr><name>currWord</name></expr></argument>, <argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></else></if_stmt>
          </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><call><name><name>childSb</name><operator>.</operator><name>replace</name></name><argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>old</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
      </block_content>}</block></for>
    </block_content>}</block></while>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Add child
   *
   * @param parent parent
   * @param child child
   */</comment>
  <function><type><specifier>private</specifier> <name>void</name></type> <name>addChild</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>parent</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>child</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>children</name> <init>= <expr><call><name><name>graph</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>children</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>children</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name><name>children</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>graph</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>children</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Dfs to build path
   *
   * @param currWord node
   * @param endWord endword
   * @param path path
   */</comment>
  <function><type><specifier>private</specifier> <name>void</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>currWord</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>endWord</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>path</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name><name>currWord</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>endWord</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>children</name> <init>= <expr><call><name><name>graph</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>currWord</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>children</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>String</name></type> <name>c</name> <range>: <expr><name>children</name></expr></range></decl></init>)</control> <block>{<block_content>
          <expr_stmt><expr><call><name><name>path</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>endWord</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>path</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><call><name><name>path</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></function>
}</block></class>
</unit>
