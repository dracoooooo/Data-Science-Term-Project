<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\tree\tree\ValidBinarySearchTree.java"><package>package <name>tree</name>;</package>

<comment type="block" format="javadoc">/**
 * Created by gouthamvidyapradhan on 09/03/2017. Given a binary tree, determine if it is a valid
 * binary search tree (BST).
 *
 * &lt;p&gt;Assume a BST is defined as follows:
 *
 * &lt;p&gt;The left subtree of a node contains only nodes with keys less than the node's key. The right
 * subtree of a node contains only nodes with keys greater than the node's key. Both the left and
 * right subtrees must also be binary search trees. Example 1: 2 / \ 1 3 Binary tree [2,1,3], return
 * true. Example 2: 1 / \ 2 3 Binary tree [1,2,3], return false.
 */</comment>
<class><specifier>public</specifier> class <name>ValidBinarySearchTree</name> <block>{
  <class>class <name>Range</name> <block>{
    <decl_stmt><decl><type><name>long</name></type> <name>low</name></decl>, <decl><type ref="prev"/><name>high</name></decl>;</decl_stmt>
  }</block></class>

  <class><specifier>static</specifier> class <name>TreeNode</name> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>val</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TreeNode</name></type> <name>left</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TreeNode</name></type> <name>right</name></decl>;</decl_stmt>

    <constructor><name>TreeNode</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name>val</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>
  }</block></class>

  <comment type="block" format="javadoc">/**
   * Main method
   *
   * @param args
   * @throws Exception
   */</comment>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>TreeNode</name></type> <name>root</name> <init>= <expr><operator>new</operator> <call><name>TreeNode</name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>MIN_VALUE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>root</name><operator>.</operator><name>right</name></name> <operator>=</operator> <operator>new</operator> <call><name>TreeNode</name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ValidBinarySearchTree</name><argument_list>()</argument_list></call><operator>.</operator><call><name>isValidBST</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>boolean</name></type> <name>isValidBST</name><parameter_list>(<parameter><decl><type><name>TreeNode</name></type> <name>root</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>root</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <operator>(</operator><name><name>root</name><operator>.</operator><name>right</name></name> <operator>==</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name><name>root</name><operator>.</operator><name>left</name></name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">true</literal></expr>;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>Range</name></type> <name>range</name> <init>= <expr><operator>new</operator> <call><name>Range</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>range</name><operator>.</operator><name>high</name></name> <operator>=</operator> <name><name>Long</name><operator>.</operator><name>MAX_VALUE</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>range</name><operator>.</operator><name>low</name></name> <operator>=</operator> <name><name>Long</name><operator>.</operator><name>MIN_VALUE</name></name></expr>;</expr_stmt>
    <return>return <expr><call><name>validate</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>range</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>boolean</name></type> <name>validate</name><parameter_list>(<parameter><decl><type><name>TreeNode</name></type> <name>root</name></decl></parameter>, <parameter><decl><type><name>Range</name></type> <name>range</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>root</name><operator>.</operator><name>val</name></name> <operator>&gt;</operator> <name><name>range</name><operator>.</operator><name>low</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>root</name><operator>.</operator><name>val</name></name> <operator>&lt;</operator> <name><name>range</name><operator>.</operator><name>high</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>long</name></type> <name>temp</name> <init>= <expr><name><name>range</name><operator>.</operator><name>high</name></name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>root</name><operator>.</operator><name>left</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>range</name><operator>.</operator><name>high</name></name> <operator>=</operator> <name><name>root</name><operator>.</operator><name>val</name></name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>validate</name><argument_list>(<argument><expr><name><name>root</name><operator>.</operator><name>left</name></name></expr></argument>, <argument><expr><name>range</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>root</name><operator>.</operator><name>right</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>range</name><operator>.</operator><name>high</name></name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>range</name><operator>.</operator><name>low</name></name> <operator>=</operator> <name><name>root</name><operator>.</operator><name>val</name></name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>validate</name><argument_list>(<argument><expr><name><name>root</name><operator>.</operator><name>right</name></name></expr></argument>, <argument><expr><name>range</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
      <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    </block_content>}</block></if> <else>else<block type="pseudo"><block_content> <return>return <expr><literal type="boolean">false</literal></expr>;</return></block_content></block></else></if_stmt>
  </block_content>}</block></function>
}</block></class>
</unit>
