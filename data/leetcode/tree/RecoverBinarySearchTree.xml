<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\tree\RecoverBinarySearchTree.java"><package>package <name>tree</name>;</package>

<comment type="block" format="javadoc">/**
 * Created by gouthamvidyapradhan on 28/07/2018. Two elements of a binary search tree (BST) are
 * swapped by mistake.
 *
 * &lt;p&gt;Recover the tree without changing its structure.
 *
 * &lt;p&gt;Example 1:
 *
 * &lt;p&gt;Input: [1,3,null,null,2]
 *
 * &lt;p&gt;1 / 3 \ 2
 *
 * &lt;p&gt;Output: [3,1,null,null,2]
 *
 * &lt;p&gt;3 / 1 \ 2 Example 2:
 *
 * &lt;p&gt;Input: [3,1,4,null,null,2]
 *
 * &lt;p&gt;3 / \ 1 4 / 2
 *
 * &lt;p&gt;Output: [2,1,4,null,null,3]
 *
 * &lt;p&gt;2 / \ 1 4 / 3 Follow up:
 *
 * &lt;p&gt;A solution using O(n) space is pretty straight forward. Could you devise a constant space
 * solution?
 *
 * &lt;p&gt;Solution: O(N) time and O(1) space. Step 1, perform a inorder traversal and mark left and
 * right pointer at the node where violation of BST occurs. Step2, find the next node which is
 * smaller or equal to right pointer node. Finally swap left and right node values.
 */</comment>
<class><specifier>public</specifier> class <name>RecoverBinarySearchTree</name> <block>{
  <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>violation</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>TreeNode</name></type> <name>left</name></decl>, <decl><type ref="prev"/><name>right</name></decl>, <decl><type ref="prev"/><name>prev</name></decl>;</decl_stmt>

  <class><specifier>public</specifier> <specifier>static</specifier> class <name>TreeNode</name> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>val</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TreeNode</name></type> <name>left</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TreeNode</name></type> <name>right</name></decl>;</decl_stmt>

    <constructor><name>TreeNode</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name>val</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>
  }</block></class>

  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>TreeNode</name></type> <name>root</name> <init>= <expr><operator>new</operator> <call><name>TreeNode</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>root</name><operator>.</operator><name>left</name></name> <operator>=</operator> <operator>new</operator> <call><name>TreeNode</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>root</name><operator>.</operator><name>left</name><operator>.</operator><name>left</name></name> <operator>=</operator> <operator>new</operator> <call><name>TreeNode</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>root</name><operator>.</operator><name>left</name><operator>.</operator><name>left</name><operator>.</operator><name>left</name></name> <operator>=</operator> <operator>new</operator> <call><name>TreeNode</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>new</operator> <call><name>RecoverBinarySearchTree</name><argument_list>()</argument_list></call><operator>.</operator><call><name>recoverTree</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>recoverTree</name><parameter_list>(<parameter><decl><type><name>TreeNode</name></type> <name>root</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>inorder</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>left</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>right</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>temp</name> <init>= <expr><name><name>left</name><operator>.</operator><name>val</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>left</name><operator>.</operator><name>val</name></name> <operator>=</operator> <name><name>right</name><operator>.</operator><name>val</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>right</name><operator>.</operator><name>val</name></name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>inorder</name><parameter_list>(<parameter><decl><type><name>TreeNode</name></type> <name>root</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>root</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>inorder</name><argument_list>(<argument><expr><name><name>root</name><operator>.</operator><name>left</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>prev</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>violation</name></expr>)</condition> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><name><name>prev</name><operator>.</operator><name>val</name></name> <operator>&gt;</operator> <name><name>root</name><operator>.</operator><name>val</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>violation</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>left</name> <operator>=</operator> <name>prev</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>right</name> <operator>=</operator> <name>root</name></expr>;</expr_stmt>
          </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>prev</name> <operator>=</operator> <name>root</name></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><name><name>root</name><operator>.</operator><name>val</name></name> <operator>&lt;=</operator> <name><name>right</name><operator>.</operator><name>val</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>right</name> <operator>=</operator> <name>root</name></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>prev</name> <operator>=</operator> <name>root</name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><call><name>inorder</name><argument_list>(<argument><expr><name><name>root</name><operator>.</operator><name>right</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></function>
}</block></class>
</unit>
