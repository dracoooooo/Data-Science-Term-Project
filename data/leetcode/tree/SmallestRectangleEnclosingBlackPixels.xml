<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\search\depth_first_search\SmallestRectangleEnclosingBlackPixels.java"><package>package <name>depth_first_search</name>;</package>

<comment type="block" format="javadoc">/**
 * Created by gouthamvidyapradhan on 24/06/2018. An image is represented by a binary matrix with 0
 * as a white pixel and 1 as a black pixel. The black pixels are connected, i.e., there is only one
 * black region. Pixels are connected horizontally and vertically. Given the location (x, y) of one
 * of the black pixels, return the area of the smallest (axis-aligned) rectangle that encloses all
 * black pixels.
 *
 * &lt;p&gt;Example:
 *
 * &lt;p&gt;Input: [ "0010", "0110", "0100" ] and x = 0, y = 2
 *
 * &lt;p&gt;Output: 6
 *
 * &lt;p&gt;Solution: O(n x m) do a dfs and keep track of min and max length-breadth. Return the product
 * of l x b
 */</comment>
<class><specifier>public</specifier> class <name>SmallestRectangleEnclosingBlackPixels</name> <block>{
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>int</name><index>[]</index></name></type> <name>R</name> <init>= <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>int</name><index>[]</index></name></type> <name>C</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name><name>boolean</name><index>[]</index><index>[]</index></name></type> <name>done</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>maxR</name></decl>, <decl><type ref="prev"/><name>minR</name></decl>, <decl><type ref="prev"/><name>minC</name></decl>, <decl><type ref="prev"/><name>maxC</name></decl>;</decl_stmt>

  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>char</name><index>[]</index><index>[]</index></name></type> <name>A</name> <init>= <expr><block>{<expr><block>{<expr><literal type="char">'0'</literal></expr>, <expr><literal type="char">'0'</literal></expr>, <expr><literal type="char">'1'</literal></expr>, <expr><literal type="char">'1'</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="char">'0'</literal></expr>, <expr><literal type="char">'1'</literal></expr>, <expr><literal type="char">'1'</literal></expr>, <expr><literal type="char">'0'</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="char">'0'</literal></expr>, <expr><literal type="char">'1'</literal></expr>, <expr><literal type="char">'0'</literal></expr>, <expr><literal type="char">'0'</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SmallestRectangleEnclosingBlackPixels</name><argument_list>()</argument_list></call><operator>.</operator><call><name>minArea</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>int</name></type> <name>minArea</name><parameter_list>(<parameter><decl><type><name><name>char</name><index>[]</index><index>[]</index></name></type> <name>image</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>done</name> <operator>=</operator> <operator>new</operator> <name><name>boolean</name><index>[<expr><name><name>image</name><operator>.</operator><name>length</name></name></expr>]</index><index>[<expr><name><name>image</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>length</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>maxR</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>maxC</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>minR</name> <operator>=</operator> <name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>minC</name> <operator>=</operator> <name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>maxR</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name>maxR</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>minR</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><name>minR</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>maxC</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name>maxC</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>minC</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><name>minC</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>image</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>(</operator><operator>(</operator><name>maxR</name> <operator>-</operator> <name>minR</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><operator>(</operator><name>maxC</name> <operator>-</operator> <name>minC</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name><name>char</name><index>[]</index><index>[]</index></name></type> <name>image</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>done</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><name>c</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>newR</name> <init>= <expr><name>r</name> <operator>+</operator> <name><name>R</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>newC</name> <init>= <expr><name>c</name> <operator>+</operator> <name><name>C</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>newR</name> <operator>&gt;=</operator> <literal type="number">0</literal>
          <operator>&amp;&amp;</operator> <name>newR</name> <operator>&lt;</operator> <name><name>image</name><operator>.</operator><name>length</name></name>
          <operator>&amp;&amp;</operator> <name>newC</name> <operator>&gt;=</operator> <literal type="number">0</literal>
          <operator>&amp;&amp;</operator> <name>newC</name> <operator>&lt;</operator> <name><name>image</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>length</name>
          <operator>&amp;&amp;</operator> <operator>!</operator><name><name>done</name><index>[<expr><name>newR</name></expr>]</index><index>[<expr><name>newC</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>image</name><index>[<expr><name>newR</name></expr>]</index><index>[<expr><name>newC</name></expr>]</index></name> <operator>==</operator> <literal type="char">'1'</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>maxR</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name>maxR</name></expr></argument>, <argument><expr><name>newR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>minR</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><name>minR</name></expr></argument>, <argument><expr><name>newR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt><expr><name>maxC</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name>maxC</name></expr></argument>, <argument><expr><name>newC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>minC</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><name>minC</name></expr></argument>, <argument><expr><name>newC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>image</name></expr></argument>, <argument><expr><name>newR</name></expr></argument>, <argument><expr><name>newC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></function>
}</block></class>
</unit>
