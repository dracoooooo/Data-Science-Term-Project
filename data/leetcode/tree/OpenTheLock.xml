<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\tree\OpenTheLock.java"><package>package <name>breadth_first_search</name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Created by gouthamvidyapradhan on 09/02/2018. You have a lock in front of you with 4 circular
 * wheels. Each wheel has 10 slots: '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'. The wheels can
 * rotate freely and wrap around: for example we can turn '9' to be '0', or '0' to be '9'. Each move
 * consists of turning one wheel one slot.
 *
 * &lt;p&gt;The lock initially starts at '0000', a string representing the state of the 4 wheels.
 *
 * &lt;p&gt;You are given a list of deadends dead ends, meaning if the lock displays any of these codes,
 * the wheels of the lock will stop turning and you will be unable to open it.
 *
 * &lt;p&gt;Given a target representing the value of the wheels that will unlock the lock, return the
 * minimum total number of turns required to open the lock, or -1 if it is impossible.
 *
 * &lt;p&gt;Example 1: Input: deadends = ["0201","0101","0102","1212","2002"], target = "0202" Output: 6
 * Explanation: A sequence of valid moves would be "0000" -&gt; "1000" -&gt; "1100" -&gt; "1200" -&gt; "1201" -&gt;
 * "1202" -&gt; "0202". Note that a sequence like "0000" -&gt; "0001" -&gt; "0002" -&gt; "0102" -&gt; "0202" would
 * be invalid, because the wheels of the lock become stuck after the display becomes the dead end
 * "0102". Example 2: Input: deadends = ["8888"], target = "0009" Output: 1 Explanation: We can turn
 * the last wheel in reverse to move from "0000" -&gt; "0009". Example 3: Input: deadends =
 * ["8887","8889","8878","8898","8788","8988","7888","9888"], target = "8888" Output: -1
 * Explanation: We can't reach the target without getting stuck. Example 4: Input: deadends =
 * ["0000"], target = "8888" Output: -1 Note: The length of deadends will be in the range [1, 500].
 * target will not be in the list deadends. Every string in deadends and the string target will be a
 * string of4 digits from the 10,000 possibilities '0000' to '9999'.
 *
 * &lt;p&gt;Solution: Perform a bfs of each state starting from 0000 and return the minimum distance.
 */</comment>
<class><specifier>public</specifier> class <name>OpenTheLock</name> <block>{

  <class>class <name>State</name> <block>{
    <decl_stmt><decl><type><name>String</name></type> <name>state</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>dist</name></decl>;</decl_stmt>

    <constructor><name>State</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>state</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dist</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>state</name></name> <operator>=</operator> <name>state</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>dist</name></name> <operator>=</operator> <name>dist</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>
  }</block></class>

  <decl_stmt><decl><type><specifier>private</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>done</name></decl>;</decl_stmt>
  <comment type="block" format="javadoc">/**
   * Main method
   *
   * @param args
   * @throws Exception
   */</comment>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>A</name> <init>= <expr><block>{<expr><literal type="string">"0201"</literal></expr>, <expr><literal type="string">"0101"</literal></expr>, <expr><literal type="string">"0102"</literal></expr>, <expr><literal type="string">"1212"</literal></expr>, <expr><literal type="string">"2002"</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>OpenTheLock</name><argument_list>()</argument_list></call><operator>.</operator><call><name>openLock</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"0202"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>int</name></type> <name>openLock</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>deadends</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>target</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>done</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Arrays</name><operator>.</operator><name>stream</name></name><argument_list>(<argument><expr><name>deadends</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>forEach</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>e</name></decl></parameter></parameter_list> -&gt;<block type="pseudo"><block_content> <expr><call><name><name>done</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></block_content></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>done</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">"0000"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>target</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"0000"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name><name>Queue</name><argument_list type="generic">&lt;<argument><name>State</name></argument>&gt;</argument_list></name></type> <name>queue</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayDeque</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>queue</name><operator>.</operator><name>offer</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>State</name><argument_list>(<argument><expr><literal type="string">"0000"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>done</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="string">"0000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while <condition>(<expr><operator>!</operator><call><name><name>queue</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>State</name></type> <name>state</name> <init>= <expr><call><name><name>queue</name><operator>.</operator><name>poll</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name><name>state</name><operator>.</operator><name>state</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name><name>state</name><operator>.</operator><name>dist</name></name></expr>;</return></block_content></block></if></if_stmt>
      <decl_stmt><decl><type><name>String</name></type> <name>currState</name> <init>= <expr><name><name>state</name><operator>.</operator><name>state</name></name></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><call><name><name>currState</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>cV</name> <init>= <expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>prefix</name> <init>= <expr><call><name><name>currState</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>postFix</name> <init>= <expr><call><name><name>currState</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>newChild1</name> <init>= <expr><name>prefix</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><operator>(</operator><name>cV</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;</operator> <literal type="number">9</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>(</operator><name>cV</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></else></ternary><operator>)</operator> <operator>+</operator> <name>postFix</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>done</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>newChild1</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>queue</name><operator>.</operator><name>offer</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>State</name><argument_list>(<argument><expr><name>newChild1</name></expr></argument>, <argument><expr><name><name>state</name><operator>.</operator><name>dist</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>done</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>newChild1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>newChild2</name> <init>= <expr><name>prefix</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><operator>(</operator><name>cV</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">9</literal></expr> </then><else>: <expr><operator>(</operator><name>cV</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></else></ternary><operator>)</operator> <operator>+</operator> <name>postFix</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>done</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>newChild2</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name><name>queue</name><operator>.</operator><name>offer</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>State</name><argument_list>(<argument><expr><name>newChild2</name></expr></argument>, <argument><expr><name><name>state</name><operator>.</operator><name>dist</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>done</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>newChild2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
    </block_content>}</block></while>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></function>
}</block></class>
</unit>
