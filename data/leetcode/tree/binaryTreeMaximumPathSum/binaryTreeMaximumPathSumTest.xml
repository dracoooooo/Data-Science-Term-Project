<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\tree\binaryTreeMaximumPathSum\binaryTreeMaximumPathSumTest.java"><package>package <name>binaryTreeMaximumPathSum</name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Test</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>

<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>*</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Created by leicao on 8/10/15.
 */</comment>
<class><specifier>public</specifier> class <name>binaryTreeMaximumPathSumTest</name> <block>{

    <function><annotation>@<name>Test</name></annotation>
    <type><specifier>public</specifier> <name>void</name></type> <name>testMaxPathSum</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>TreeNode</name></argument>&gt;</argument_list></name></type> <name>inputs</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>TreeNode</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>TreeNode</name></type> <name>t0</name> <init>= <expr><operator>new</operator> <call><name>TreeNode</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">15</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>TreeNode</name></type> <name>t1</name> <init>= <expr><operator>new</operator> <call><name>TreeNode</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>TreeNode</name></type> <name>t2</name> <init>= <expr><operator>new</operator> <call><name>TreeNode</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>TreeNode</name></type> <name>t3</name> <init>= <expr><operator>new</operator> <call><name>TreeNode</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>TreeNode</name></type> <name>t4</name> <init>= <expr><operator>new</operator> <call><name>TreeNode</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>TreeNode</name></type> <name>t5</name> <init>= <expr><operator>new</operator> <call><name>TreeNode</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>TreeNode</name></type> <name>t6</name> <init>= <expr><operator>new</operator> <call><name>TreeNode</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>TreeNode</name></type> <name>t7</name> <init>= <expr><operator>new</operator> <call><name>TreeNode</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>TreeNode</name></type> <name>t8</name> <init>= <expr><operator>new</operator> <call><name>TreeNode</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>TreeNode</name></type> <name>t9</name> <init>= <expr><operator>new</operator> <call><name>TreeNode</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>TreeNode</name></type> <name>t10</name> <init>= <expr><operator>new</operator> <call><name>TreeNode</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>TreeNode</name></type> <name>t11</name> <init>= <expr><operator>new</operator> <call><name>TreeNode</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>TreeNode</name></type> <name>t12</name> <init>= <expr><operator>new</operator> <call><name>TreeNode</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name><name>t0</name><operator>.</operator><name>left</name></name> <operator>=</operator> <name>t1</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>t0</name><operator>.</operator><name>right</name></name> <operator>=</operator> <name>t2</name></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>t1</name><operator>.</operator><name>left</name></name> <operator>=</operator> <name>t3</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>t1</name><operator>.</operator><name>right</name></name> <operator>=</operator> <name>t4</name></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>t2</name><operator>.</operator><name>left</name></name> <operator>=</operator> <name>t5</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>t2</name><operator>.</operator><name>right</name></name> <operator>=</operator> <name>t6</name></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>t3</name><operator>.</operator><name>left</name></name> <operator>=</operator> <name>t7</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>t3</name><operator>.</operator><name>right</name></name> <operator>=</operator> <name>t8</name></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>t6</name><operator>.</operator><name>right</name></name> <operator>=</operator> <name>t9</name></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>t9</name><operator>.</operator><name>left</name></name> <operator>=</operator> <name>t10</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>t9</name><operator>.</operator><name>right</name></name> <operator>=</operator> <name>t11</name></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>t11</name><operator>.</operator><name>left</name></name> <operator>=</operator> <name>t12</name></expr>;</expr_stmt>


        <decl_stmt><decl><type><name>TreeNode</name></type> <name>n1</name> <init>= <expr><operator>new</operator> <call><name>TreeNode</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>TreeNode</name></type> <name>n2</name> <init>= <expr><operator>new</operator> <call><name>TreeNode</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>TreeNode</name></type> <name>n3</name> <init>= <expr><operator>new</operator> <call><name>TreeNode</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>TreeNode</name></type> <name>n4</name> <init>= <expr><operator>new</operator> <call><name>TreeNode</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>TreeNode</name></type> <name>n5</name> <init>= <expr><operator>new</operator> <call><name>TreeNode</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>TreeNode</name></type> <name>n6</name> <init>= <expr><operator>new</operator> <call><name>TreeNode</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>TreeNode</name></type> <name>n7</name> <init>= <expr><operator>new</operator> <call><name>TreeNode</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>TreeNode</name></type> <name>n8</name> <init>= <expr><operator>new</operator> <call><name>TreeNode</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>TreeNode</name></type> <name>n9</name> <init>= <expr><operator>new</operator> <call><name>TreeNode</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name><name>n1</name><operator>.</operator><name>left</name></name> <operator>=</operator> <name>n2</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>n1</name><operator>.</operator><name>right</name></name> <operator>=</operator> <name>n3</name></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>n3</name><operator>.</operator><name>left</name></name> <operator>=</operator> <name>n4</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>n3</name><operator>.</operator><name>right</name></name> <operator>=</operator> <name>n5</name></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>n5</name><operator>.</operator><name>left</name></name> <operator>=</operator> <name>n6</name></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>n6</name><operator>.</operator><name>left</name></name> <operator>=</operator> <name>n7</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>n6</name><operator>.</operator><name>right</name></name> <operator>=</operator> <name>n8</name></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>n7</name><operator>.</operator><name>left</name></name> <operator>=</operator> <name>n9</name></expr>;</expr_stmt>



<comment type="line">//        inputs.add(t0);</comment>
        <expr_stmt><expr><call><name><name>inputs</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>n1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>results</name> <init>= <expr><block>{
<comment type="line">//                27,</comment>
                <expr><literal type="number">16</literal></expr>
        }</block></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>results</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>binaryTreeMaximumPathSum</name></type> <name>b</name> <init>= <expr><operator>new</operator> <call><name>binaryTreeMaximumPathSum</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name><name>b</name><operator>.</operator><name>maxPathSum</name></name><argument_list>(<argument><expr><call><name><name>inputs</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>results</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

    </block_content>}</block></function>
}</block></class></unit>
