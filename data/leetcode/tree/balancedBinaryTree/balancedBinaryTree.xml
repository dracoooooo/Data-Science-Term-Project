<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\tree\balancedBinaryTree\balancedBinaryTree.java"><comment type="line">// Source : https://oj.leetcode.com/problems/balanced-binary-tree/</comment>
<comment type="line">// Inspired by : http://www.jiuzhang.com/solutions/balanced-binary-tree/</comment>
<comment type="line">// Author : Lei Cao</comment>
<comment type="line">// Date   : 2015-10-07</comment>

<comment type="block" format="javadoc">/**********************************************************************************
 *
 * Given a binary tree, determine if it is height-balanced.
 *
 * For this problem, a height-balanced binary tree is defined as a binary tree in which
 * the depth of the two subtrees of every node never differ by more than 1.
 * Example
 * Given binary tree A={3,9,20,#,#,15,7}, B={3,#,20,15,7}
 * The binary tree A is a height-balanced binary tree, but B is not.
 **********************************************************************************/</comment>

<package>package <name>balancedBinaryTree</name>;</package>

<comment type="block" format="javadoc">/**
 * Created by leicao on 7/10/15.
 */</comment>
<class><specifier>public</specifier> class <name>balancedBinaryTree</name> <block>{
    <comment type="block" format="javadoc">/**
     * @param root: The root of binary tree.
     * @return: True if this Binary tree is Balanced, or false.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isBalanced</name><parameter_list>(<parameter><decl><type><name>TreeNode</name></type> <name>root</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// write your code here</comment>
        <return>return <expr><call><name>helper</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name>isBalanced</name></expr>;</return>
    </block_content>}</block></function>

    <comment type="line">// This is not needed. Can just check the depth</comment>
    <class><specifier>private</specifier> class <name>Result</name> <block>{
        <decl_stmt><decl><type><name>boolean</name></type> <name>isBalanced</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>height</name></decl>;</decl_stmt>
        <constructor><name>Result</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>isBalanced</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>isBalanced</name></name> <operator>=</operator> <name>isBalanced</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>
    }</block></class>
    <function><type><specifier>private</specifier> <name>Result</name></type> <name>helper</name><parameter_list>(<parameter><decl><type><name>TreeNode</name></type> <name>root</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>depth</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>root</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>Result</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>depth</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>Result</name></type> <name>left</name> <init>= <expr><call><name>helper</name><argument_list>(<argument><expr><name><name>root</name><operator>.</operator><name>left</name></name></expr></argument>, <argument><expr><name>depth</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Result</name></type> <name>right</name> <init>= <expr><call><name>helper</name><argument_list>(<argument><expr><name><name>root</name><operator>.</operator><name>right</name></name></expr></argument>, <argument><expr><name>depth</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>left</name><operator>.</operator><name>isBalanced</name></name> <operator>||</operator> <operator>!</operator><name><name>right</name><operator>.</operator><name>isBalanced</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>Result</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>Math</name><operator>.</operator><name>abs</name></name><argument_list>(<argument><expr><name><name>left</name><operator>.</operator><name>height</name></name> <operator>-</operator> <name><name>right</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><operator>new</operator> <call><name>Result</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><operator>new</operator> <call><name>Result</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name><name>left</name><operator>.</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>right</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
}</block></class>
</unit>
