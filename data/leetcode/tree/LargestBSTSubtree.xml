<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\tree\LargestBSTSubtree.java"><package>package <name>tree</name>;</package>

<comment type="block" format="javadoc">/**
 * Created by gouthamvidyapradhan on 08/05/2017.
 *
 * &lt;p&gt;Given a binary tree, find the largest subtree which is a Binary Search Tree (BST), where
 * largest means subtree with largest number of nodes in it.
 *
 * &lt;p&gt;Note: A subtree must include all of its descendants. Here's an example: 10 / \ 5 15 / \ \ 1 8
 * 7 The Largest BST Subtree in this case is the highlighted one (5-1-8). The return value is the
 * subtree's size, which is 3.
 *
 * &lt;p&gt;Follow up: Can you figure out ways to solve it with O(n) time complexity?
 *
 * &lt;p&gt;Solution: The below solution works with O(n). Validate the BST property from the leaf node and
 * increment the count, as soon as a violation of BST property is found terminate the count.
 */</comment>
<class><specifier>public</specifier> class <name>LargestBSTSubtree</name> <block>{
  <comment type="block" format="javadoc">/** Range class */</comment>
  <class><specifier>private</specifier> class <name>Range</name> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>min</name></decl>, <decl><type ref="prev"/><name>max</name></decl>, <decl><type ref="prev"/><name>count</name></decl>;</decl_stmt>

    <constructor><name>Range</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>min</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>min</name></name> <operator>=</operator> <name>min</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>max</name></name> <operator>=</operator> <name>max</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>count</name></name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>
  }</block></class>

  <comment type="block" format="javadoc">/** TreeNode */</comment>
  <class><specifier>public</specifier> <specifier>static</specifier> class <name>TreeNode</name> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>val</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TreeNode</name></type> <name>left</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TreeNode</name></type> <name>right</name></decl>;</decl_stmt>

    <constructor><name>TreeNode</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name>val</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>
  }</block></class>

  <comment type="block" format="javadoc">/** Count */</comment>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <comment type="block" format="javadoc">/**
   * Main method
   *
   * @param args
   * @throws Exception
   */</comment>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>TreeNode</name></type> <name>root</name> <init>= <expr><operator>new</operator> <call><name>TreeNode</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>root</name><operator>.</operator><name>left</name></name> <operator>=</operator> <operator>new</operator> <call><name>TreeNode</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>root</name><operator>.</operator><name>left</name><operator>.</operator><name>left</name></name> <operator>=</operator> <operator>new</operator> <call><name>TreeNode</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>LargestBSTSubtree</name><argument_list>()</argument_list></call><operator>.</operator><call><name>largestBSTSubtree</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Largest subtree count
   *
   * @param root root node
   * @return count
   */</comment>
  <function><type><specifier>public</specifier> <name>int</name></type> <name>largestBSTSubtree</name><parameter_list>(<parameter><decl><type><name>TreeNode</name></type> <name>root</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>getCount</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>count</name></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Get count
   *
   * @param node root node
   * @return Range
   */</comment>
  <function><type><specifier>private</specifier> <name>Range</name></type> <name>getCount</name><parameter_list>(<parameter><decl><type><name>TreeNode</name></type> <name>node</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>node</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>Range</name></type> <name>left</name> <init>= <expr><call><name>getCount</name><argument_list>(<argument><expr><name><name>node</name><operator>.</operator><name>left</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Range</name></type> <name>right</name> <init>= <expr><call><name>getCount</name><argument_list>(<argument><expr><name><name>node</name><operator>.</operator><name>right</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>left</name> <operator>==</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>right</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>count</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>new</operator> <call><name>Range</name><argument_list>(<argument><expr><name><name>node</name><operator>.</operator><name>val</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>.</operator><name>val</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>left</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>node</name><operator>.</operator><name>val</name></name> <operator>&lt;</operator> <name><name>right</name><operator>.</operator><name>min</name></name>
          <operator>&amp;&amp;</operator> <name><name>right</name><operator>.</operator><name>count</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <comment type="line">// check for -1 ensures that there is no violation of BST property</comment>
      <return>return <expr><call><name>countMaxAndBuildNewRange</name><argument_list>(<argument><expr><name><name>right</name><operator>.</operator><name>count</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>node</name><operator>.</operator><name>val</name></name></expr></argument>, <argument><expr><name><name>right</name><operator>.</operator><name>max</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>right</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>node</name><operator>.</operator><name>val</name></name> <operator>&gt;</operator> <name><name>left</name><operator>.</operator><name>max</name></name> <operator>&amp;&amp;</operator> <name><name>left</name><operator>.</operator><name>count</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name>countMaxAndBuildNewRange</name><argument_list>(<argument><expr><name><name>left</name><operator>.</operator><name>count</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>left</name><operator>.</operator><name>min</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>.</operator><name>val</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>node</name><operator>.</operator><name>val</name></name> <operator>&gt;</operator> <name><name>left</name><operator>.</operator><name>max</name></name> <operator>&amp;&amp;</operator> <name><name>node</name><operator>.</operator><name>val</name></name> <operator>&lt;</operator> <name><name>right</name><operator>.</operator><name>min</name></name> <operator>&amp;&amp;</operator> <name><name>right</name><operator>.</operator><name>count</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>left</name><operator>.</operator><name>count</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><call><name>countMaxAndBuildNewRange</name><argument_list>(<argument><expr><name><name>left</name><operator>.</operator><name>count</name></name> <operator>+</operator> <name><name>right</name><operator>.</operator><name>count</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>left</name><operator>.</operator><name>min</name></name></expr></argument>, <argument><expr><name><name>right</name><operator>.</operator><name>max</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><operator>new</operator> <call><name>Range</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return> <comment type="line">// violation of BST property</comment>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Record max and build new range
   *
   * @param sum total sum
   * @param min min
   * @param max max
   * @return new Range
   */</comment>
  <function><type><specifier>private</specifier> <name>Range</name></type> <name>countMaxAndBuildNewRange</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sum</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>min</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>count</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><name>sum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>new</operator> <call><name>Range</name><argument_list>(<argument><expr><name>min</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><name>sum</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>
}</block></class>
</unit>
