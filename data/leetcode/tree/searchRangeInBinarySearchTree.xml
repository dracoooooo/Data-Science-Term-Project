<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\tree\searchRangeInBinarySearchTree.java"><comment type="line">// Source : http://www.lintcode.com/en/problem/search-range-in-binary-search-tree/</comment>
<comment type="line">// Inspired by : http://www.jiuzhang.com/solutions/search-range-in-binary-search-tree/</comment>
<comment type="line">// Author : Lei Cao</comment>
<comment type="line">// Date   : 2015-10-09</comment>

<comment type="block" format="javadoc">/**********************************************************************************
 *
 * Search Range in Binary Search Tree
 *
 * Given two values k1 and k2 (where k1 &lt; k2) and a root pointer to a Binary Search Tree.
 * Find all the keys of tree in range k1 to k2.
 * i.e. print all x such that k1&lt;=x&lt;=k2 and x is a key of given BST.
 * Return all the keys in ascending order.
 *
 * Example:
 *
 * If k1 = 10 and k2 = 22, then your function should return [12, 20, 22].
 *
 *     20
 *    / \
 *   8  22
 *  / \
 * 4  12
 *
 *
 **********************************************************************************/</comment>

<package>package <name>searchRangeInBinarySearchTree</name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>

<class><specifier>public</specifier> class <name>searchRangeInBinarySearchTree</name> <block>{
    <comment type="block" format="javadoc">/**
     * @param root: The root of the binary search tree.
     * @param k1 and k2: range k1 to k2.
     * @return: Return all keys that k1&lt;=key&lt;=k2 in ascending order.
     */</comment>
    <function><type><specifier>public</specifier> <name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>searchRange</name><parameter_list>(<parameter><decl><type><name>TreeNode</name></type> <name>root</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>k1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>k2</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>root</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>result</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>left</name> <init>= <expr><call><name>searchRange</name><argument_list>(<argument><expr><name><name>root</name><operator>.</operator><name>left</name></name></expr></argument>, <argument><expr><name>k1</name></expr></argument>, <argument><expr><name>k2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>right</name> <init>= <expr><call><name>searchRange</name><argument_list>(<argument><expr><name><name>root</name><operator>.</operator><name>right</name></name></expr></argument>, <argument><expr><name>k1</name></expr></argument>, <argument><expr><name>k2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><name>left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>root</name><operator>.</operator><name>val</name></name> <operator>&gt;=</operator> <name>k1</name> <operator>&amp;&amp;</operator> <name><name>root</name><operator>.</operator><name>val</name></name> <operator>&lt;=</operator> <name>k2</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>root</name><operator>.</operator><name>val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><name>right</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    </block_content>}</block></function>

}</block></class>
</unit>
