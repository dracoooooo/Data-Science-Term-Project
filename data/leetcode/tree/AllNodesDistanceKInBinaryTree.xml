<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\tree\tree\AllNodesDistanceKInBinaryTree.java"><package>package <name>tree</name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Created by gouthamvidyapradhan on 26/04/2019 We are given a binary tree (with root node root), a
 * target node, and an integer value K.
 *
 * &lt;p&gt;Return a list of the values of all nodes that have a distance K from the target node. The
 * answer can be returned in any order.
 *
 * &lt;p&gt;Example 1:
 *
 * &lt;p&gt;Input: root = [3,5,1,6,2,0,8,null,null,7,4], target = 5, K = 2
 *
 * &lt;p&gt;Output: [7,4,1]
 *
 * &lt;p&gt;3 / \ 5 1 / \ / \ 6 2 0 8 / \ 7 4 Explanation: The nodes that are a distance 2 from the target
 * node (with value 5) have values 7, 4, and 1.
 *
 * &lt;p&gt;Note that the inputs "root" and "target" are actually TreeNodes. The descriptions of the
 * inputs above are just serializations of these objects.
 *
 * &lt;p&gt;Note:
 *
 * &lt;p&gt;The given tree is non-empty. Each node in the tree has unique values 0 &lt;= node.val &lt;= 500. The
 * target node is a node in the tree. 0 &lt;= K &lt;= 1000.
 *
 * &lt;p&gt;Solution: O(N) The general intuition is as below. All the nodes from which a target nodes can
 * be reached (including the target node) can have child nodes at a distance of K from target node.
 * All the nodes from which a target node cannot be reached definitely cannot have a child node at a
 * distance of K from target node. Do a dfs from root to find the target node. As soon as a target
 * node is found, all the nodes in the recursion stack are the ancestors of target node i.e the
 * target node can be reached from each of these nodes. Now do another dfs from each of the nodes
 * starting from target node and all its ancestors up to the root to find nodes at a distance of (K
 * - dk) where dk is the distance to the target node. Keep track of visited nodes in order not to
 * revisit the same node once again.
 */</comment>
<class><specifier>public</specifier> class <name>AllNodesDistanceKInBinaryTree</name> <block>{

  <class><specifier>public</specifier> <specifier>static</specifier> class <name>TreeNode</name> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>val</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TreeNode</name></type> <name>left</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TreeNode</name></type> <name>right</name></decl>;</decl_stmt>

    <constructor><name>TreeNode</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name>val</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>
  }</block></class>

  <comment type="block" format="javadoc">/**
   * Main method
   *
   * @param args
   */</comment>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>

  <class>class <name>Node</name> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>v</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>

    <constructor><name>Node</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>d</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>d</name></name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>v</name></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>
  }</block></class>

  <decl_stmt><decl><type><specifier>private</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>done</name></decl>;</decl_stmt>

  <function><type><specifier>public</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>distanceK</name><parameter_list>(<parameter><decl><type><name>TreeNode</name></type> <name>root</name></decl></parameter>, <parameter><decl><type><name>TreeNode</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>K</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>done</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>findAndProcess</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>K</name></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>result</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>int</name></type> <name>findAndProcess</name><parameter_list>(<parameter><decl><type><name>TreeNode</name></type> <name>node</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>result</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>K</name></decl></parameter>, <parameter><decl><type><name>TreeNode</name></type> <name>target</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>node</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>target</name> <operator>==</operator> <name>node</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>fillResult</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>K</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>status</name> <init>= <expr><call><name>findAndProcess</name><argument_list>(<argument><expr><name><name>node</name><operator>.</operator><name>left</name></name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>K</name></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>status</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><name>K</name> <operator>-</operator> <name>status</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>fillResult</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>K</name> <operator>-</operator> <name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
          <return>return <expr><name>status</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>findAndProcess</name><argument_list>(<argument><expr><name><name>node</name><operator>.</operator><name>right</name></name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>K</name></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name>status</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>K</name> <operator>-</operator> <name>status</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><call><name>fillResult</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>K</name> <operator>-</operator> <name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><name>status</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <else>else<block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></else></if_stmt>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>fillResult</name><parameter_list>(<parameter><decl><type><name>TreeNode</name></type> <name>node</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>result</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>d</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>K</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name><name>done</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>node</name><operator>.</operator><name>val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>d</name> <operator>==</operator> <name>K</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>node</name><operator>.</operator><name>val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>node</name><operator>.</operator><name>left</name></name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>done</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name><name>node</name><operator>.</operator><name>left</name><operator>.</operator><name>val</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>fillResult</name><argument_list>(<argument><expr><name><name>node</name><operator>.</operator><name>left</name></name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>d</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>K</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>node</name><operator>.</operator><name>right</name></name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>done</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name><name>node</name><operator>.</operator><name>right</name><operator>.</operator><name>val</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>fillResult</name><argument_list>(<argument><expr><name><name>node</name><operator>.</operator><name>right</name></name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>d</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>K</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></function>
}</block></class>
</unit>
