<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\tree\tree\InorderSuccessorInBST.java"><package>package <name>tree</name>;</package>

<comment type="block" format="javadoc">/**
 * Created by gouthamvidyapradhan on 14/05/2017. Given a binary search tree and a node in it, find
 * the in-order successor of that node in the BST.
 *
 * &lt;p&gt;Note: If the given node has no in-order successor in the tree, return null.
 *
 * &lt;p&gt;Solution: The below solution works with worst case time complexity of O(h) where h is the
 * height of the tree. If the current node is &lt;= target_node, recursively iterate the right of the
 * current node. else if the current node is &gt; target_node then mark the current node as the
 * successor and recursively iterate the left of the current node.
 */</comment>
<class><specifier>public</specifier> class <name>InorderSuccessorInBST</name> <block>{
  <class><specifier>public</specifier> <specifier>static</specifier> class <name>TreeNode</name> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>val</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TreeNode</name></type> <name>left</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TreeNode</name></type> <name>right</name></decl>;</decl_stmt>

    <constructor><name>TreeNode</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name>val</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>
  }</block></class>

  <comment type="block" format="javadoc">/**
   * Main method
   *
   * @param args
   * @throws Exception
   */</comment>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>TreeNode</name></type> <name>root</name> <init>= <expr><operator>new</operator> <call><name>TreeNode</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>root</name><operator>.</operator><name>left</name></name> <operator>=</operator> <operator>new</operator> <call><name>TreeNode</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>root</name><operator>.</operator><name>left</name><operator>.</operator><name>left</name></name> <operator>=</operator> <operator>new</operator> <call><name>TreeNode</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>root</name><operator>.</operator><name>left</name><operator>.</operator><name>right</name></name> <operator>=</operator> <operator>new</operator> <call><name>TreeNode</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>root</name><operator>.</operator><name>right</name></name> <operator>=</operator> <operator>new</operator> <call><name>TreeNode</name><argument_list>(<argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>root</name><operator>.</operator><name>right</name><operator>.</operator><name>left</name></name> <operator>=</operator> <operator>new</operator> <call><name>TreeNode</name><argument_list>(<argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>root</name><operator>.</operator><name>right</name><operator>.</operator><name>left</name><operator>.</operator><name>left</name></name> <operator>=</operator> <operator>new</operator> <call><name>TreeNode</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>root</name><operator>.</operator><name>right</name><operator>.</operator><name>left</name><operator>.</operator><name>right</name></name> <operator>=</operator> <operator>new</operator> <call><name>TreeNode</name><argument_list>(<argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>root</name><operator>.</operator><name>right</name><operator>.</operator><name>right</name></name> <operator>=</operator> <operator>new</operator> <call><name>TreeNode</name><argument_list>(<argument><expr><literal type="number">17</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>TreeNode</name></type> <name>ans</name> <init>= <expr><operator>new</operator> <call><name>InorderSuccessorInBST</name><argument_list>()</argument_list></call><operator>.</operator><call><name>inorderSuccessor</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name><name>root</name><operator>.</operator><name>right</name><operator>.</operator><name>left</name><operator>.</operator><name>right</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>ans</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name><name>ans</name><operator>.</operator><name>val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Find successor
   *
   * @param root root node
   * @param p target
   * @return successor
   */</comment>
  <function><type><specifier>public</specifier> <name>TreeNode</name></type> <name>inorderSuccessor</name><parameter_list>(<parameter><decl><type><name>TreeNode</name></type> <name>root</name></decl></parameter>, <parameter><decl><type><name>TreeNode</name></type> <name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>inOrder</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <comment type="block" format="javadoc">/**
   * Inorder traversal
   *
   * @param curr current node
   * @param target target node
   * @param successor successor
   * @return successor node
   */</comment>
  <function><type><specifier>private</specifier> <name>TreeNode</name></type> <name>inOrder</name><parameter_list>(<parameter><decl><type><name>TreeNode</name></type> <name>curr</name></decl></parameter>, <parameter><decl><type><name>TreeNode</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>TreeNode</name></type> <name>successor</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>curr</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>successor</name></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>curr</name><operator>.</operator><name>val</name></name> <operator>&lt;=</operator> <name><name>target</name><operator>.</operator><name>val</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>inOrder</name><argument_list>(<argument><expr><name><name>curr</name><operator>.</operator><name>right</name></name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><name>successor</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><call><name>inOrder</name><argument_list>(<argument><expr><name><name>curr</name><operator>.</operator><name>left</name></name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><name>curr</name></expr></argument>)</argument_list></call></expr>;</return> <comment type="line">// make the current node as successor</comment>
  </block_content>}</block></function>
}</block></class>
</unit>
