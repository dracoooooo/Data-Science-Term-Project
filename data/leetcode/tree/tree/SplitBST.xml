<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\tree\tree\SplitBST.java"><package>package <name>tree</name>;</package>

<comment type="block" format="javadoc">/**
 * Created by gouthamvidyapradhan on 01/05/2018. Given a Binary Search Tree (BST) with root node
 * root, and a target value V, split the tree into two subtrees where one subtree has nodes that are
 * all smaller or equal to the target value, while the other subtree has all nodes that are greater
 * than the target value. It's not necessarily the case that the tree contains a node with value V.
 *
 * &lt;p&gt;Additionally, most of the structure of the original tree should remain. Formally, for any
 * child C with parent P in the original tree, if they are both in the same subtree after the split,
 * then node C should still have the parent P.
 *
 * &lt;p&gt;You should output the root TreeNode of both subtrees after splitting, in any order.
 *
 * &lt;p&gt;Example 1:
 *
 * &lt;p&gt;Input: root = [4,2,6,1,3,5,7], V = 2 Output: [[2,1],[4,3,6,null,null,5,7]] Explanation: Note
 * that root, output[0], and output[1] are TreeNode objects, not arrays.
 *
 * &lt;p&gt;The given tree [4,2,6,1,3,5,7] is represented by the following diagram:
 *
 * &lt;p&gt;4 / \ 2 6 / \ / \ 1 3 5 7
 *
 * &lt;p&gt;while the diagrams for the outputs are:
 *
 * &lt;p&gt;4 / \ 3 6 and 2 / \ / 5 7 1 Note:
 *
 * &lt;p&gt;The size of the BST will not exceed 50. The BST is always valid and each node's value is
 * different.
 *
 * &lt;p&gt;Solution: O(N) if a current node is &lt;= to key then the current node and its child nodes form
 * the left sub-tree. Split the right node further recursively
 */</comment>
<class><specifier>public</specifier> class <name>SplitBST</name> <block>{

  <class><specifier>public</specifier> <specifier>static</specifier> class <name>TreeNode</name> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>val</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TreeNode</name></type> <name>left</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TreeNode</name></type> <name>right</name></decl>;</decl_stmt>

    <constructor><name>TreeNode</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name>val</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>
  }</block></class>

  <comment type="block" format="javadoc">/**
   * Main method
   *
   * @param args
   * @throws Exception
   */</comment>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>TreeNode</name></type> <name>root</name> <init>= <expr><operator>new</operator> <call><name>TreeNode</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>root</name><operator>.</operator><name>left</name></name> <operator>=</operator> <operator>new</operator> <call><name>TreeNode</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>root</name><operator>.</operator><name>left</name><operator>.</operator><name>left</name></name> <operator>=</operator> <operator>new</operator> <call><name>TreeNode</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>root</name><operator>.</operator><name>left</name><operator>.</operator><name>right</name></name> <operator>=</operator> <operator>new</operator> <call><name>TreeNode</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>root</name><operator>.</operator><name>right</name></name> <operator>=</operator> <operator>new</operator> <call><name>TreeNode</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>root</name><operator>.</operator><name>right</name><operator>.</operator><name>left</name></name> <operator>=</operator> <operator>new</operator> <call><name>TreeNode</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>root</name><operator>.</operator><name>right</name><operator>.</operator><name>right</name></name> <operator>=</operator> <operator>new</operator> <call><name>TreeNode</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>root</name><operator>.</operator><name>right</name><operator>.</operator><name>right</name><operator>.</operator><name>right</name></name> <operator>=</operator> <operator>new</operator> <call><name>TreeNode</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>TreeNode</name><index>[]</index></name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name>SplitBST</name><argument_list>()</argument_list></call><operator>.</operator><call><name>splitBST</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name><name>TreeNode</name><index>[]</index></name></type> <name>splitBST</name><parameter_list>(<parameter><decl><type><name>TreeNode</name></type> <name>root</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>V</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>root</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><operator>new</operator> <name><name>TreeNode</name><index>[]</index></name> <block>{<expr><literal type="null">null</literal></expr>, <expr><literal type="null">null</literal></expr>}</block></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <decl_stmt><decl><type><name><name>TreeNode</name><index>[]</index></name></type> <name>result</name> <init>= <expr><operator>new</operator> <name><name>TreeNode</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>root</name><operator>.</operator><name>val</name></name> <operator>&lt;=</operator> <name>V</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>root</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>TreeNode</name><index>[]</index></name></type> <name>right</name> <init>= <expr><call><name>splitBST</name><argument_list>(<argument><expr><name><name>root</name><operator>.</operator><name>right</name></name></expr></argument>, <argument><expr><name>V</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>root</name><operator>.</operator><name>right</name></name> <operator>=</operator> <name><name>right</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>result</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>right</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name><name>TreeNode</name><index>[]</index></name></type> <name>left</name> <init>= <expr><call><name>splitBST</name><argument_list>(<argument><expr><name><name>root</name><operator>.</operator><name>left</name></name></expr></argument>, <argument><expr><name>V</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>root</name><operator>.</operator><name>left</name></name> <operator>=</operator> <name><name>left</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>left</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>result</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>root</name></expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></function>
}</block></class>
</unit>
