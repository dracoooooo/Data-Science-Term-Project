<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\tree\FlattenBinaryTree.java"><package>package <name>tree</name>;</package>

<comment type="block" format="javadoc">/**
 * Created by gouthamvidyapradhan on 04/07/2017. Given a binary tree, flatten it to a linked list
 * in-place.
 *
 * &lt;p&gt;For example, Given
 *
 * &lt;p&gt;1 / \ 2 5 / \ \ 3 4 6
 *
 * &lt;p&gt;The flattened tree should look like: 1 \ 2 \ 3 \ 4 \ 5 \ 6
 *
 * &lt;p&gt;Solution: Do a pre-order traversal and maintain head and tail of a linked list at each
 * recursive step. i. Join the current node to the head of the left sub-list to form the current
 * node as the new head. ii. Join the tail of the left sub-list to the head of the right sub-list.
 * iii. Mark the left of the current node as null
 */</comment>
<class><specifier>public</specifier> class <name>FlattenBinaryTree</name> <block>{

  <comment type="block" format="javadoc">/** Class to keep track of head and tail */</comment>
  <class><specifier>private</specifier> class <name>LinkNode</name> <block>{
    <decl_stmt><decl><type><name>TreeNode</name></type> <name>head</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TreeNode</name></type> <name>tail</name></decl>;</decl_stmt>

    <constructor><name>LinkNode</name><parameter_list>(<parameter><decl><type><name>TreeNode</name></type> <name>head</name></decl></parameter>, <parameter><decl><type><name>TreeNode</name></type> <name>tail</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>head</name></name> <operator>=</operator> <name>head</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>tail</name></name> <operator>=</operator> <name>tail</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>
  }</block></class>

  <class><specifier>public</specifier> <specifier>static</specifier> class <name>TreeNode</name> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>val</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TreeNode</name></type> <name>left</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TreeNode</name></type> <name>right</name></decl>;</decl_stmt>

    <constructor><name>TreeNode</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name>val</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>
  }</block></class>

  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>TreeNode</name></type> <name>root</name> <init>= <expr><operator>new</operator> <call><name>TreeNode</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>root</name><operator>.</operator><name>left</name></name> <operator>=</operator> <operator>new</operator> <call><name>TreeNode</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>root</name><operator>.</operator><name>right</name></name> <operator>=</operator> <operator>new</operator> <call><name>TreeNode</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>new</operator> <call><name>FlattenBinaryTree</name><argument_list>()</argument_list></call><operator>.</operator><call><name>flatten</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>print</name></name><argument_list>(<argument><expr><name><name>root</name><operator>.</operator><name>val</name></name> <operator>+</operator> <literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>print</name></name><argument_list>(<argument><expr><name><name>root</name><operator>.</operator><name>right</name><operator>.</operator><name>val</name></name> <operator>+</operator> <literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>print</name></name><argument_list>(<argument><expr><name><name>root</name><operator>.</operator><name>right</name><operator>.</operator><name>right</name><operator>.</operator><name>val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>void</name></type> <name>flatten</name><parameter_list>(<parameter><decl><type><name>TreeNode</name></type> <name>root</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>preOrder</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>LinkNode</name></type> <name>preOrder</name><parameter_list>(<parameter><decl><type><name>TreeNode</name></type> <name>node</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>node</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="null">null</literal></expr>;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>LinkNode</name></type> <name>left</name> <init>= <expr><call><name>preOrder</name><argument_list>(<argument><expr><name><name>node</name><operator>.</operator><name>left</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>LinkNode</name></type> <name>right</name> <init>= <expr><call><name>preOrder</name><argument_list>(<argument><expr><name><name>node</name><operator>.</operator><name>right</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>LinkNode</name></type> <name>lNode</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>left</name> <operator>==</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>right</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>lNode</name> <operator>=</operator> <operator>new</operator> <call><name>LinkNode</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>left</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>node</name><operator>.</operator><name>right</name></name> <operator>=</operator> <name><name>right</name><operator>.</operator><name>head</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>lNode</name> <operator>=</operator> <operator>new</operator> <call><name>LinkNode</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name><name>right</name><operator>.</operator><name>tail</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>right</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>node</name><operator>.</operator><name>right</name></name> <operator>=</operator> <name><name>left</name><operator>.</operator><name>head</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>lNode</name> <operator>=</operator> <operator>new</operator> <call><name>LinkNode</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name><name>left</name><operator>.</operator><name>tail</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>node</name><operator>.</operator><name>right</name></name> <operator>=</operator> <name><name>left</name><operator>.</operator><name>head</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>left</name><operator>.</operator><name>tail</name><operator>.</operator><name>right</name></name> <operator>=</operator> <name><name>right</name><operator>.</operator><name>head</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>lNode</name> <operator>=</operator> <operator>new</operator> <call><name>LinkNode</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name><name>right</name><operator>.</operator><name>tail</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name><name>node</name><operator>.</operator><name>left</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    <return>return <expr><name>lNode</name></expr>;</return>
  </block_content>}</block></function>
}</block></class>
</unit>
