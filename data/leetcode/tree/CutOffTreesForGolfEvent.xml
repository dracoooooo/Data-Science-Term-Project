<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\tree\CutOffTreesForGolfEvent.java"><package>package <name>breadth_first_search</name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Created by gouthamvidyapradhan on 23/06/2018.
 *
 * &lt;p&gt;You are asked to cut off trees in a forest for a golf event. The forest is represented as a
 * non-negative 2D map, in this map:
 *
 * &lt;p&gt;0 represents the obstacle can't be reached. 1 represents the ground can be walked through. The
 * place with number bigger than 1 represents a tree can be walked through, and this positive number
 * represents the tree's height. You are asked to cut off all the trees in this forest in the order
 * of tree's height - always cut off the tree with lowest height first. And after cutting, the
 * original place has the tree will become a grass (value 1).
 *
 * &lt;p&gt;You will start from the point (0, 0) and you should output the minimum steps you need to walk
 * to cut off all the trees. If you can't cut off all the trees, output -1 in that situation.
 *
 * &lt;p&gt;You are guaranteed that no two trees have the same height and there is at least one tree needs
 * to be cut off.
 *
 * &lt;p&gt;Example 1: Input: [ [1,2,3], [0,0,4], [7,6,5] ] Output: 6 Example 2: Input: [ [1,2,3],
 * [0,0,0], [7,6,5] ] Output: -1 Example 3: Input: [ [2,3,4], [0,0,5], [8,7,6] ] Output: 6
 * Explanation: You started from the point (0,0) and you can cut off the tree in (0,0) directly
 * without walking. Hint: size of the given matrix will not exceed 50x50.
 *
 * &lt;p&gt;Solution: O(N x M) ^ 2: Bfs to each height starting from 1 and calculate the total sum of
 * distance.
 */</comment>
<class><specifier>public</specifier> class <name>CutOffTreesForGolfEvent</name> <block>{

  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content/>}</block></function>

  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>int</name><index>[]</index></name></type> <name>R</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>int</name><index>[]</index></name></type> <name>C</name> <init>= <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <class><specifier>static</specifier> class <name>Cell</name> <super_list><implements>implements <super><name><name>Comparable</name><argument_list type="generic">&lt;<argument><name>Cell</name></argument>&gt;</argument_list></name></super></implements></super_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>distance</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>height</name></decl>;</decl_stmt>

    <constructor><name>Cell</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>r</name></name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>c</name></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <type><specifier>public</specifier> <name>int</name></type> <name>compareTo</name><parameter_list>(<parameter><decl><type><name>Cell</name></type> <name>o</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <return>return <expr><call><name><name>Integer</name><operator>.</operator><name>compare</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>o</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
  }</block></class>

  <function><type><specifier>public</specifier> <name>int</name></type> <name>cutOffTree</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>forest</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>distance</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Cell</name></argument>&gt;</argument_list></name></type> <name>trees</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>forest</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <call><name><name>forest</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name><name>forest</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>Cell</name></type> <name>cell</name> <init>= <expr><operator>new</operator> <call><name>Cell</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><name><name>cell</name><operator>.</operator><name>height</name></name> <operator>=</operator> <call><name><name>forest</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>trees</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>cell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name><name>Collections</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><name>trees</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>sR</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>sC</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>Cell</name></type> <name>t</name> <range>: <expr><name>trees</name></expr></range></decl></init>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>dist</name> <init>= <expr><call><name>bfs</name><argument_list>(<argument><expr><name>forest</name></expr></argument>, <argument><expr><name><name>t</name><operator>.</operator><name>height</name></name></expr></argument>, <argument><expr><name>sR</name></expr></argument>, <argument><expr><name>sC</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>dist</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if>
      <else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>distance</name> <operator>+=</operator> <name>dist</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
      <expr_stmt><expr><name>sR</name> <operator>=</operator> <name><name>t</name><operator>.</operator><name>r</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>sC</name> <operator>=</operator> <name><name>t</name><operator>.</operator><name>c</name></name></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>distance</name></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>int</name></type> <name>bfs</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>forest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sR</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sC</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name><name>forest</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>sR</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name>sC</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>target</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>forest</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>sR</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>set</name><argument_list>(<argument><expr><name>sC</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>Cell</name></type> <name>start</name> <init>= <expr><operator>new</operator> <call><name>Cell</name><argument_list>(<argument><expr><name>sR</name></expr></argument>, <argument><expr><name>sC</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>start</name><operator>.</operator><name>distance</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>Queue</name><argument_list type="generic">&lt;<argument><name>Cell</name></argument>&gt;</argument_list></name></type> <name>queue</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayDeque</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>queue</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>boolean</name><index>[]</index><index>[]</index></name></type> <name>done</name> <init>= <expr><operator>new</operator> <name><name>boolean</name><index>[<expr><call><name><name>forest</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index><index>[<expr><call><name><name>forest</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>done</name><index>[<expr><name>sR</name></expr>]</index><index>[<expr><name>sC</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    <while>while <condition>(<expr><operator>!</operator><call><name><name>queue</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>Cell</name></type> <name>cell</name> <init>= <expr><call><name><name>queue</name><operator>.</operator><name>poll</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>newR</name> <init>= <expr><name><name>cell</name><operator>.</operator><name>r</name></name> <operator>+</operator> <name><name>R</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>newC</name> <init>= <expr><name><name>cell</name><operator>.</operator><name>c</name></name> <operator>+</operator> <name><name>C</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Cell</name></type> <name>newCell</name> <init>= <expr><operator>new</operator> <call><name>Cell</name><argument_list>(<argument><expr><name>newR</name></expr></argument>, <argument><expr><name>newC</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>newR</name> <operator>&gt;=</operator> <literal type="number">0</literal>
            <operator>&amp;&amp;</operator> <name>newR</name> <operator>&lt;</operator> <call><name><name>forest</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call>
            <operator>&amp;&amp;</operator> <name>newC</name> <operator>&gt;=</operator> <literal type="number">0</literal>
            <operator>&amp;&amp;</operator> <name>newC</name> <operator>&lt;</operator> <call><name><name>forest</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call>
            <operator>&amp;&amp;</operator> <call><name><name>forest</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>newR</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name>newC</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal>
            <operator>&amp;&amp;</operator> <operator>!</operator><name><name>done</name><index>[<expr><name><name>newCell</name><operator>.</operator><name>r</name></name></expr>]</index><index>[<expr><name><name>newCell</name><operator>.</operator><name>c</name></name></expr>]</index></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>newCell</name><operator>.</operator><name>distance</name></name> <operator>=</operator> <name><name>cell</name><operator>.</operator><name>distance</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><call><name><name>forest</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>newR</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name>newC</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>target</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>forest</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>newR</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>set</name><argument_list>(<argument><expr><name>newC</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name><name>newCell</name><operator>.</operator><name>distance</name></name></expr>;</return>
          </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><name><name>done</name><index>[<expr><name><name>newCell</name><operator>.</operator><name>r</name></name></expr>]</index><index>[<expr><name><name>newCell</name><operator>.</operator><name>c</name></name></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>queue</name><operator>.</operator><name>offer</name></name><argument_list>(<argument><expr><name>newCell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
    </block_content>}</block></while>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></function>
}</block></class>
</unit>
