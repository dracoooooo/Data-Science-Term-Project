<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="C:\Users\86134\Desktop\Data-Science-Term-Project\data\leetcode\tree\PostorderToBT.java"><package>package <name>tree</name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Created by gouthamvidyapradhan on 23/02/2017. Given inorder and postorder traversal of a tree,
 * construct the binary tree.
 *
 * &lt;p&gt;Note: You may assume that duplicates do not exist in the tree.
 */</comment>
<class><specifier>public</specifier> class <name>PostorderToBT</name> <block>{

  <decl_stmt><decl><type><specifier>private</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>INDEX</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>int</name></type> <name>postIndex</name></decl>;</decl_stmt>

  <class><specifier>public</specifier> class <name>TreeNode</name> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>val</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TreeNode</name></type> <name>left</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TreeNode</name></type> <name>right</name></decl>;</decl_stmt>

    <constructor><name>TreeNode</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
      <expr_stmt><expr><name>val</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>
  }</block></class>

  <comment type="block" format="javadoc">/**
   * Main method
   *
   * @param args
   * @throws Exception
   */</comment>
  <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name><name>in</name><index>[]</index></name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[]</index></name> <block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name><name>post</name><index>[]</index></name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[]</index></name> <block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TreeNode</name></type> <name>root</name> <init>= <expr><operator>new</operator> <call><name>PostorderToBT</name><argument_list>()</argument_list></call><operator>.</operator><call><name>buildTree</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>post</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><operator>new</operator> <call><name>PostorderToBT</name><argument_list>()</argument_list></call><operator>.</operator><call><name>preorderPrint</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>

  <function><type><specifier>public</specifier> <name>TreeNode</name></type> <name>buildTree</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>inorder</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>postorder</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <range>: <expr><name>inorder</name></expr></range></decl></init>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>INDEX</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>count</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
    <expr_stmt><expr><name>postIndex</name> <operator>=</operator> <name><name>postorder</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <return>return <expr><call><name>build</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>inorder</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>postorder</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>void</name></type> <name>preorderPrint</name><parameter_list>(<parameter><decl><type><name>TreeNode</name></type> <name>root</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>root</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>print</name></name><argument_list>(<argument><expr><name><name>root</name><operator>.</operator><name>val</name></name> <operator>+</operator> <literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>preorderPrint</name><argument_list>(<argument><expr><name><name>root</name><operator>.</operator><name>left</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>preorderPrint</name><argument_list>(<argument><expr><name><name>root</name><operator>.</operator><name>right</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></function>

  <function><type><specifier>private</specifier> <name>TreeNode</name></type> <name>build</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>e</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>postorder</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>postIndex</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>s</name> <operator>&lt;=</operator> <name>e</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>poi</name> <init>= <expr><name><name>postorder</name><index>[<expr><name>postIndex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>int</name></type> <name>ini</name> <init>= <expr><call><name><name>INDEX</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>poi</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>TreeNode</name></type> <name>node</name> <init>= <expr><operator>new</operator> <call><name>TreeNode</name><argument_list>(<argument><expr><name>poi</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>postIndex</name><operator>--</operator></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>e</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>node</name></expr>;</return></block_content></block></if></if_stmt> <comment type="line">// leaf node</comment>

      <expr_stmt><expr><name><name>node</name><operator>.</operator><name>right</name></name> <operator>=</operator> <call><name>build</name><argument_list>(<argument><expr><name>ini</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>postorder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>node</name><operator>.</operator><name>left</name></name> <operator>=</operator> <call><name>build</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>ini</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>postorder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <return>return <expr><name>node</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="null">null</literal></expr>;</return>
  </block_content>}</block></function>
}</block></class>
</unit>
