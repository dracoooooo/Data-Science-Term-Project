package cpu.alu;

import static org.junit.Assert.assertEquals;

import org.junit.Test;

public class ALUTest {

    private ALU alu = new ALU();

    @Test
    public void testAnd1() {
        assertEquals("00000000000000000000000000000001", alu.and("00000000000000000000000000000101", "10010010101001000001101110101001"));
    }

    @Test
    public void testAnd2() {
        assertEquals("00000000000000000000000000000101", alu.and("00000000000000000000000000000101", "10010010101001000001101110101111"));
    }

    @Test
    public void testOr1() {
        assertEquals("10010010101001000001101110101101", alu.or("00000000000000000000000000000101", "10010010101001000001101110101001"));
    }

    @Test
    public void testOr2() {
        assertEquals("10010010101001000001101110101111", alu.or("00000000000000000000000000000101", "10010010101001000001101110101111"));
    }

    @Test
    public void testXor1() {
        assertEquals("10010010101001000001101110101100", alu.xor("00000000000000000000000000000101", "10010010101001000001101110101001"));
    }

    @Test
    public void testXor2() {
        assertEquals("10010010101001000001101110101010", alu.xor("00000000000000000000000000000101", "10010010101001000001101110101111"));
    }

    @Test
    public void testAdd1() {
        assertEquals("00000000000000000000000000001000", alu.add("00000000000000000000000000000100", "00000000000000000000000000000100"));
    }

    @Test
    public void testAdd2() {
        assertEquals("11111010101001000110011110000111", alu.add("11111000100110000101011000000110", "00000010000011000001000110000001"));
    }

	@Test
	public void testAdd3() {
		assertEquals("00000000000000111010100000100001", alu.add("00000000000000111001001101010100", "00000000000000000001010011001101"));
	}

	@Test
	public void testAdd4() {
		assertEquals("11111111111111000101011111011111", alu.add("11111111111111000110110010101100", "11111111111111111110101100110011"));
	}

	@Test
	public void testAdd5() {
		assertEquals("00000000001011011110011001101100", alu.add("11111111111111000110110100000110", "00000000001100010111100101100110"));
	}

    @Test
    public void testSub1() {
		assertEquals("00000000000000000000000000000000", alu.sub("00000000000000000000000000000100", "00000000000000000000000000000100"));
    }

    @Test
    public void testSub2() {
		assertEquals("00000000000000110111111010000111", alu.sub("00000000000000000001010011001101", "00000000000000111001001101010100"));
    }

	@Test
	public void testSub3() {
		assertEquals("11111111110100100001100110010100", alu.sub("00000000001100010111100101100110", "00000000000000111001001011111010"));
	}

	@Test
	public void testSub4() {
		assertEquals("11111111110010101111001110100000", alu.sub("00000000001100010111100101100110", "11111111111111000110110100000110"));
	}

	@Test
	public void testSub5() {
		assertEquals("11111111111111001110101101011100", alu.sub("11111111111111111000000110101010", "11111111111111000110110100000110"));
	}
}
